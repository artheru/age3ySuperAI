//==============================================================================
// Draugur AI, Version 7.01
// by Felix Hermansson (hoodncloak@hotmail.com)
// 20 April 2008
//
// Improved main AI file for AoE3 - The Asian Dynasties
//
// Based on the original aiMain file for AoE3 - The Asian Dynasties by Ensemble 
// Studios and Big Huge Games, as well the Draugur AI file 6.00 for AoE3 - The
// War Chiefs
//==============================================================================


//==============================================================================
//
// AI changes made by SkyTeam
// This uses Felix Hermansson's Drauger AI_(Version 7.01) as a base, but has 
// varied improvements
// Last Updated: 20130208
//
//==============================================================================


//==============================================================================
// Constants
//==============================================================================

// Temporary constants, to be deleted if implemented in C++

extern const int cNumResourceTypes = 3;  // Gold, food, wood.
extern const float   baselineHandicap = 1.0;    // This is the handicap given to cDifficultyHard.  Our intent is to ship with this at 1.0,
                                                // meaning that hard has no handicap advantage or penalty.
                                                // All other difficulty levels will be adjusted relative to this constant.  This means that
                                                // we can gradually reduce this number as the AI's competence increases, and all the difficulty levels will respond.
extern int           gMaxPop = 255;             // Absolute hard limit pop cap for game...will be set lower on some difficulty levels 
extern const int     cMaxSettlersPerPlantation = 10;

// Start mode constants.
extern const int     cStartModeScenarioNoTC = 0;   // Scenario, wait for aiStart unit, then play without a TC
extern const int     cStartModeScenarioTC = 1;     // Scenario, wait for aiStart unit, then play with starting TC
extern const int     cStartModeScenarioWagon = 2;  // Scenario, wait for aiStart unit, then start TC build plan.
extern const int     cStartModeBoat = 3;           // RM or GC game, with a caravel start.  Wait to unload, then start TC build plan.
extern const int     cStartModeLandTC = 4;         // RM or GC game, starting with a TC...just go.
extern const int     cStartModeLandWagon = 5;      // RM or GC game, starting with a wagon.  Explore, start TC build plan.



//==============================================================================
// Econ variables
//==============================================================================
extern int  gGatherGoal = -1;       // Stores all top-level gatherer data
extern int  gFarmBaseID = -1;       // Current operating bases for each resource
extern int  gFoodBaseID = -1;
extern int  gGoldBaseID = -1;
extern int  gWoodBaseID = -1;
extern int  gNextFarmBaseID = -1;   // Overflow operating bases for each resource
extern int  gNextFoodBaseID = -1;
extern int  gNextGoldBaseID = -1;
extern int  gNextWoodBaseID = -1;
extern int  gPrevFarmBaseID = -1;   // Phasing-out bases for each resource
extern int  gPrevFoodBaseID = -1;
extern int  gPrevGoldBaseID = -1;
extern int  gPrevWoodBaseID = -1;
//extern float gMaximumBaseResourceDistance = 150.0;

extern int  gDefaultDeck = -1;   // Home city deck used by each AI
extern bool gEarlyEconPhase = true; // Used to indicate that we're in a special startup econ phase, i.e. almost all food for most civs.
                                    // This is turned off when we decide it's time to go military, i.e when we build a barracks or get attacked
                                    // or reach age 2.
                                    
extern bool gTimeToFarm = false;    // Set true when we start to run out of cheap early food.
extern bool gTimeForPlantations = false;  // Set true when we start to run out of mine-able gold.
extern bool gStopToLogging = false;   // Set true when we no wood at main.

extern float gTSFactorDistance = -200.0;  // negative is good
extern float gTSFactorPoint = 10.0;			// positive is good
extern float gTSFactorTimeToDone = 0.0;	// positive is good
extern float gTSFactorBase = 100.0;			// positive is good
extern float gTSFactorDanger = -10.0;		// negative is good

extern int  gEconUnit = cUnitTypeSettler; // Set appropriately for the different civilizations later.
extern int  gHouseUnit = cUnitTypeHouse;  // Housing unit, different per civ.
extern int  gTowerUnit = cUnitTypeOutpost;   // Tower unit, blockhouse for Russians, huts and teepees for natives, castle for Asians.
extern int  gFarmUnit = cUnitTypeMill;    // Will be farm for natives and rice paddy for Asians.
extern int  gPlantationUnit = cUnitTypePlantation;    // Will be farm for natives and rice paddy for Asians.
extern int  gLivestockPenUnit = cUnitTypeLivestockPen;    // The Asians all have different ones.
extern int  gCoveredWagonUnit = cUnitTypeCoveredWagon;    // Allow for a different type (currently none).
extern int  gMarketUnit = cUnitTypeMarket;    // The Asians have a different type.
extern int  gDockUnit = cUnitTypeDock;    // The Asians have a different type.

extern bool gFlagChosen = false;  // need to make sure they only build one

extern int  gLastTribSentTime = 0;

extern int  gEconUpgradePlan = -1;

extern bool gGoldEmergency = false;  // Set this true if we need a gold mine, and don't have enough wood.  Overrides econ to 100% wood.

extern int  gVPEscrowID = -1;       // Used to reserve resources for accelerator building.
extern int  gUpgradeEscrowID = -1;  // Used to reserve ships for age upgrades
// extern int  gHouseEscrowID = -1;    // Used to buy houses/manors only, off econ account.
extern int  gTowerEscrowID = -1;

extern int gTCBuildPlanID = -1;

extern int gStartMode = -1;    // See start mode constants, above.  This variable is set 
                        // in main() and is used to decide which cascades of rules
                        // should be used to start the AI.
                        
extern bool gGoodFishingMap = false;    // Set in init(), can be overridden in postInit() if desired.  True indicates that fishing is a good idea on this map.
extern int  gFishingPlan = -1;      // Plan ID for main fishing plan.
extern int gFishingBoatMaintainPlan = -1; // Fishing boats to maintain
extern int gFishingUnit = cUnitTypeFishingBoat; // Fishing Boat
extern int gNumFishBoats = 0;    // Set in the rule startFishing, higher for boomers.

extern int  gHerdPlanID = -1;
                        
extern int gSettlerMaintainPlan = -1;   // Main plan to control settler population

extern int gTransportUnit = cUnitTypeAbstractWarShip;  // hard coded ship type for now
extern int  gWaterTransportUnitMaintainPlan = -1;  // The plan that maintains all the ships
extern int  gWaterExplorePlan = -1;    // Plan ID for ocean exploration plan
extern bool gWaterMap = false;               // True when we are on a water map
extern int  gNavyDefendPlan = -1;
extern int  gNavyAttackPlan = -1;

extern vector gTCSearchVector = cInvalidVector;  // Used to define the center of the TC building placement search.
extern int   gTCStartTime = 10000;                   // Used to define when the TC build plan can go active.  In ms.

extern int  gAgeUpResearchPlan = -1;      // Plan used to send politician from HC, used to detect if an age upgrade is in progress.

extern int  gAgeUpTime = 0;            // Time we entered this age

extern int gNuggetMessagePercentage = 100;
extern int gFeedGoldTo = -1;     // If set, this indicates which player we need to be supplying with regular gold shipments.
extern int gFeedWoodTo = -1;     // See commsHandler and monitorFeeding rule.
extern int gFeedFoodTo = -1;

extern const int  cForwardBaseStateNone = -1;      // None exists, none in progress
extern const int  cForwardBaseStateBuilding = 0;   // Fort wagon exists, but no fort yet.
extern const int  cForwardBaseStateActive = 1;     // Base is active, defend and train plans there.
extern int gForwardBaseState = cForwardBaseStateNone;
extern int gForwardBaseID = -1;                    // Set when state goes to Active
extern vector gForwardBaseLocation = cInvalidVector;  // Set when state goes to 'building' or earlier.
extern int gForwardBaseBuildPlan = -1;

extern int  gNativeDancePlan = -1;


//==============================================================================
// Military variables
//==============================================================================
extern int  gLandDefendPlan0 = -1;   // Primary land defend plan
extern int  gLandReservePlan = -1;     // Reserve defend plan, gathers units for use in the next military mission
extern int  gWaterDefendPlan0 = -1;    // Primary water defend plan

extern bool gDefenseReflex = false;    // Set true when a defense reflex is overriding normal ops.
extern bool gDefenseReflexPaused = false; // Set true when we're in a defense reflex, but overwhelmed, so we're hiding to rebuild an army.
extern int  gDefenseReflexBaseID = -1; // Set to the base ID that we're defending in this emergency
extern vector  gDefenseReflexLocation = cInvalidVector;  // Location we're defending in this emergency
extern int  gDefenseReflexStartTime = 0;

extern int  gLandUnitPicker = -1;      // Picks the best land military units to train.
extern int  gMainAttackGoal = -1;      // Attack goal monitors opportunities, launches missions.
extern int  gLandMilUnitUpgradePlan = -1;    // The plan ID of the most recent unit upgrade plan
extern int  gArtilleryMaintainPlan = -1;     // Manual plan to force building of some siege.

extern int  gCaravelMaintain = -1;     // Maintain plans for naval units.
extern int  gGalleonMaintain = -1;
extern int  gFrigateMaintain = -1;
extern int  gMonitorMaintain = -1;
extern int  gCanoeMaintain = -1;
extern int  gWaterExploreMaintain = -1;

extern int  gCaravelUnit = cUnitTypeCaravel; // Will be Galley for Ottomans, Canoe for natives, War Junk for Chinese, Fune for Japanese
extern int  gGalleonUnit = cUnitTypeGalleon; // Will be Fluyt for Dutch, War Canoe for natives, Fuchuan for Chinese, Atakabune for Japanese
extern int  gFrigateUnit = cUnitTypeFrigate; // Will be Tekkousen for Japanese

extern bool gNavyMap = false;    // Setting this false prevents navies
extern const int cNavyModeOff = 0;
//extern const int cNavyModeExplore = 1;
extern const int cNavyModeActive = 2;
extern int  gNavyMode = cNavyModeOff; // Tells us whether we're making no navy, just an exploring ship, or a full navy.
extern vector gNavyVec = cInvalidVector;  // The center of the navy's operations.


extern int  gPrimaryArmyUnit = -1;     // Main land unit type
extern int  gSecndaryArmyUnit = -1;    // Secondary land unit type
extern int  gTertiaryArmyUnit = -1;    // Tertiary land unit type
extern int  gNumArmyUnitTypes = 3;    // How many land unit types do we want to train?

extern int  gPrimaryNavyUnit = -1;     // Main water unit type
extern int  gSecndaryNavyUnit = -1;    // Secondary water unit type
extern int  gTertiaryNavyUnit = -1;    // Tertiary water unit type
extern int  gNumNavyUnitTypes = -1;    // How many water unit types do we want to train?

extern int  gGoodArmyPop = -1;         // This number is updated by the pop manager, to give a ballpark feel for the pop count needed to create a credible
                                       // attack army.  It is based on military pop allowed and game time, and is very sensitive to difficulty level.  
                                       // This is used by the strategyMaster rule to help decide when certain mission types make sense.  For example, if 
                                       // your available military pop is only 1/2 of gGoodArmyPop, a base attack would be foolish, but villager raiding or
                                       // claiming a VP site might be good choices.  


extern int  gUnitPickSource = cOpportunitySourceAutoGenerated;  // Indicates who decides which units are being trained...self, trigger, or ally player.
extern int  gUnitPickPlayerID = -1;                // If the source is cOpportunitySourceAllyRequest, this will hold the player ID.


extern int  gMostRecentAllyOpportunityID = -1;  // Which opportunity (if any) was created by an ally?  (Only one at a time allowed.)
extern int  gMostRecentTriggerOpportunityID = -1;  // Which opportunity (if any) was created by a trigger?  (Only one at a time allowed.)

extern int  gLastClaimMissionTime = -1;
extern int  gLastAttackMissionTime = -1;
extern int  gLastDefendMissionTime = -1;
extern int  gClaimMissionInterval = 60000;  // 1 minutes.  This variable indicates how long it takes for claim opportunities to score their maximum.  Typically, a new one will launch before this time.
extern int  gAttackMissionInterval = 60000; // 1 minutes.  Suppresses attack scores (linearly) for 1 minutes after one launches.  Attacks will usually happen before this period is over.
extern int  gDefendMissionInterval = 120000;  // 2 minutes.   Makes the AI less likely to do another defend right after doing one.
extern bool gDelayAttacks = false;     // Can be used on low difficulty levels to prevent attacks before the AI is attacked.  (AI is defend-only until this variable is
                                       // set false.

extern int gExplorerUnit = cUnitTypeExplorer;
extern int gBaseAttackPlan = -1;
extern vector gBaseAttackLocation = cInvalidVector;
 

//==============================================================================
// Other global variables
//==============================================================================
extern bool gSPC = false;           // Set true in main if this is an spc or campaign game
extern int  gExplorerControlPlan = -1; // Defend plan set up to control the explorer's location
extern int  gLandExplorePlan = -1;  // Primary land exploration

extern int  gMainBase = -1;

extern int  gcVPTypeAny = 0;
extern int  gcVPTypeNative = cVPNative;
extern int  gcVPTypeSecret = cVPSecret;
extern int  gcVPTypeTrade = cVPTrade;


extern float gInitRushBoom = 0.0;
extern float gInitOffenseDefense = 0.0;
extern float gInitBiasCav = 0.0;
extern float gInitBiasInf = 0.0;
extern float gInitBiasArt = 0.0;
extern float gInitBiasNative = 0.0;
extern float gInitBiasTrade = 0.0;


extern bool gIAmCaptain = false;
extern int  gCaptainPlayerNumber = -1;

extern int  gResignType = -1;       // Reason for AI requesting permission to resign

extern bool gBuildWalls = false;    // Global indicating if we're walling up or not.
extern int  gNumTowers = 0;         // How many towers do we want to build?
extern int  gPrevNumTowers = 0;     // Set when a command is received, to allow resetting when a cancel is received.

extern bool gIsMonopolyRunning = false; // Set true while a monopoly countdown is in effect.
extern int  gMonopolyTeam = -1;         // TeamID of team that will win if the monopoly timer completes.
extern int  gMonopolyEndTime = -1;      // Gametime when current monopoly should end

extern bool gIsKOTHRunning = false; // Set true while a KOTH countdown is in effect.
extern int  gKOTHTeam = -1;         // TeamID of team that will win if the KOTH timer completes.

extern bool gRevolutionFlag = false;    // Set true after a successful revolt


//==============================================================================
// Function forward declarations.
//
// Used in loader file to override default values, called at start of main()

mutable void preInit(void) {}

// Used in loader file to override initialization decisions, called at end of main()
mutable void postInit(void) {}

mutable void econMaster(int mode=-1, int value=-1) {}
mutable void shipGrantedHandler(int parm=-1) {}
mutable int initUnitPicker(string name="BUG", int numberTypes=1, int minUnits=10,int maxUnits=20, int minPop=-1, int maxPop=-1, int numberBuildings=1, bool guessEnemyUnitType=false) {return(-1);}
mutable void updateForecasts(void) {}
mutable void setUnitPickerPreference(int upID=-1) {}
mutable void endDefenseReflex(void) {}
mutable float getlocHP(vector loc = cInvalidVector,float radius=20.0,int relation=cPlayerRelationEnemyNotGaia,int Type=cUnitTypeLogicalTypeLandMilitary){return(0);}
   
//==============================================================================
// Global Arrays
//==============================================================================
// Forecast float array initialized below.
extern int  gForecasts = -1;

// Forecasted demand over the next few minutes
//extern float gGoldForecast = 0.0;			
//extern float gWoodForecast = 0.0;
//extern float gFoodForecast = 0.0;

// Percentage of gatherers assigned.  Array.
extern int  gTargetGathererPercents = -1;

extern int  gMapNames = -1;   // An array of random map names, so we can store ID numbers in player histories

extern int  gTargetSettlerCounts = -1; // How many settlers do we want per age?

extern int  gConsulateTechs = -1; //List of all the consulate techs
extern int  gConsulateTechsSize = -1; //Size of the list of all the consulate techs

extern int  gAsianWonders = -1; //List of wonders for the Asian civs

extern int  gAge2PoliticianList = -1; // List of Age 2 European politicians
extern int  gAge3PoliticianList = -1; // List of Age 3 European politicians
extern int  gAge4PoliticianList = -1; // List of Age 4 European politicians
extern int  gAge5PoliticianList = -1; // List of Age 5 European politicians

extern int  gAge2WonderList = -1; // List of Age 2 Asian age-up wonders
extern int  gAge3WonderList = -1; // List of Age 3 Asian age-up wonders
extern int  gAge4WonderList = -1; // List of Age 4 Asian age-up wonders
extern int  gAge5WonderList = -1; // List of Age 5 Asian age-up wonders

extern int  gAge2WonderTechList = -1; // List of Age 2 Asian age-up technologies
extern int  gAge3WonderTechList = -1; // List of Age 3 Asian age-up technologies
extern int  gAge4WonderTechList = -1; // List of Age 4 Asian age-up technologies
extern int  gAge5WonderTechList = -1; // List of Age 5 Asian age-up technologies

extern int  gAgeUpPoliticians = -1; // Array of available age-up politicians
extern int  gPoliticianScores = -1; // Array used to calculate "scores" for different European politicians
extern int  gNatCouncilScores = -1; // Array used to calculate "scores" for different native council members
extern int  gAsianWonderScores = -1; // Array used to calculate "scores" for different Asian wonders

extern int  gRevolutionaryCards = -1; // List of available post-revolution cards

// New control variables added for the Draugur AI
extern bool cvOkToBuildDeck = true;      // Set to false in preInit() to force the AI to use a pre-assigned deck instead of building its own. For custom scenarios only!
extern bool cvIsNormal = true; // Set to false in this is the player's handicap game


float weightWood=0.333;
float weightFood=0.333;
float weightGold=0.333;

int arrEngaged=-1;
int arrEngagedTarget=-1;
int arrEngagedAux=-1;
int nEngaged=0;

void engageUnit(int unit=-444, int targetID=-1, float auxilary=0){
	xsArraySetInt(arrEngaged,nEngaged,unit);
	xsArraySetInt(arrEngagedTarget,nEngaged,targetID);
	xsArraySetFloat(arrEngagedAux,nEngaged,auxilary);
	nEngaged=nEngaged+1;
}

void updateAux(int i=-1, float auxilary=-1){
	xsArraySetFloat(arrEngagedAux,i,auxilary);
}

float getAux(int i=-1){
	return (xsArrayGetFloat(arrEngagedAux,i));
}

void dengage(int i=-1){
	xsArraySetInt(arrEngaged,i,xsArrayGetInt(arrEngaged,nEngaged));
	xsArraySetInt(arrEngagedTarget,i,xsArrayGetInt(arrEngagedTarget,nEngaged));
	xsArraySetFloat(arrEngagedAux,i,xsArrayGetFloat(arrEngagedAux,nEngaged));
	nEngaged=nEngaged-1;
}


float getRelativeVillagerHP(int enemyID=-1){
	float tmpHP=kbUnitGetCurrentHitpoints(enemyID);
	if (tmpHP<50) tmpHP=50;
	int age=kbGetAgeForPlayer(kbUnitGetPlayerID(enemyID));
	if (kbUnitIsType(enemyID,cUnitTypeExplorer)) 
		tmpHP=tmpHP*(0.3+age*0.2);
	if (kbUnitIsType(enemyID,cUnitTypeCannotConvertHill))
		tmpHP=tmpHP*(0.5+age*0.1);
	if (kbUnitIsType(enemyID,cUnitTypeAbstractPet))
		tmpHP=tmpHP*(0.3+age*0.1);
	if (kbUnitIsType(enemyID,cUnitTypeAbstractHandCavalry))
		tmpHP=tmpHP*(1.5+age*0.2);
	else
		tmpHP=tmpHP;
	return(tmpHP);
}

//==============================================================================
/* initArrays()
   Initialize all global arrays here, to make it easy to find var type and size.
*/
//==============================================================================
void initArrays(void)
{
   gForecasts = xsArrayCreateFloat(cNumResourceTypes, 0.0, "Forecasts");
   gTargetGathererPercents = xsArrayCreateFloat(cNumResourceTypes, 0.0, "Gatherer Percents");
   gMapNames = xsArrayCreateString(50, "", "Map names");
      xsArraySetString(gMapNames, 0, "amazonia");
      xsArraySetString(gMapNames, 1, "bayou");
      xsArraySetString(gMapNames, 2, "caribbean");
      xsArraySetString(gMapNames, 3, "carolina");
      xsArraySetString(gMapNames, 4, "great lakes");
      xsArraySetString(gMapNames, 5, "great plains");
      xsArraySetString(gMapNames, 6, "new england");
      xsArraySetString(gMapNames, 7, "pampas");
      xsArraySetString(gMapNames, 8, "patagonia");
      xsArraySetString(gMapNames, 9, "rockies");
      xsArraySetString(gMapNames, 10, "saguenay");
      xsArraySetString(gMapNames, 11, "sonora");
      xsArraySetString(gMapNames, 12, "texas");
      xsArraySetString(gMapNames, 13, "yucatan");
      xsArraySetString(gMapNames, 14, "yukon");
      xsArraySetString(gMapNames, 15, "great plainsLarge");
      xsArraySetString(gMapNames, 16, "carolinalarge");
      xsArraySetString(gMapNames, 17, "saguenayLarge");
      xsArraySetString(gMapNames, 18, "sonoraLarge");
      xsArraySetString(gMapNames, 19, "texasLarge");
      xsArraySetString(gMapNames, 20, "hispaniola");
      xsArraySetString(gMapNames, 21, "andes");
      xsArraySetString(gMapNames, 22, "ozarks");
      xsArraySetString(gMapNames, 23, "araucania");
      xsArraySetString(gMapNames, 24, "california");
      xsArraySetString(gMapNames, 25, "grand canyon");
      xsArraySetString(gMapNames, 26, "northwest territory");
      xsArraySetString(gMapNames, 27, "painted desert");
      xsArraySetString(gMapNames, 28, "unknown");
      xsArraySetString(gMapNames, 29, "Borneo");
      xsArraySetString(gMapNames, 30, "Ceylon");
      xsArraySetString(gMapNames, 31, "Deccan");
      xsArraySetString(gMapNames, 32, "Himalayas");
      xsArraySetString(gMapNames, 33, "Honshu");
      xsArraySetString(gMapNames, 34, "Mongolia");
      xsArraySetString(gMapNames, 35, "silkRoad");
      xsArraySetString(gMapNames, 36, "Yellow riverDry");
      xsArraySetString(gMapNames, 37, "Yellow riverLarge");
      xsArraySetString(gMapNames, 38, "deccanLarge");
      xsArraySetString(gMapNames, 39, "himalayasUpper");
      xsArraySetString(gMapNames, 40, "honshuRegicide");
      xsArraySetString(gMapNames, 41, "indochina");
      xsArraySetString(gMapNames, 42, "plymouth");
      xsArraySetString(gMapNames, 43, "siberia");
      xsArraySetString(gMapNames, 44, "siberiaLarge");
      xsArraySetString(gMapNames, 45, "silkRoadLarge");

   gTargetSettlerCounts = xsArrayCreateInt(cAge5+1, 0, "Target Settler Counts");
      xsArraySetInt(gTargetSettlerCounts, cAge1, 20);
      xsArraySetInt(gTargetSettlerCounts, cAge2, 45);
      xsArraySetInt(gTargetSettlerCounts, cAge3, 60);
      xsArraySetInt(gTargetSettlerCounts, cAge4, 70);
      xsArraySetInt(gTargetSettlerCounts, cAge5, 70);


     
     //BHG: JFR: if we are in deatmatch we dont want to research the consulate tech that takes us to age 5
     if (aiGetGameMode() == cGameModeDeathmatch) {
      gConsulateTechsSize = 32;
     }else{
      gConsulateTechsSize = 33;
     }
     //...BHG: JFR:
     
     gConsulateTechs = xsArrayCreateInt(40, 0, "Consulate Tech IDs");
        xsArraySetInt(gConsulateTechs, 0, cTechypConsulateBritishBrigade);
        xsArraySetInt(gConsulateTechs, 1, cTechypConsulateBritishLifeGuards);
        xsArraySetInt(gConsulateTechs, 2, cTechypConsulateBritishRedcoats);
        xsArraySetInt(gConsulateTechs, 3, cTechypConsulateBritishRogersRangers);
        xsArraySetInt(gConsulateTechs, 4, cTechypConsulateDutchBrigade);
        xsArraySetInt(gConsulateTechs, 5, cTechypConsulateFrenchBrigade);
        xsArraySetInt(gConsulateTechs, 6, cTechypConsulateFrenchCoinCrates);
        xsArraySetInt(gConsulateTechs, 7, cTechypConsulateFrenchFoodCrates);
        xsArraySetInt(gConsulateTechs, 8, cTechypConsulateFrenchHotAirBalloonsPreq);
        xsArraySetInt(gConsulateTechs, 9, cTechypConsulateFrenchWoodCrates);
        xsArraySetInt(gConsulateTechs, 10, cTechypConsulateGermansBrigade);
        xsArraySetInt(gConsulateTechs, 11, cTechypConsulateGermansCoinTrickle);
        xsArraySetInt(gConsulateTechs, 12, cTechypConsulateGermansFoodTrickle);
        xsArraySetInt(gConsulateTechs, 13, cTechypConsulateGermansWoodTrickle);
        xsArraySetInt(gConsulateTechs, 14, cTechypConsulateJapaneseKoujou);        
        xsArraySetInt(gConsulateTechs, 15, cTechypConsulateJapaneseMilitaryRickshaw);
        xsArraySetInt(gConsulateTechs, 16, cTechypConsulateJapaneseMasterTraining);
        xsArraySetInt(gConsulateTechs, 17, cTechypConsulateOttomansBrigade);
        xsArraySetInt(gConsulateTechs, 18, cTechypConsulateOttomansGunpowderSiege);
        xsArraySetInt(gConsulateTechs, 19, cTechypConsulateOttomansInfantrySpeed);
        xsArraySetInt(gConsulateTechs, 20, cTechypConsulateOttomansSettlerCombat);
        xsArraySetInt(gConsulateTechs, 21, cTechypConsulatePortugueseBrigade);
        xsArraySetInt(gConsulateTechs, 22, cTechypConsulatePortugueseExpeditionaryFleet);
        xsArraySetInt(gConsulateTechs, 23, cTechypConsulatePortugueseExplorationFleet);
        xsArraySetInt(gConsulateTechs, 24, cTechypConsulatePortugueseFishingFleet);
        xsArraySetInt(gConsulateTechs, 25, cTechypConsulateRussianBrigade);
        xsArraySetInt(gConsulateTechs, 26, cTechypConsulateRussianFactoryWagon);
        xsArraySetInt(gConsulateTechs, 27, cTechypConsulateRussianFortWagon);
        xsArraySetInt(gConsulateTechs, 28, cTechypConsulateSpanishBrigade);
        xsArraySetInt(gConsulateTechs, 29, cTechypConsulateSpanishEnhancedProfits);
        xsArraySetInt(gConsulateTechs, 30, cTechypConsulateSpanishFasterShipments);
        xsArraySetInt(gConsulateTechs, 31, cTechypConsulateSpanishMercantilism);
        //BHG: JFR: if we are in deatmatch we dont want to research the consulate tech that takes us to age 5...
        if (aiGetGameMode() != cGameModeDeathmatch) {        
         xsArraySetInt(gConsulateTechs, 32, cTechypConsulateJapaneseMeijiRestoration);
        }
        //...BHG: JFR:
        
     gAsianWonders = xsArrayCreateInt(5, 0, "Wonder Age IDs");
     int wonderchoice = aiRandInt(4);
    
     if ((cMyCiv == cCivJapanese) || (cMyCiv == cCivSPCJapanese) || (cMyCiv == cCivSPCJapaneseEnemy)) {
     //Giant Buddha, Golden Pavillion, Shogunate, Torii Gates, Toshogu Shrine 
        if (wonderchoice == 0) {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWJToshoguShrine2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWJGiantBuddha3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWJGoldenPavillion4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWJShogunate5);
        }
        else if (wonderchoice == 1) {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWJToshoguShrine2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWJGoldenPavillion3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWJGiantBuddha4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWJShogunate5);
        }
        else if (wonderchoice == 2) {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWJToshoguShrine2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWJToriiGates3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWJShogunate4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWJGoldenPavillion5);
        }
        else {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWJToshoguShrine2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWJToriiGates3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWJGoldenPavillion4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWJShogunate5);
        }
     }
      if ((cMyCiv == cCivChinese) || (cMyCiv == cCivSPCChinese)) {
      //Confucian Academy, Porcelain Tower, Summer Palace, Temple of Heaven, White Pagoda
        if (wonderchoice == 0) {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWCPorcelainTower2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWCConfucianAcademy3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWCSummerPalace4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWCTempleOfHeaven5);
        }
        else if (wonderchoice == 1) {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWCPorcelainTower2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWCWhitePagoda3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWCConfucianAcademy4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWCSummerPalace5);
        }
        else if (wonderchoice == 2) {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWCPorcelainTower2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWCSummerPalace3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWCTempleOfHeaven4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWCConfucianAcademy5);
        }
        else {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWCPorcelainTower2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWCWhitePagoda3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWCSummerPalace4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWCConfucianAcademy5);
        }
     }
     if ((cMyCiv == cCivIndians) || (cMyCiv == cCivSPCIndians)) {
     //Agra Fort, Charminar Gate, Karni Mata, Taj Mahal, Tower of Victory
        if (wonderchoice == 0) {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWIAgraFort2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWICharminarGate3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWIKarniMata4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWITajMahal5);
        }
        else if (wonderchoice == 1) {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWITowerOfVictory2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWIAgraFort3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWICharminarGate4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWIKarniMata5);
        }
        else if (wonderchoice == 2) {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWICharminarGate2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWIKarniMata3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWIAgraFort4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWITowerOfVictory5);
        }
        else {
          xsArraySetInt(gAsianWonders, 0, cUnitTypeypWICharminarGate2);
          xsArraySetInt(gAsianWonders, 1, cUnitTypeypWIAgraFort3);
          xsArraySetInt(gAsianWonders, 2, cUnitTypeypWITajMahal4);
          xsArraySetInt(gAsianWonders, 3, cUnitTypeypWIKarniMata5);
        }
     }

   gAge2PoliticianList = xsArrayCreateInt(6, 0, "Age 2 Politician List");
      xsArraySetInt(gAge2PoliticianList, 0, cTechPoliticianGovernor);
      xsArraySetInt(gAge2PoliticianList, 1, cTechPoliticianQuartermaster);
      xsArraySetInt(gAge2PoliticianList, 2, cTechPoliticianNaturalist);
      xsArraySetInt(gAge2PoliticianList, 3, cTechPoliticianBishop);
      xsArraySetInt(gAge2PoliticianList, 4, cTechPoliticianPhilosopherPrince);
      xsArraySetInt(gAge2PoliticianList, 5, cTechPoliticianBishopGerman);

   gAge3PoliticianList = xsArrayCreateInt(16, 0, "Age 3 Politician List");
      xsArraySetInt(gAge3PoliticianList, 0, cTechPoliticianSergeantSpanish);
      xsArraySetInt(gAge3PoliticianList, 1, cTechPoliticianMohawk);
      xsArraySetInt(gAge3PoliticianList, 2, cTechPoliticianPirate);
      xsArraySetInt(gAge3PoliticianList, 3, cTechPoliticianAdventurerSpanish);
      xsArraySetInt(gAge3PoliticianList, 4, cTechPoliticianAdmiral);
      xsArraySetInt(gAge3PoliticianList, 5, cTechPoliticianExiledPrince);
      xsArraySetInt(gAge3PoliticianList, 6, cTechPoliticianMarksman);
      xsArraySetInt(gAge3PoliticianList, 7, cTechPoliticianAdmiralOttoman);
      xsArraySetInt(gAge3PoliticianList, 8, cTechPoliticianAdventurerBritish);
      xsArraySetInt(gAge3PoliticianList, 9, cTechPoliticianScout);
      xsArraySetInt(gAge3PoliticianList, 10, cTechPoliticianScoutRussian);
      xsArraySetInt(gAge3PoliticianList, 11, cTechPoliticianAdventurerRussian);
      xsArraySetInt(gAge3PoliticianList, 12, cTechPoliticianSergeantGerman);
      xsArraySetInt(gAge3PoliticianList, 13, cTechPoliticianMarksmanPortuguese);
      xsArraySetInt(gAge3PoliticianList, 14, cTechPoliticianMarksmanOttoman);
      xsArraySetInt(gAge3PoliticianList, 15, cTechPoliticianSergeantDutch);

   gAge4PoliticianList = xsArrayCreateInt(24, 0, "Age 4 Politician List");
      xsArraySetInt(gAge4PoliticianList, 0, cTechPoliticianEngineer);
      xsArraySetInt(gAge4PoliticianList, 1, cTechPoliticianTycoon);
      xsArraySetInt(gAge4PoliticianList, 2, cTechPoliticianMusketeerSpanish);
      xsArraySetInt(gAge4PoliticianList, 3, cTechPoliticianCavalierSpanish);
      xsArraySetInt(gAge4PoliticianList, 4, cTechPoliticianGrandVizier);
      xsArraySetInt(gAge4PoliticianList, 5, cTechPoliticianWarMinisterSpanish);
      xsArraySetInt(gAge4PoliticianList, 6, cTechPoliticianViceroyBritish);
      xsArraySetInt(gAge4PoliticianList, 7, cTechPoliticianMusketeerBritish);
      xsArraySetInt(gAge4PoliticianList, 8, cTechPoliticianCavalierFrench);
      xsArraySetInt(gAge4PoliticianList, 9, cTechPoliticianMusketeerFrench);
      xsArraySetInt(gAge4PoliticianList, 10, cTechPoliticianWarMinisterRussian);
      xsArraySetInt(gAge4PoliticianList, 11, cTechPoliticianCavalierRussian);
      xsArraySetInt(gAge4PoliticianList, 12, cTechPoliticianMusketeerRussian);
      xsArraySetInt(gAge4PoliticianList, 13, cTechPoliticianCavalierGerman);
      xsArraySetInt(gAge4PoliticianList, 14, cTechPoliticianViceroyGerman);
      xsArraySetInt(gAge4PoliticianList, 15, cTechPoliticianEngineerPortuguese);
      xsArraySetInt(gAge4PoliticianList, 16, cTechPoliticianViceroyPortuguese);
      xsArraySetInt(gAge4PoliticianList, 17, cTechPoliticianMusketeerPortuguese);
      xsArraySetInt(gAge4PoliticianList, 18, cTechPoliticianCavalierDutch);
      xsArraySetInt(gAge4PoliticianList, 19, cTechPoliticianCavalierOttoman);
      xsArraySetInt(gAge4PoliticianList, 20, cTechPoliticianMusketeerDutch);
      xsArraySetInt(gAge4PoliticianList, 21, cTechPoliticianViceroyDutch);
      xsArraySetInt(gAge4PoliticianList, 22, cTechPoliticianTycoonAct3);
      xsArraySetInt(gAge4PoliticianList, 23, cTechPoliticianWarMinisterAct3);

   gAge5PoliticianList = xsArrayCreateInt(5, 0, "Age 5 Politician List");
      xsArraySetInt(gAge5PoliticianList, 0, cTechPoliticianPresidente);
      xsArraySetInt(gAge5PoliticianList, 1, cTechPoliticianGeneral);
      xsArraySetInt(gAge5PoliticianList, 2, cTechPoliticianGeneralBritish);
      xsArraySetInt(gAge5PoliticianList, 3, cTechPoliticianGeneralOttoman);
      xsArraySetInt(gAge5PoliticianList, 4, cTechPoliticianGeneralSkirmisher);

   gAge2WonderList = xsArrayCreateInt(15, 0, "Age 2 Wonder List");
      xsArraySetInt(gAge2WonderList, 0, cUnitTypeypWCConfucianAcademy2);
      xsArraySetInt(gAge2WonderList, 1, cUnitTypeypWCPorcelainTower2);
      xsArraySetInt(gAge2WonderList, 2, cUnitTypeypWCSummerPalace2);
      xsArraySetInt(gAge2WonderList, 3, cUnitTypeypWCTempleOfHeaven2);
      xsArraySetInt(gAge2WonderList, 4, cUnitTypeypWCWhitePagoda2);
      xsArraySetInt(gAge2WonderList, 5, cUnitTypeypWIAgraFort2);
      xsArraySetInt(gAge2WonderList, 6, cUnitTypeypWICharminarGate2);
      xsArraySetInt(gAge2WonderList, 7, cUnitTypeypWIKarniMata2);
      xsArraySetInt(gAge2WonderList, 8, cUnitTypeypWITajMahal2);
      xsArraySetInt(gAge2WonderList, 9, cUnitTypeypWITowerOfVictory2);
      xsArraySetInt(gAge2WonderList, 10, cUnitTypeypWJGiantBuddha2);
      xsArraySetInt(gAge2WonderList, 11, cUnitTypeypWJGoldenPavillion2);
      xsArraySetInt(gAge2WonderList, 12, cUnitTypeypWJShogunate2);
      xsArraySetInt(gAge2WonderList, 13, cUnitTypeypWJToriiGates2);
      xsArraySetInt(gAge2WonderList, 14, cUnitTypeypWJToshoguShrine2);

   gAge3WonderList = xsArrayCreateInt(15, 0, "Age 3 Wonder List");
      xsArraySetInt(gAge3WonderList, 0, cUnitTypeypWCConfucianAcademy3);
      xsArraySetInt(gAge3WonderList, 1, cUnitTypeypWCPorcelainTower3);
      xsArraySetInt(gAge3WonderList, 2, cUnitTypeypWCSummerPalace3);
      xsArraySetInt(gAge3WonderList, 3, cUnitTypeypWCTempleOfHeaven3);
      xsArraySetInt(gAge3WonderList, 4, cUnitTypeypWCWhitePagoda3);
      xsArraySetInt(gAge3WonderList, 5, cUnitTypeypWIAgraFort3);
      xsArraySetInt(gAge3WonderList, 6, cUnitTypeypWICharminarGate3);
      xsArraySetInt(gAge3WonderList, 7, cUnitTypeypWIKarniMata3);
      xsArraySetInt(gAge3WonderList, 8, cUnitTypeypWITajMahal3);
      xsArraySetInt(gAge3WonderList, 9, cUnitTypeypWITowerOfVictory3);
      xsArraySetInt(gAge3WonderList, 10, cUnitTypeypWJGiantBuddha3);
      xsArraySetInt(gAge3WonderList, 11, cUnitTypeypWJGoldenPavillion3);
      xsArraySetInt(gAge3WonderList, 12, cUnitTypeypWJShogunate3);
      xsArraySetInt(gAge3WonderList, 13, cUnitTypeypWJToriiGates3);
      xsArraySetInt(gAge3WonderList, 14, cUnitTypeypWJToshoguShrine3);

   gAge4WonderList = xsArrayCreateInt(15, 0, "Age 4 Wonder List");
      xsArraySetInt(gAge4WonderList, 0, cUnitTypeypWCConfucianAcademy4);
      xsArraySetInt(gAge4WonderList, 1, cUnitTypeypWCPorcelainTower4);
      xsArraySetInt(gAge4WonderList, 2, cUnitTypeypWCSummerPalace4);
      xsArraySetInt(gAge4WonderList, 3, cUnitTypeypWCTempleOfHeaven4);
      xsArraySetInt(gAge4WonderList, 4, cUnitTypeypWCWhitePagoda4);
      xsArraySetInt(gAge4WonderList, 5, cUnitTypeypWIAgraFort4);
      xsArraySetInt(gAge4WonderList, 6, cUnitTypeypWICharminarGate4);
      xsArraySetInt(gAge4WonderList, 7, cUnitTypeypWIKarniMata4);
      xsArraySetInt(gAge4WonderList, 8, cUnitTypeypWITajMahal4);
      xsArraySetInt(gAge4WonderList, 9, cUnitTypeypWITowerOfVictory4);
      xsArraySetInt(gAge4WonderList, 10, cUnitTypeypWJGiantBuddha4);
      xsArraySetInt(gAge4WonderList, 11, cUnitTypeypWJGoldenPavillion4);
      xsArraySetInt(gAge4WonderList, 12, cUnitTypeypWJShogunate4);
      xsArraySetInt(gAge4WonderList, 13, cUnitTypeypWJToriiGates4);
      xsArraySetInt(gAge4WonderList, 14, cUnitTypeypWJToshoguShrine4);

   gAge5WonderList = xsArrayCreateInt(15, 0, "Age 5 Wonder List");
      xsArraySetInt(gAge5WonderList, 0, cUnitTypeypWCConfucianAcademy5);
      xsArraySetInt(gAge5WonderList, 1, cUnitTypeypWCPorcelainTower5);
      xsArraySetInt(gAge5WonderList, 2, cUnitTypeypWCSummerPalace5);
      xsArraySetInt(gAge5WonderList, 3, cUnitTypeypWCTempleOfHeaven5);
      xsArraySetInt(gAge5WonderList, 4, cUnitTypeypWCWhitePagoda5);
      xsArraySetInt(gAge5WonderList, 5, cUnitTypeypWIAgraFort5);
      xsArraySetInt(gAge5WonderList, 6, cUnitTypeypWICharminarGate5);
      xsArraySetInt(gAge5WonderList, 7, cUnitTypeypWIKarniMata5);
      xsArraySetInt(gAge5WonderList, 8, cUnitTypeypWITajMahal5);
      xsArraySetInt(gAge5WonderList, 9, cUnitTypeypWITowerOfVictory5);
      xsArraySetInt(gAge5WonderList, 10, cUnitTypeypWJGiantBuddha5);
      xsArraySetInt(gAge5WonderList, 11, cUnitTypeypWJGoldenPavillion5);
      xsArraySetInt(gAge5WonderList, 12, cUnitTypeypWJShogunate5);
      xsArraySetInt(gAge5WonderList, 13, cUnitTypeypWJToriiGates5);
      xsArraySetInt(gAge5WonderList, 14, cUnitTypeypWJToshoguShrine5);

   gAge2WonderTechList = xsArrayCreateInt(15, 0, "Age 2 WonderTech List");
      xsArraySetInt(gAge2WonderTechList, 0, cTechYPWonderChineseConfucianAcademy2);
      xsArraySetInt(gAge2WonderTechList, 1, cTechYPWonderChinesePorcelainTower2);
      xsArraySetInt(gAge2WonderTechList, 2, cTechYPWonderChineseSummerPalace2);
      xsArraySetInt(gAge2WonderTechList, 3, cTechYPWonderChineseTempleOfHeaven2);
      xsArraySetInt(gAge2WonderTechList, 4, cTechYPWonderChineseWhitePagoda2);
      xsArraySetInt(gAge2WonderTechList, 5, cTechYPWonderIndianAgra2);
      xsArraySetInt(gAge2WonderTechList, 6, cTechYPWonderIndianCharminar2);
      xsArraySetInt(gAge2WonderTechList, 7, cTechYPWonderIndianKarniMata2);
      xsArraySetInt(gAge2WonderTechList, 8, cTechYPWonderIndianTajMahal2);
      xsArraySetInt(gAge2WonderTechList, 9, cTechYPWonderIndianTowerOfVictory2);
      xsArraySetInt(gAge2WonderTechList, 10, cTechYPWonderJapaneseGiantBuddha2);
      xsArraySetInt(gAge2WonderTechList, 11, cTechYPWonderJapaneseGoldenPavillion2);
      xsArraySetInt(gAge2WonderTechList, 12, cTechYPWonderJapaneseShogunate2);
      xsArraySetInt(gAge2WonderTechList, 13, cTechYPWonderJapaneseToriiGates2);
      xsArraySetInt(gAge2WonderTechList, 14, cTechYPWonderJapaneseToshoguShrine2);

   gAge3WonderTechList = xsArrayCreateInt(15, 0, "Age 3 WonderTech List");
      xsArraySetInt(gAge3WonderTechList, 0, cTechYPWonderChineseConfucianAcademy3);
      xsArraySetInt(gAge3WonderTechList, 1, cTechYPWonderChinesePorcelainTower3);
      xsArraySetInt(gAge3WonderTechList, 2, cTechYPWonderChineseSummerPalace3);
      xsArraySetInt(gAge3WonderTechList, 3, cTechYPWonderChineseTempleOfHeaven3);
      xsArraySetInt(gAge3WonderTechList, 4, cTechYPWonderChineseWhitePagoda3);
      xsArraySetInt(gAge3WonderTechList, 5, cTechYPWonderIndianAgra3);
      xsArraySetInt(gAge3WonderTechList, 6, cTechYPWonderIndianCharminar3);
      xsArraySetInt(gAge3WonderTechList, 7, cTechYPWonderIndianKarniMata3);
      xsArraySetInt(gAge3WonderTechList, 8, cTechYPWonderIndianTajMahal3);
      xsArraySetInt(gAge3WonderTechList, 9, cTechYPWonderIndianTowerOfVictory3);
      xsArraySetInt(gAge3WonderTechList, 10, cTechYPWonderJapaneseGiantBuddha3);
      xsArraySetInt(gAge3WonderTechList, 11, cTechYPWonderJapaneseGoldenPavillion3);
      xsArraySetInt(gAge3WonderTechList, 12, cTechYPWonderJapaneseShogunate3);
      xsArraySetInt(gAge3WonderTechList, 13, cTechYPWonderJapaneseToriiGates3);
      xsArraySetInt(gAge3WonderTechList, 14, cTechYPWonderJapaneseToshoguShrine3);

   gAge4WonderTechList = xsArrayCreateInt(15, 0, "Age 4 WonderTech List");
      xsArraySetInt(gAge4WonderTechList, 0, cTechYPWonderChineseConfucianAcademy4);
      xsArraySetInt(gAge4WonderTechList, 1, cTechYPWonderChinesePorcelainTower4);
      xsArraySetInt(gAge4WonderTechList, 2, cTechYPWonderChineseSummerPalace4);
      xsArraySetInt(gAge4WonderTechList, 3, cTechYPWonderChineseTempleOfHeaven4);
      xsArraySetInt(gAge4WonderTechList, 4, cTechYPWonderChineseWhitePagoda4);
      xsArraySetInt(gAge4WonderTechList, 5, cTechYPWonderIndianAgra4);
      xsArraySetInt(gAge4WonderTechList, 6, cTechYPWonderIndianCharminar4);
      xsArraySetInt(gAge4WonderTechList, 7, cTechYPWonderIndianKarniMata4);
      xsArraySetInt(gAge4WonderTechList, 8, cTechYPWonderIndianTajMahal4);
      xsArraySetInt(gAge4WonderTechList, 9, cTechYPWonderIndianTowerOfVictory4);
      xsArraySetInt(gAge4WonderTechList, 10, cTechYPWonderJapaneseGiantBuddha4);
      xsArraySetInt(gAge4WonderTechList, 11, cTechYPWonderJapaneseGoldenPavillion4);
      xsArraySetInt(gAge4WonderTechList, 12, cTechYPWonderJapaneseShogunate4);
      xsArraySetInt(gAge4WonderTechList, 13, cTechYPWonderJapaneseToriiGates4);
      xsArraySetInt(gAge4WonderTechList, 14, cTechYPWonderJapaneseToshoguShrine4);

   gAge5WonderTechList = xsArrayCreateInt(15, 0, "Age 5 WonderTech List");
      xsArraySetInt(gAge5WonderTechList, 0, cTechYPWonderChineseConfucianAcademy5);
      xsArraySetInt(gAge5WonderTechList, 1, cTechYPWonderChinesePorcelainTower5);
      xsArraySetInt(gAge5WonderTechList, 2, cTechYPWonderChineseSummerPalace5);
      xsArraySetInt(gAge5WonderTechList, 3, cTechYPWonderChineseTempleOfHeaven5);
      xsArraySetInt(gAge5WonderTechList, 4, cTechYPWonderChineseWhitePagoda5);
      xsArraySetInt(gAge5WonderTechList, 5, cTechYPWonderIndianAgra5);
      xsArraySetInt(gAge5WonderTechList, 6, cTechYPWonderIndianCharminar5);
      xsArraySetInt(gAge5WonderTechList, 7, cTechYPWonderIndianKarniMata5);
      xsArraySetInt(gAge5WonderTechList, 8, cTechYPWonderIndianTajMahal5);
      xsArraySetInt(gAge5WonderTechList, 9, cTechYPWonderIndianTowerOfVictory5);
      xsArraySetInt(gAge5WonderTechList, 10, cTechYPWonderJapaneseGiantBuddha5);
      xsArraySetInt(gAge5WonderTechList, 11, cTechYPWonderJapaneseGoldenPavillion5);
      xsArraySetInt(gAge5WonderTechList, 12, cTechYPWonderJapaneseShogunate5);
      xsArraySetInt(gAge5WonderTechList, 13, cTechYPWonderJapaneseToriiGates5);
      xsArraySetInt(gAge5WonderTechList, 14, cTechYPWonderJapaneseToshoguShrine5);

   gRevolutionaryCards = xsArrayCreateString(4, "", "Revolution Deck");
      xsArraySetString(gRevolutionaryCards, 0, "Gatling Guns");
      xsArraySetString(gRevolutionaryCards, 1, "Colonial Militia");
      xsArraySetString(gRevolutionaryCards, 2, "Ironclads");
      xsArraySetString(gRevolutionaryCards, 3, "Fort Wagon");

   gAgeUpPoliticians = xsArrayCreateInt(6, 0, "Ageup Politicians");
   gPoliticianScores = xsArrayCreateInt(6, 0, "European Politicians");
   gNatCouncilScores = xsArrayCreateInt(6, 0, "Native Council");
   gAsianWonderScores = xsArrayCreateInt(6, 0, "Asian Wonders");
}


//==============================================================================
// echoMessage()
// Used to provide on-screen debug information.
//==============================================================================
void echoMessage(string message="DEFAULT")
{
   int player = -1;
   
   for (player = 0; <cNumberPlayers)
   {
      aiChat(player, message);
   }
}


//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
// Utility functions
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
void sendChatToAllies(string text="")
{
   int player = -1;
   
   for (player = 0; <cNumberPlayers)
   {
      if ( (player != cMyID) && (kbIsPlayerAlly(player) == true))
         aiChat(player, text);
   }
}

bool civIsNative(void)
{
   if ((cMyCiv == cCivXPAztec) || (cMyCiv == cCivXPIroquois) || (cMyCiv == cCivXPSioux))
      return(true);
   
   return(false);
}

bool civIsAsian(void)
{
   if ((cMyCiv == cCivJapanese) || (cMyCiv == cCivChinese) || (cMyCiv == cCivIndians) || (cMyCiv == cCivSPCIndians) || (cMyCiv == cCivSPCChinese) || (cMyCiv == cCivSPCJapanese) || (cMyCiv == cCivSPCJapaneseEnemy))
      return(true);
   
   return(false);
}

bool civIsEuropean(void)
{
   if ((cMyCiv == cCivBritish) || 
       (cMyCiv == cCivFrench) || 
       (cMyCiv == cCivDutch) || 
       (cMyCiv == cCivSpanish) || 
       (cMyCiv == cCivGermans) || 
       (cMyCiv == cCivRussians) || 
       (cMyCiv == cCivPortuguese) ||
       (cMyCiv == cCivOttomans))
      return(true);
   
   return(false);
}

int getSettlerShortfall()
{  // How many more Settlers do we currently want?
   int retVal = 0;
   float villTarget = xsArrayGetInt(gTargetSettlerCounts, kbGetAge());  // How many we want to have this age
   float villCount = kbUnitCount(cMyID, gEconUnit, cUnitStateABQ);   // How many we have

   retVal = villTarget - villCount;

   return(retVal);
}


bool agingUp()
{
   bool retVal = false;
   if (aiPlanGetState(gAgeUpResearchPlan) == cPlanStateResearch)
      retVal = true;

   return(retVal);
}

bool agingUpTo(int nextAge = -1)
{
   bool retVal = false;
   if ((kbGetAge() + 1 == nextAge) && ((aiPlanGetState(gAgeUpResearchPlan) == cPlanStateResearch) || (aiPlanGetState(gAgeUpResearchPlan) == cPlanStateBuild)))
      retVal = true;
   return(retVal);
}

bool agingUpToOrAbove(int Age = -1)
{
   bool retVal = false;
   if ((kbGetAge() == Age - 1) && ((aiPlanGetState(gAgeUpResearchPlan) == cPlanStateResearch) || (aiPlanGetState(gAgeUpResearchPlan) == cPlanStateBuild)))
      retVal = true;
   if (kbGetAge() >= Age)
      retVal = true;

   return(retVal);
}

int getWonderToBuild(int the_age=-1)
{
  if ((cMyCiv == cCivJapanese) || (cMyCiv == cCivSPCJapanese) || (cMyCiv == cCivSPCJapanese)) {
    //Giant Buddha, Golden Pavillion, Shogunate, Torii Gates, Toshogu Shrine
    //age2
    if (the_age == cAge2) {
      return (cUnitTypeypWJGiantBuddha2);
    }
    //age3
    else if (the_age == cAge3) {
      return (cUnitTypeypWJToriiGates3);
    }
    //age4
    else if (the_age == cAge4) {
      return (cUnitTypeypWJShogunate4);
    }
    //age5
    else if (the_age == cAge5) {
      return (cUnitTypeypWJToshoguShrine5);
    }
  }
  if ((cMyCiv == cCivChinese) || (cMyCiv == cCivSPCChinese)) {
    //age2
    if (the_age == cAge2) {
      return (cUnitTypeypWCPorcelainTower2);
    }
    //age3
    else if (the_age == cAge3) {
      return (cUnitTypeypWCSummerPalace3);
    }
    //age4
    else if (the_age == cAge4) {
      return (cUnitTypeypWCTempleOfHeaven4);
    }
    //age5
    else if (the_age == cAge5) {
      return (cUnitTypeypWCWhitePagoda5);
    }
  }
  if ((cMyCiv == cCivIndians) || (cMyCiv == cCivSPCIndians)) {
    //age2
    if (the_age == cAge2) {
      return (cUnitTypeypWICharminarGate2);
    }
    //age3
    else if (the_age == cAge3) {
      return (cUnitTypeypWIKarniMata3);
    }
    //age4
    else if (the_age == cAge4) {
      return (cUnitTypeypWITajMahal4);
    }
    //age5
    else if (the_age == cAge5) {
      return (cUnitTypeypWIAgraFort5);
    }
  }
  
  return (-1);
}

int getPreferredWonderToBuild(int the_age=-1)
{
  if (the_age == cAge2) {
    return(xsArrayGetInt(gAsianWonders, 0));
  }
  //age3
  else if (the_age == cAge3) {
    return(xsArrayGetInt(gAsianWonders, 1));
  }
  //age4
  else if (the_age == cAge4) {
    return(xsArrayGetInt(gAsianWonders, 2));
  }
  //age5
  else if (the_age == cAge5) {
    if (aiGetGameMode() == cGameModeDeathmatch) {
      return(-1); //BHG:CGN: don't try to get to age 5 in a deathmatch game
    }
    return(xsArrayGetInt(gAsianWonders, 3));
  }
  return (-1);
}


//==============================================================================
/* createOpportunity(type, targetType, targetID, targetPlayerID, source)

   A wrapper function for aiCreateOpportunity(), to permit centralized tracking
   of the most recently created ally-generated and trigger-generated 
   opportunities.  This info is needed so that a cancel command can
   efficiently deactivate the previous (and possibly current) opportunity before
   creating the new one.
*/
//==============================================================================
int createOpportunity(int type = -1, int targetType = -1, int targetID = -1, int targetPlayerID = -1, int source = -1)
{
   int oppID = aiCreateOpportunity(type, targetType, targetID, targetPlayerID, source);
   if (source == cOpportunitySourceAllyRequest)
      gMostRecentAllyOpportunityID = oppID; // Remember which ally opp we're doing
   else if (source == cOpportunitySourceTrigger)
      gMostRecentTriggerOpportunityID = oppID;
   
   return(oppID);
}



//==============================================================================
/* sendStatement(player, commPromptID, vector)

  Sends a chat statement, but first checks the control variables and updates the
  "ok to chat" state.   This is a gateway for routine "ambience" personality chats.
  Another function will be written as a gateway for strategic communications, i.e.
  requests for defence, tribute, joint operations, etc.  That one will be controlled by 
  the cvOkToChat variable.
  
  If vector is not cInvalidVector, it will be added as a flare
*/
//==============================================================================
bool sendStatement(int playerIDorRelation = -1, int commPromptID = -1, vector vec = cInvalidVector)
{
   aiEcho("<<<<<SEND STATEMENT to player "+playerIDorRelation+", commPromptID = "+commPromptID+", vector "+vec+">>>>>");
   // Routine "ambience" chats are not allowed
	if (cvOkToTaunt == false)
   {
      // Failed, no chat sent
		// Make sure the C++ side knows about it
		aiCommsAllowChat(false);
      return(false);
   }
   
   // If we got this far, it's OK.
	aiCommsAllowChat(true);

   // It's a player ID, not a relation.
	if (playerIDorRelation < 100)
   {
      int playerID = playerIDorRelation;
      if (vec == cInvalidVector)
         aiCommsSendStatement(playerID, commPromptID);
      else
         aiCommsSendStatementWithVector(playerID, commPromptID, vec);
   }
   else  // Then it's a player relation
   {
      int player = -1;
      for (player = 1; < cNumberPlayers)
      {
         bool send = false;
         switch(playerIDorRelation)
         {
            case cPlayerRelationAny:
            {
               send = true;
               break;
            }
            case cPlayerRelationSelf:
            {
               if (player == cMyID)
                  send = true;
               break;
            }
            case cPlayerRelationAlly:
            {
               send = kbIsPlayerAlly(player);

					// Don't talk to myself, even though I am my ally.
               if (player == cMyID)
                  send = false;     
               break;
            }
            case cPlayerRelationEnemy:
            {
               send = kbIsPlayerEnemy(player);
               break;
            }
            case cPlayerRelationEnemyNotGaia:
            {
               send = kbIsPlayerEnemy(player);
               break;
            }
         }
         if (send == true)
         {
            aiEcho("<<<<<Sending chat prompt "+commPromptID+" to player "+player+" with vector "+vec+">>>>>");
            if (vec == cInvalidVector)
               aiCommsSendStatement(player, commPromptID);
            else
               aiCommsSendStatementWithVector(player, commPromptID, vec);
         }
      }
   }
   return(true);
}



//==============================================================================
// Plan Chat functions
//
//==============================================================================


// Set the attack plan to trigger a message and optional flare when the plan reaches the specified state.
// See the event handler below.
bool setPlanChat(int plan=-1, int state=-1, int prompt=-1, int player=-1, vector flare=cInvalidVector)
{
 
   // State -1 could be valid for action on plan termination
	if ( (plan < 0) || (prompt < 0) || (player < 0) )
      return(false);    

	aiPlanSetEventHandler(plan, cPlanEventStateChange, "planStateEventHandler");

   aiPlanAddUserVariableInt(plan, 0, "Key State", 1);
   aiPlanAddUserVariableInt(plan, 1, "Prompt ID", 1);
   aiPlanAddUserVariableInt(plan, 2, "Send To", 1);
   aiPlanAddUserVariableVector(plan, 3, "Flare Vector", 1);
   
   aiPlanSetUserVariableInt(plan, 0, 0, state);
   aiPlanSetUserVariableInt(plan, 1, 0, prompt);
   aiPlanSetUserVariableInt(plan, 2, 0, player);
   aiPlanSetUserVariableVector(plan, 3, 0, flare);
   
   return(true);
}


void  planStateEventHandler(int planID=-1)
{
   aiEcho("    Plan "+aiPlanGetName(planID)+" is now in state "+aiPlanGetState(planID));

   // Plan planID has changed states.  Get its state, compare to target, issue chat if it matches
   int state = aiPlanGetUserVariableInt(planID, 0, 0);
   int prompt = aiPlanGetUserVariableInt(planID, 1, 0);
   int player = aiPlanGetUserVariableInt(planID, 2, 0);
   vector flare = aiPlanGetUserVariableVector(planID, 3, 0);
   
   if ( aiPlanGetState(planID) == state )
   {
      // We have a winner, send the chat statement
      sendStatement(player, prompt, flare);
      //clearPlanChat(index);
   }
}


void tcPlacedEventHandler(int planID=-1)
{
   // Check the state of the TC build plan.
   // Fire an ally chat if the state is "build"
   if (aiPlanGetState(planID) == cPlanStateBuild)
   {
      vector loc = kbBuildingPlacementGetResultPosition( aiPlanGetVariableInt(planID,cBuildPlanBuildingPlacementID, 0) ); 
      sendStatement(cPlayerRelationAlly, cAICommPromptToAllyIWillBuildTC, loc);
      aiEcho("Sending TC placement chat at location "+loc);
   }
}

//==============================================================================
// distance
//
// Will return a float with the 3D distance between two vectors                     
//==============================================================================
float distance(vector v1=cInvalidVector, vector v2=cInvalidVector)
{
   vector delta = v1 - v2;
   return (xsVectorLength(delta));
}

//==============================================================================
// getUnit
//
// Will return a random unit matching the parameters
//==============================================================================
int getUnit(int unitTypeID=-1, int playerRelationOrID=cMyID, int state=cUnitStateAlive)
{
   int count=-1;
   static int unitQueryID=-1;

   //If we don't have the query yet, create one.
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("miscGetUnitQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
   }

	//Define a query to get all matching units
	if (unitQueryID != -1)
	{
      if (playerRelationOrID > 1000)      // Too big for player ID number
      {
      	kbUnitQuerySetPlayerID(unitQueryID, -1);  // Clear the player ID, so playerRelation takes precedence.
         kbUnitQuerySetPlayerRelation(unitQueryID, playerRelationOrID);
      }
      else
      {
         kbUnitQuerySetPlayerRelation(unitQueryID, -1);
      	kbUnitQuerySetPlayerID(unitQueryID, playerRelationOrID);
      }
      kbUnitQuerySetUnitType(unitQueryID, unitTypeID);
      kbUnitQuerySetState(unitQueryID, state);
	}
	else
   	return(-1);

   kbUnitQueryResetResults(unitQueryID);
	int numberFound=kbUnitQueryExecute(unitQueryID);
   if (numberFound > 0)
      return(kbUnitQueryGetResult(unitQueryID, aiRandInt(numberFound)));   // Return a random dude(tte)
   return(-1);
}

int getUnitN(int unitTypeID=-1,int N=0, int playerRelationOrID=cMyID, int state=cUnitStateAlive)
{
   int count=-1;
   static int unitQueryID=-1;

   //If we don't have the query yet, create one.
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("miscGetUnitQueryN");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
   }

	//Define a query to get all matching units
	if (unitQueryID != -1)
	{
      if (playerRelationOrID > 1000)      // Too big for player ID number
      {
      	kbUnitQuerySetPlayerID(unitQueryID, -1);  // Clear the player ID, so playerRelation takes precedence.
         kbUnitQuerySetPlayerRelation(unitQueryID, playerRelationOrID);
      }
      else
      {
         kbUnitQuerySetPlayerRelation(unitQueryID, -1);
      	kbUnitQuerySetPlayerID(unitQueryID, playerRelationOrID);
      }
      kbUnitQuerySetUnitType(unitQueryID, unitTypeID);
      kbUnitQuerySetState(unitQueryID, state);
	}
	else
   	return(-1);

   kbUnitQueryResetResults(unitQueryID);
	int numberFound=kbUnitQueryExecute(unitQueryID);
   if (numberFound > 0)
      return(kbUnitQueryGetResult(unitQueryID, N));   // Return a random dude(tte)
   return(-1);
}

//==============================================================================
// createSimpleAttackGoal
//==============================================================================
int createSimpleAttackGoal(string name="BUG", int attackPlayerID=-1,
int unitPickerID=-1, int repeat=-1, int minAge=-1, int maxAge=-1,
int baseID=-1, bool allowRetreat=false)
{
	aiEcho("CreateSimpleAttackGoal:  Name="+name+", AttackPlayerID="+attackPlayerID+".");
	aiEcho("  UnitPickerID="+unitPickerID+", Repeat="+repeat+", baseID="+baseID+".");
	aiEcho("  MinAge="+minAge+", maxAge="+maxAge+", allowRetreat="+allowRetreat+".");

	//Create the goal.
	int goalID=aiPlanCreate(name, cPlanGoal);
	if (goalID < 0)
		return(-1);

	//Priority.
	aiPlanSetDesiredPriority(goalID, 90);
	//Attack player ID.
	if (attackPlayerID >= 0)
	  aiPlanSetVariableInt(goalID, cGoalPlanAttackPlayerID, 0, attackPlayerID);
	else
	  aiPlanSetVariableBool(goalID, cGoalPlanAutoUpdateAttackPlayerID, 0, true);
	//Base.
	if (baseID >= 0)
	  aiPlanSetBaseID(goalID, baseID);
	else
	  aiPlanSetVariableBool(goalID, cGoalPlanAutoUpdateBase, 0, true);
	//Attack.
	aiPlanSetAttack(goalID, true);
	aiPlanSetVariableInt(goalID, cGoalPlanGoalType, 0, cGoalPlanGoalTypeAttack);
	aiPlanSetVariableInt(goalID, cGoalPlanAttackStartFrequency, 0, 5);
	
	//Military.
	aiPlanSetMilitary(goalID, true);
	aiPlanSetEscrowID(goalID, cMilitaryEscrowID);
	//Ages.
	aiPlanSetVariableInt(goalID, cGoalPlanMinAge, 0, minAge);
	aiPlanSetVariableInt(goalID, cGoalPlanMaxAge, 0, maxAge);
	//Repeat.
	aiPlanSetVariableInt(goalID, cGoalPlanRepeat, 0, repeat);
	//Unit Picker.
	aiPlanSetVariableInt(goalID, cGoalPlanUnitPickerID, 0, unitPickerID);
	//Retreat.
	aiPlanSetVariableBool(goalID, cGoalPlanAllowRetreat, 0, allowRetreat);
        //Upgrade unit prefs. 
        aiPlanSetNumberVariableValues(goalID, cGoalPlanTargetType, 2, true);
	aiPlanSetVariableInt(goalID, cGoalPlanTargetType, 0, cUnitTypeLogicalTypeLandMilitary);
	aiPlanSetVariableInt(goalID, cGoalPlanTargetType, 1, cUnitTypeValidIdleVillager);
        //Upgrade Building prefs.
        aiPlanSetNumberVariableValues(goalID, cGoalPlanUpgradeBuilding, 3, true);
        aiPlanSetVariableInt(goalID, cGoalPlanUpgradeBuilding, 0, cUnitTypeTownCenter);
        aiPlanSetVariableInt(goalID, cGoalPlanUpgradeBuilding, 1, gFarmUnit);       
        if (cMyCiv == cCivDutch)
           aiPlanSetVariableInt(goalID, cGoalPlanUpgradeBuilding, 2, cUnitTypeBank);
        else if (cMyCiv == cCivJapanese)
           aiPlanSetVariableInt(goalID, cGoalPlanUpgradeBuilding, 2, cUnitTypeypShrineJapanese);
        else
           aiPlanSetVariableInt(goalID, cGoalPlanUpgradeBuilding, 2, gPlantationUnit);
        
	//Handle maps where the enemy player is usually on a diff island.
	if ( (cRandomMapName == "amazonia") || (cRandomMapName == "caribbean") || (cRandomMapName == "Ceylon") )
	{
	   aiPlanSetVariableBool(goalID, cGoalPlanSetAreaGroups, 0, true);
	   aiPlanSetVariableInt(goalID, cGoalPlanAttackRoutePatternType, 0, cAttackPlanAttackRoutePatternRandom);
	}
        aiPlanSetUnitStance(goalID, cUnitStanceAggressive);
	//Done.
	return(goalID);
}


//==============================================================================
// getUnitByLocation
//
// Will return a random unit matching the parameters
//==============================================================================
int getUnitByLocation(int unitTypeID=-1, int playerRelationOrID=cMyID, int state=cUnitStateAlive, vector location = cInvalidVector, float radius = 20.0, int pos = 0)
{
   int count=-1;
   static int unitQueryID=-1;

   //If we don't have the query yet, create one.
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("miscGetUnitLocationQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
   }

	//Define a query to get all matching units
	if (unitQueryID != -1)
	{
      if (playerRelationOrID > 1000)      // Too big for player ID number
      {
      	kbUnitQuerySetPlayerID(unitQueryID, -1);
         kbUnitQuerySetPlayerRelation(unitQueryID, playerRelationOrID);
      }
      else
      {
         kbUnitQuerySetPlayerRelation(unitQueryID, -1);
      	kbUnitQuerySetPlayerID(unitQueryID, playerRelationOrID);
      }
      kbUnitQuerySetUnitType(unitQueryID, unitTypeID);
      kbUnitQuerySetState(unitQueryID, state);
      kbUnitQuerySetPosition(unitQueryID, location);
      kbUnitQuerySetMaximumDistance(unitQueryID, radius);
	}
	else
   	return(-1);

   kbUnitQueryResetResults(unitQueryID);
	int numberFound=kbUnitQueryExecute(unitQueryID);
   if (numberFound > 0)
      return(kbUnitQueryGetResult(unitQueryID, pos));   
   return(-1);
}

int getWorkItem(int playerRelationOrID=-1, int Type=-1, vector location = cInvalidVector, float radius = 20.0, int worker=5, int state=cUnitStateAlive)
{
   static int unitQueryID=-1;

   //If we don't have the query yet, create one.
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("miscGetUnitLocationAscendQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
   }

	//Define a query to get all matching units
	if (unitQueryID != -1)
	{
      if (playerRelationOrID > 1000)      // Too big for player ID number
      {
      	kbUnitQuerySetPlayerID(unitQueryID, -1);
         kbUnitQuerySetPlayerRelation(unitQueryID, playerRelationOrID);
      }
      else
      {
         kbUnitQuerySetPlayerRelation(unitQueryID, -1);
      	kbUnitQuerySetPlayerID(unitQueryID, playerRelationOrID);
      }
      kbUnitQuerySetUnitType(unitQueryID, Type);
      kbUnitQuerySetState(unitQueryID, state);
      kbUnitQuerySetPosition(unitQueryID, location);
      kbUnitQuerySetMaximumDistance(unitQueryID, radius);
	  kbUnitQuerySetAscendingSort(unitQueryID,true);
	}
	else
   	return(-1);

   kbUnitQueryResetResults(unitQueryID);
	int numberFound=kbUnitQueryExecute(unitQueryID);
   if (numberFound > 0){
	int i=0;
	for(i=0;<numberFound){
		int tmp=kbUnitQueryGetResult(unitQueryID, i);
		if (kbUnitGetNumberWorkers(tmp)<worker && kbGetUnitBaseTypeID(tmp)>0)
			return(tmp);   
	  }
	 }
   return(-1);
}

int getClosestUnitByLocation(int unitTypeID=-1, int playerRelationOrID=cMyID, int state=cUnitStateAlive, vector location = cInvalidVector)
{
   int count=-1;
   static int unitQueryID=-1;

   //If we don't have the query yet, create one.
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("miscGetUnitLocationQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
   }

	//Define a query to get all matching units
	if (unitQueryID != -1)
	{
      if (playerRelationOrID > 1000)      // Too big for player ID number
      {
      	kbUnitQuerySetPlayerID(unitQueryID, -1);
         kbUnitQuerySetPlayerRelation(unitQueryID, playerRelationOrID);
      }
      else
      {
         kbUnitQuerySetPlayerRelation(unitQueryID, -1);
      	kbUnitQuerySetPlayerID(unitQueryID, playerRelationOrID);
      }
      kbUnitQuerySetUnitType(unitQueryID, unitTypeID);
      kbUnitQuerySetState(unitQueryID, state);
      kbUnitQuerySetPosition(unitQueryID, location);
	  kbUnitQuerySetAscendingSort(unitQueryID,true);
      //kbUnitQuerySetMaximumDistance(unitQueryID, radius);
	}
	else
   	return(-1);

    kbUnitQueryResetResults(unitQueryID);
	int numberFound=kbUnitQueryExecute(unitQueryID);
	if (numberFound>0)
		return (kbUnitQueryGetResult(unitQueryID, 0));
	
	return (-1);
}



vector getFleeVec(vector location = cInvalidVector, float radius=20.0)
{
   int count=-1;
   static int unitQueryID=-1;

   //If we don't have the query yet, create one.
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("miscGetUnitLocationQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
   }

	kbUnitQuerySetPlayerID(unitQueryID, -1);
	kbUnitQuerySetPlayerRelation(unitQueryID, cPlayerRelationEnemyNotGaia);
    kbUnitQuerySetUnitType(unitQueryID, cUnitTypeLogicalTypeLandMilitary);
    kbUnitQuerySetState(unitQueryID, cUnitStateAlive);
    kbUnitQuerySetPosition(unitQueryID, location);
	kbUnitQuerySetAscendingSort(unitQueryID,true);
    kbUnitQuerySetMaximumDistance(unitQueryID, radius);

    kbUnitQueryResetResults(unitQueryID);
	int numberFound=kbUnitQueryExecute(unitQueryID);
	int i=0;
	if (numberFound==0) {
		//echoMessage("Flee? Really?");
		return (aiRandLocation());
	}
	vector sum=cOriginVector;
	for(i=0; <numberFound){
		int eID=(kbUnitQueryGetResult(unitQueryID, 0));
		sum=sum+(kbUnitGetPosition(eID)-location);
	}
	vector vec=location-xsVectorNormalize(sum/numberFound)*20;
	//echoMessage("FleeVec:"+vec);
	return (vec);
}


//==============================================================================
// getUnitCountByLocation
//
// Returns the number of matching units in the point/radius specified
//==============================================================================
int getUnitCountByLocation(int unitTypeID=-1, int playerRelationOrID=cMyID, int state=cUnitStateAlive, vector location = cInvalidVector, float radius = 20.0)
{
   int count=-1;
   static int unitQueryID=-1;
   
   //If we don't have the query yet, create one.
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("miscGetUnitLocationQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
   }

	//Define a query to get all matching units
	if (unitQueryID != -1)
	{
      if (playerRelationOrID > 1000)      // Too big for player ID number
      {
      	kbUnitQuerySetPlayerID(unitQueryID, -1);
         kbUnitQuerySetPlayerRelation(unitQueryID, playerRelationOrID);
      }
      else
      {
         kbUnitQuerySetPlayerRelation(unitQueryID, -1);
      	kbUnitQuerySetPlayerID(unitQueryID, playerRelationOrID);
      }
      kbUnitQuerySetUnitType(unitQueryID, unitTypeID);
      kbUnitQuerySetState(unitQueryID, state);
      kbUnitQuerySetPosition(unitQueryID, location);
      kbUnitQuerySetMaximumDistance(unitQueryID, radius);
	}
	else
   	return(-1);

   kbUnitQueryResetResults(unitQueryID);
	return(kbUnitQueryExecute(unitQueryID));
}


//==============================================================================
// getPlayerArmyHPs
//
// Queries all land military units.  
// Totals hitpoints (ideal if considerHealth false, otherwise actual.)
// Returns total
//==============================================================================
float getPlayerArmyHPs(int playerID = -1, bool considerHealth = false)
{
   int queryID = -1;    // Will recreate each time, as changing player trashes existing query settings.
   
   if (playerID <= 0) 
      return(-1.0);
   
   queryID = kbUnitQueryCreate("getStrongestEnemyArmyHPs");
   kbUnitQuerySetIgnoreKnockedOutUnits(queryID, true);
   kbUnitQuerySetPlayerID(queryID, playerID, true);
   kbUnitQuerySetUnitType(queryID, cUnitTypeLogicalTypeLandMilitary);
   kbUnitQuerySetState(queryID, cUnitStateAlive);
   kbUnitQueryResetResults(queryID);
   kbUnitQueryExecute(queryID);
   
   return(kbUnitQueryGetUnitHitpoints(queryID, considerHealth));
}


//==============================================================================
/* sigmoid(float base, float adjustment, float floor, float ceiling)

   Used to adjust a number up or down in a sigmoid fashion, so that it
   grows very slowly at values near the bottom of the range, quickly near
   the center, and slowly near the upper limit.  

   Used with the many 0..1 range variables, this lets us adjust them up
   or down by arbitrary "percentages" while retaining the 0..1 boundaries.  
   That is, a 50% "boost" (1.5 adjustment) to a .9 score gives .933, while a


   Base is the number to be adjusted.
   Adjustment of 1.0 means 100%, i.e. stay where you are.
   Adjustment of 2.0 means to move it up by the LESSER movement of:
      Doubling the (base-floor) amount, or
      Cutting the (ceiling-base) in half (mul by 1/2.0).

   With a default floor of 0 and ceiling of 1, it gives these results:
      sigmoid(.1, 2.0) = .2
      sigmoid(.333, 2.0) = .667, upper and lower adjustments equal
      sigmoid(.8, 2.0) = .9, adjusted up 50% (1/2.0) of the headroom.
      sigmoid(.1, 5.0) = .50 (5x base, rather than moving up to .82)
      sigmoid(.333, 5.0) = .866, (leaving 1/5 of the .667 headroom)
      sigmoid(.8, 5.0) = .96 (leaving 1/5 of the .20 headroom)
      
   Adjustments of less than 1.0 (neutral) do the opposite...they move the 
   value DOWN by the lesser movement of:
      Increasing headroom by a factor of 1/adjustment, or
      Decreasing footroom by multiplying by adjustment.
      sigmoid(.1, .5) = .05   (footroom*adjustment)
      sigmoid(.667, .5) = .333  (footroom*adjustment) = (headroom doubled)
      sigmoid(.8, .2) = .16 (footroom*0.2)
      
   Not intended for base < 0.  Ceiling must be > floor.  Must have floor <= base <= ceiling.
*/
//==============================================================================
float sigmoid(float base=-1.0 /*required*/, float adjust=1.0, float floor=0.0, float ceiling=1.0)
{
   float retVal = -1.0;
   if (base < 0.0)
      return(retVal);
   if (ceiling <= floor)
      return(retVal);
   if (base < floor)
      return(retVal);
   if (base > ceiling)
      return(retVal);
   
   float footroom = base - floor;
   float headroom = ceiling - base;
   
   float footBasedNewValue = 0.0;   // This will be the value created by adjusting the footroom, i.e.
                                    // increasing a small value.
   float headBasedNewValue = 0.0;   // This will be the value created by adjusting the headroom, i.e.
                                    // increasing a value that's closer to ceiling than floor.
   
   if (adjust > 1.0) 
   {  // Increasing
      footBasedNewValue = floor + (footroom * adjust);
      headBasedNewValue = ceiling - (headroom / adjust);
      
      // Pick the value that resulted in the smaller net movement
      if ( (footBasedNewValue - base) < (headBasedNewValue - base) )
         retVal = footBasedNewValue;   // The foot adjustment gave the smaller move.
      else
         retVal = headBasedNewValue;   // The head adjustment gave the smaller move
   }
   else
   {  // Decreasing
      footBasedNewValue = floor + (footroom * adjust);
      headBasedNewValue = ceiling - (headroom / adjust);
      
      // Pick the value that resulted in the smaller net movement
      if ( (base - footBasedNewValue) < (base - headBasedNewValue) )
         retVal = footBasedNewValue;   // The foot adjustment gave the smaller move.
      else
         retVal = headBasedNewValue;   // The head adjustment gave the smaller move
   }
   
   aiEcho("sigmoid("+base+", "+adjust+", "+floor+", "+ceiling+") is "+retVal);
   return(retVal);
   
}




//==============================================================================
//createSimpleResearchPlan
//==============================================================================
int createSimpleResearchPlan(int techID=-1, int buildingID=-1, int escrowID=cRootEscrowID, int pri = 50)
{
	int planID=aiPlanCreate("Research "+kbGetTechName(techID), cPlanResearch);
	if (planID < 0)
		echoMessage("Failed to create simple research plan for "+techID);
   else
   {
	   aiPlanSetVariableInt(planID, cResearchPlanTechID, 0, techID);
      aiPlanSetVariableInt(planID, cResearchPlanBuildingID, 0, buildingID);
	   aiPlanSetDesiredPriority(planID, pri);
	   aiPlanSetEscrowID(planID, escrowID);
	   aiPlanSetActive(planID);
   }
   
   return(planID);
}


//==============================================================================
//createNativeResearchPlan
//==============================================================================
int createNativeResearchPlan(int tacticID=cTacticNormal, int pri=50, int need=1, int want=5, int max=10)
{
   int buildingID = getUnit(cUnitTypeFirePit);
   int planID = -1;

   if (buildingID == -1)
   {
      aiEcho("createNativeResearchPlan aborting: no fire pit.");
      return(-1);
   }

   aiEcho("Creating native research plan for tactic ID "+tacticID);
   planID=aiPlanCreate("NativeResearch "+tacticID, cPlanNativeResearch);

   if (planID < 0)
   {
      aiEcho("Failed to create simple research plan for "+tacticID);
      return(-1);
   }
   else
   {
      aiPlanSetVariableInt(planID, cNativeResearchPlanTacticID, 0, tacticID);
      aiPlanSetVariableInt(planID, cNativeResearchPlanBuildingID, 0, buildingID);
      aiPlanSetDesiredPriority(planID, pri);
      //aiPlanSetEscrowID(planID, escrowID);
      aiPlanAddUnitType(planID, gEconUnit, need, want, max);
      aiPlanSetActive(planID);
   }
   return(planID);
}


//==============================================================================
//chooseConsulateFlag
//==============================================================================
void chooseConsulateFlag()
{
   int consulatePlanID = -1;
   int randomizer = aiRandInt(100); // 0-99
   int flag_button_id = -1;

   // Chinese options: Germans, French, Russians (HC level >= 25) & British (HC level >= 40)
   // Choice biased towards Russians
   if ((kbGetCiv() == cCivChinese) || (kbGetCiv() == cCivSPCChinese))
   {
      if (kbGetHCLevel(cMyID) < 25)
      {
         if (randomizer < 90) // 90 % probability
         {
            flag_button_id = cTechypBigConsulateBritish;
            cvOkToBuildForts = true;
         }
         else // 10 % probability
         {
            flag_button_id = cTechypBigConsulateFrench;
         }
      }
      else if (kbGetHCLevel(cMyID) < 40)
      {
         if (randomizer < 90) // 90 % probability
         {
            flag_button_id = cTechypBigConsulateBritish;
            cvOkToBuildForts = true;
         }
         else // 10 % probability
         {
            flag_button_id = cTechypBigConsulateFrench;
         }
      }
      else // HC level >= 40
      {
         if (randomizer < 50) // 50 % probability
         {
            flag_button_id = cTechypBigConsulateGermans;
            cvOkToBuildForts = true;
         }
         else // 50 % probability
         {
            flag_button_id = cTechypBigConsulateRussians;
         }
      }
   }

   // Indian options: Portuguese, Ottomans, French (HC level >= 25) & British (HC level >= 40)
   // Choice biased towards Portuguese, especially on water maps
   if ((kbGetCiv() == cCivIndians) || (kbGetCiv() == cCivSPCIndians))
   {
      if (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0)
      {
         if (kbGetHCLevel(cMyID) < 25)
         {
            if (randomizer < 90) // 90 % probability
            {
               flag_button_id = cTechypBigConsulateOttomans;
            }
            else // 10 % probability
            {
               flag_button_id = cTechypBigConsulateFrench;
            }
         }
         else if (kbGetHCLevel(cMyID) < 40)
         {
            if (randomizer < 90) // 90 % probability
            {
               flag_button_id = cTechypBigConsulateOttomans;
            }
            else // 10 % probability
            {
               flag_button_id = cTechypBigConsulateFrench;
            }
         }
         else // HC level >= 40
         {
            if (randomizer < 50) // 50 % probability
            {
               flag_button_id = cTechypBigConsulatePortuguese;
            }
            else // 50 % probability
            {
               flag_button_id = cTechypBigConsulateBritish;
            }
         }
      }
      else // land map
      {
         if (kbGetHCLevel(cMyID) < 25)
         {
            if (randomizer < 90) // 90 % probability
            {
               flag_button_id = cTechypBigConsulateOttomans;
            }
            else // 10 % probability
            {
               flag_button_id = cTechypBigConsulateFrench;
            }
         }
         else if (kbGetHCLevel(cMyID) < 40)
         {
            if (randomizer < 90) // 90 % probability
            {
               flag_button_id = cTechypBigConsulateOttomans;
            }
            else // 10 % probability
            {
               flag_button_id = cTechypBigConsulateFrench;
            }
         }
         else // HC level >= 40
         {
            if (randomizer < 50) // 50 % probability
            {
               flag_button_id = cTechypBigConsulatePortuguese;
            }
            else // 50 % probability
            {
               flag_button_id = cTechypBigConsulateBritish;
            }
         }
      }
   }

   // Japanese options: Portuguese, Spanish, Dutch (HC level >= 25) & Isolation (HC level >= 40)
   // Choice biased towards Dutch, especially on water maps
   if ((kbGetCiv() == cCivJapanese) || (kbGetCiv() == cCivSPCJapanese))
   {
      if (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0)
      {
         if (kbGetHCLevel(cMyID) < 25)
         {
            if (randomizer < 90) // 90 % probability
            {
               flag_button_id = cTechypBigConsulatePortuguese;
            }
            else // 10 % probability
            {
               flag_button_id = cTechypBigConsulateSpanish;
            }
         }
         else if (kbGetHCLevel(cMyID) < 40)
         {
            if (randomizer < 90) // 90 % probability
            {
               flag_button_id = cTechypBigConsulatePortuguese;
            }
            else // 10 % probability
            {
               flag_button_id = cTechypBigConsulateSpanish;
            }
         }
         else // HC level >= 40
         {
            if (randomizer < 50) // 50 % probability
            {
               flag_button_id = cTechypBigConsulateDutch;
            }
            else // 50 % probability
            {
               flag_button_id = cTechypBigConsulateJapanese;
            }
         }
      }
      else // land map
      {
         if (kbGetHCLevel(cMyID) < 25)
         {
            if (randomizer < 90) // 90 % probability
            {
               flag_button_id = cTechypBigConsulatePortuguese;
            }
            else // 10 % probability
            {
               flag_button_id = cTechypBigConsulateSpanish;
            }
         }
         else if (kbGetHCLevel(cMyID) < 40)
         {
            if (randomizer < 90) // 90 % probability
            {
               flag_button_id = cTechypBigConsulatePortuguese;
            }
            else // 10 % probability
            {
               flag_button_id = cTechypBigConsulateSpanish;
            }
         }
         else // HC level >= 40
         {
            if (randomizer < 50) // 50 % probability
            {
               flag_button_id = cTechypBigConsulateDutch;
            }
            else // 50 % probability
            {
               flag_button_id = cTechypBigConsulateJapanese;
            }
         }
      }
   }

   if (kbTechGetStatus(flag_button_id) == cTechStatusObtainable)
   {
      consulatePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, flag_button_id);
      if (consulatePlanID < 0) 
      {
         aiEcho("************Consulate Flag************");
         aiEcho("Our Consulate flag is: "+kbGetTechName(flag_button_id));
         aiEcho("Randomizer value: "+randomizer);
         createSimpleResearchPlan(flag_button_id, getUnit(cUnitTypeypConsulate),cEconomyEscrowID, 40);
         gFlagChosen = true;
      }
   }
}


void setConsulateArmyPreference() 
{
  if (kbUnitCount(cMyID, cUnitTypeypConsulate, cUnitStateAlive) < 1) 
  {  return;  }

  if (kbTechGetStatus(cTechypBigConsulatePortuguese) == cTechStatusActive) {
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyPortuguese1, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyPortuguese2, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyPortuguese3, 0.1);
  }
  
  if (kbTechGetStatus(cTechypBigConsulateDutch) == cTechStatusActive) {
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyDutch1, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyDutch2, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyDutch3, 0.1);
  }
  
  if (kbTechGetStatus(cTechypBigConsulateRussians) == cTechStatusActive) {
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyRussian1, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyRussian2, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyRussian3, 0.1);
  }
  
  if (kbTechGetStatus(cTechypBigConsulateSpanish) == cTechStatusActive) {
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmySpanish1, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmySpanish2, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmySpanish3, 0.1);
  }
  
  if (kbTechGetStatus(cTechypBigConsulateBritish) == cTechStatusActive) {
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyBritish1, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyBritish2, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyBritish3, 0.1);      
  }
  
  if (kbTechGetStatus(cTechypBigConsulateFrench) == cTechStatusActive) {
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyFrench1, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyFrench2, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyFrench3, 0.1); 
  }
  
  if (kbTechGetStatus(cTechypBigConsulateGermans) == cTechStatusActive) {
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyGerman1, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyGerman2, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyGerman3, 0.1); 
  }
  
  if (kbTechGetStatus(cTechypBigConsulateOttomans) == cTechStatusActive) {
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyOttoman1, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyOttoman2, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyOttoman3, 0.1);
  }
  if (kbTechGetStatus(cTechypBigConsulateJapanese) == cTechStatusActive) {
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateYamabushi, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateShinobi, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateNinja, 0.1);
    kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateRonin, 0.2);
  }
  
}

//==============================================================================
//createSimpleTrainPlan
//==============================================================================
int createSimpleTrainPlan(int puid=-1, int number=1, int escrowID=-1, int baseID=-1, int batchSize=1)
{
   //Create a the plan name.
   string planName="Simple";
   planName=planName+kbGetProtoUnitName(puid)+"Train";
   int planID=aiPlanCreate(planName, cPlanTrain);
   if (planID < 0)
     return(-1);

   // Escrow.
   aiPlanSetEscrowID(planID, escrowID);
   //Unit type.
   aiPlanSetVariableInt(planID, cTrainPlanUnitType, 0, puid);
   //Number.
   aiPlanSetVariableInt(planID, cTrainPlanNumberToTrain, 0, number);
   // Batch size
   aiPlanSetVariableInt(planID, cTrainPlanBatchSize, 0, batchSize);
	
   //If we have a base ID, use it.
   if (baseID >= 0)
   {
      aiPlanSetBaseID(planID, baseID);
      aiPlanSetVariableVector(planID, cTrainPlanGatherPoint, 0, kbBaseGetMilitaryGatherPoint(cMyID, baseID));
   }

   aiPlanSetActive(planID);

   //Done.
   return(planID);
} 
   
   
//==============================================================================
//createSimpleMaintainPlan
//==============================================================================
int createSimpleMaintainPlan(int puid=-1, int number=1, bool economy=true, int baseID=-1, int batchSize=1)
{
   //Create a the plan name.
   string planName="Military";
   if (economy == true)
      planName="Economy";
   planName=planName+kbGetProtoUnitName(puid)+"Maintain";
   int planID=aiPlanCreate(planName, cPlanTrain);
   if (planID < 0)
      return(-1);

   //Economy or Military.
   if (economy == true)
      aiPlanSetEconomy(planID, true);
   else
      aiPlanSetMilitary(planID, true);
   //Unit type.
   aiPlanSetVariableInt(planID, cTrainPlanUnitType, 0, puid);
   //Number.
   aiPlanSetVariableInt(planID, cTrainPlanNumberToMaintain, 0, number);
   // Batch size
   aiPlanSetVariableInt(planID, cTrainPlanBatchSize, 0, batchSize);

   //If we have a base ID, use it.
   if (baseID >= 0)
   {
      aiPlanSetBaseID(planID, baseID);
      if  (economy == false)
         aiPlanSetVariableVector(planID, cTrainPlanGatherPoint, 0, kbBaseGetMilitaryGatherPoint(cMyID, baseID));
   }
   
//   aiPlanSetVariableBool(planID, cTrainPlanUseHomeCityShipments, 0, true);

   aiPlanSetActive(planID);

   //Done.
   return(planID);
} 

//==============================================================================
//int createSimpleMaintainPlanGivenBuilding
//==============================================================================
int createSimpleMaintainPlanGivenBuilding(int puid=-1, int number=1, bool economy=true, int baseID=-1, int batchSize=1, int buildingID=-1)
{
   //Create the plan name.
   string planName="Military";
   if (economy == true)
      planName="Economy";
   planName=planName+kbGetProtoUnitName(puid)+"Maintain";
   int planID=aiPlanCreate(planName, cPlanTrain);
   if (planID < 0)
      return(-1);

   //Economy or Military.
   if (economy == true)
      aiPlanSetEconomy(planID, true);
   else
      aiPlanSetMilitary(planID, true);
   //Unit type.
   aiPlanSetVariableInt(planID, cTrainPlanUnitType, 0, puid);
   //Number.
   aiPlanSetVariableInt(planID, cTrainPlanNumberToMaintain, 0, number);
   // Batch size
   aiPlanSetVariableInt(planID, cTrainPlanBatchSize, 0, batchSize);
	//Building
   aiPlanSetVariableInt(planID, cTrainPlanBuildingID, 0, buildingID);

   //If we have a base ID, use it.
   if (baseID >= 0)
   {
      aiPlanSetBaseID(planID, baseID);
      if  (economy == false)
         aiPlanSetVariableVector(planID, cTrainPlanGatherPoint, 0, kbBaseGetMilitaryGatherPoint(cMyID, baseID));
   }
   
   //aiPlanSetVariableBool(planID, cTrainPlanUseHomeCityShipments, 0, true);

   aiPlanSetActive(planID);

   //Done.
   return(planID);
} 

//==============================================================================
//createSimpleBuildPlan
//==============================================================================
int createSimpleBuildPlan(int puid=-1, int number=1, int pri=100, bool economy=true, int escrowID=-1, int baseID=-1, int numberBuilders=1)
{
   if (cvOkToBuild == false)
      return(-1);
	//echoMessage("Build "+kbGetUnitTypeName(puid));
   int builderType = gEconUnit;
   //Create the right number of plans.
   for (i=0; < number)
   {
	   int planID=aiPlanCreate("Simple Build Plan, "+number+" "+kbGetUnitTypeName(puid), cPlanBuild);
      if (planID < 0)
         return(-1);
      // What to build
      aiPlanSetVariableInt(planID, cBuildPlanBuildingTypeID, 0, puid);

      // 6 meter separation
      aiPlanSetVariableFloat(planID, cBuildPlanBuildingBufferSpace, 0, 6.0);
      if (puid == gFarmUnit)
         aiPlanSetVariableFloat(planID, cBuildPlanBuildingBufferSpace, 0, 1.0);       
      if (puid == gPlantationUnit)
         aiPlanSetVariableFloat(planID, cBuildPlanBuildingBufferSpace, 0, 1.0);
      if ((kbGetCiv() == cCivDutch) && (puid == cUnitTypeBank))
         aiPlanSetVariableFloat(planID, cBuildPlanBuildingBufferSpace, 0, 1.0);
      if ((kbGetCiv() == cCivJapanese) && (puid  == cUnitTypeypShrineJapanese))
         aiPlanSetVariableFloat(planID, cBuildPlanBuildingBufferSpace, 0, 1.0);
      //Priority.
      aiPlanSetDesiredPriority(planID, pri);
      //Mil vs. Econ.
      if (economy == true)
         aiPlanSetMilitary(planID, false);
      else
         aiPlanSetMilitary(planID, true);
      aiPlanSetEconomy(planID, economy);
      //Escrow.
      aiPlanSetEscrowID(planID, escrowID);
      //Builders.
      if (false)//civIsAsian() == true) 
      {/*
        if (puid  == gFarmUnit)
        {
             if (kbUnitCount(cMyID, cUnitTypeYPRicePaddyWagon, cUnitStateAlive) > 0)
                builderType = cUnitTypeYPRicePaddyWagon;
        }*/
        if (puid  == gMarketUnit)
        {
             if (kbUnitCount(cMyID, cUnitTypeypMarketWagon, cUnitStateAlive) > 0)
                builderType = cUnitTypeypMarketWagon;
        }
        if (puid  == cUnitTypeypShrineJapanese)
        {
             if (kbUnitCount(cMyID, cUnitTypeypShrineWagon, cUnitStateAlive) > 0)
                builderType = cUnitTypeypShrineWagon;
        }
        if (puid  == cUnitTypeypMonastery) 
        {
             if (kbUnitCount(cMyID, cUnitTypeYPMonasteryWagon, cUnitStateAlive) > 0)
                builderType = cUnitTypeYPMonasteryWagon;
        }
        if (puid  == cUnitTypeypBerryBuilding) 
        {
            builderType = cUnitTypeYPBerryWagon1; //wtf...
        }
        if (puid  == cUnitTypeTradingPost) 
        {
             if (kbUnitCount(cMyID, cUnitTypeypTradingPostWagon, cUnitStateAlive) > 0)
                builderType = cUnitTypeypTradingPostWagon;
        }
        if (puid  == cUnitTypeypBarracksJapanese)
        {
             if (kbUnitCount(cMyID, cUnitTypeYPMilitaryRickshaw, cUnitStateAlive) > 0)
                builderType = cUnitTypeYPMilitaryRickshaw;
        }
        if (puid  == cUnitTypeypStableJapanese) 
        {
             if (kbUnitCount(cMyID, cUnitTypeYPMilitaryRickshaw, cUnitStateAlive) > 0)
                builderType = cUnitTypeYPMilitaryRickshaw;
        }
        if (puid  == cUnitTypeypDojo) 
        {
             if (kbUnitCount(cMyID, cUnitTypeYPDojoWagon, cUnitStateAlive) > 0)
                builderType = cUnitTypeYPDojoWagon;
        }
        if (puid  == cUnitTypeypTradeMarketAsian) 
        {
             if (kbUnitCount(cMyID, cUnitTypeypMarketWagon, cUnitStateAlive) > 0)
                builderType = cUnitTypeypMarketWagon;
        }
        if (puid  == cUnitTypeypSacredField) 
        {
             if (kbUnitCount(cMyID, cUnitTypeYPSacredFieldWagon, cUnitStateAlive) > 0)
                builderType = cUnitTypeYPSacredFieldWagon;
        }
      }
      if (puid == gDockUnit)
      {
        if (kbUnitCount(cMyID, cUnitTypeYPDockWagon, cUnitStateAlive) > 0)
          builderType = cUnitTypeYPDockWagon;
      }
      // Dutch can use bank wagon
      if ((kbGetCiv() == cCivDutch) && (puid == cUnitTypeBank))
      {
        if (kbUnitCount(cMyID, cUnitTypeBankWagon, cUnitStateAlive) > 0)
          builderType = cUnitTypeBankWagon;
      }
    
      // Germans use settler wagons if there are no settlers or builder wagons available
      if ((kbGetCiv() == cCivGermans) && (kbUnitCount(cMyID, gEconUnit, cUnitStateAlive) < 1) && (builderType == gEconUnit))
      {  aiPlanAddUnitType(planID, cUnitTypeSettlerWagon, 1, numberBuilders, numberBuilders);  }
      else
      {  aiPlanAddUnitType(planID, builderType, 1, numberBuilders, numberBuilders);  }
      
      //Base ID.
      aiPlanSetBaseID(planID, baseID);

      //Go.
      aiPlanSetActive(planID);
   }
   return(planID);   // Only really useful if number == 1, otherwise returns last value.
}




//==============================================================================
//createLocationBuildPlan
//==============================================================================
int createLocationBuildPlan(int puid=-1, int number=1, int pri=100, bool economy=true, int escrowID=-1, vector position=cInvalidVector, int numberBuilders=1)
{
   if (cvOkToBuild == false)
      return(-1);
   //Create the right number of plans.
	//echoMessage("Loc Build "+kbGetUnitTypeName(puid));
   for (i=0; < number)
   {
      int planID=aiPlanCreate("Location Build Plan, "+number+" "+kbGetUnitTypeName(puid), cPlanBuild);
      if (planID < 0)
         return(-1);
      // What to build
      aiPlanSetVariableInt(planID, cBuildPlanBuildingTypeID, 0, puid);

      aiPlanSetVariableVector(planID, cBuildPlanCenterPosition, 0, position);
      aiPlanSetVariableFloat(planID, cBuildPlanCenterPositionDistance, 0, 100.0);
      
      // 6 meter separation
      aiPlanSetVariableFloat(planID, cBuildPlanBuildingBufferSpace, 0, 3.0);
      if (puid == gFarmUnit)
         aiPlanSetVariableFloat(planID, cBuildPlanBuildingBufferSpace, 0, 8.0);  

      //Priority.
      aiPlanSetDesiredPriority(planID, pri);
      //Mil vs. Econ.
      if (economy == true)
         aiPlanSetMilitary(planID, false);
      else
         aiPlanSetMilitary(planID, true);
      aiPlanSetEconomy(planID, economy);
      //Escrow.
      aiPlanSetEscrowID(planID, escrowID);
      //Builders.
	aiPlanAddUnitType(planID, gEconUnit, numberBuilders, numberBuilders, numberBuilders);
      
      aiPlanSetVariableVector(planID, cBuildPlanInfluencePosition, 0, position);    // Influence toward position
      aiPlanSetVariableFloat(planID, cBuildPlanInfluencePositionDistance, 0, 100.0);     // 100m range.
      aiPlanSetVariableFloat(planID, cBuildPlanInfluencePositionValue, 0, 200.0);        // 200 points max
      aiPlanSetVariableInt(planID, cBuildPlanInfluencePositionFalloff, 0, cBPIFalloffLinear);  // Linear slope falloff

      //Go.
      aiPlanSetActive(planID);
   }
   return(planID);   // Only really useful if number == 1, otherwise returns last value.
}




//==============================================================================
// createMainBase
//==============================================================================
int createMainBase(vector mainVec=cInvalidVector)
{
   aiEcho("Creating main base at "+mainVec);
   if (mainVec == cInvalidVector)  
      return(-1);
   
   int oldMainID = kbBaseGetMainID(cMyID);
   int i = 0;
   
   int count=-1;
   static int unitQueryID=-1;
   int buildingID = -1;
   string buildingName = "";
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("NewMainBaseBuildingQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
   }

	//Define a query to get all matching units
	if (unitQueryID != -1)
	{
      kbUnitQuerySetPlayerRelation(unitQueryID, -1);
   	kbUnitQuerySetPlayerID(unitQueryID, cMyID);

      kbUnitQuerySetUnitType(unitQueryID, cUnitTypeBuilding);
      kbUnitQuerySetState(unitQueryID, cUnitStateABQ);
      kbUnitQuerySetPosition(unitQueryID, mainVec);      // Checking new base vector
      kbUnitQuerySetMaximumDistance(unitQueryID, 100.0);
	}
   
   kbUnitQueryResetResults(unitQueryID);
   count = kbUnitQueryExecute(unitQueryID);

     

   while (oldMainID >= 0)
   {
      aiEcho("Old main base was "+oldMainID+" at "+kbBaseGetLocation(cMyID, oldMainID));
      kbUnitQuerySetPosition(unitQueryID,kbBaseGetLocation(cMyID, oldMainID));      // Checking old base location
      kbUnitQueryResetResults(unitQueryID);
      count = kbUnitQueryExecute(unitQueryID);
      int unitID = -1;
      
     
      // Remove old base's resource breakdowns
      aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeEasy, oldMainID);
      aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeHunt, oldMainID);
      aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeHerdable, oldMainID);
      aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeHuntAggressive, oldMainID);
      aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeFish, oldMainID);
      aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeFarm, oldMainID);
      aiRemoveResourceBreakdown(cResourceWood, cAIResourceSubTypeEasy, oldMainID);
      aiRemoveResourceBreakdown(cResourceGold, cAIResourceSubTypeEasy, oldMainID);

      kbBaseDestroy(cMyID, oldMainID);
      oldMainID = kbBaseGetMainID(cMyID);
   }


   int newBaseID=kbBaseCreate(cMyID, "Base"+kbBaseGetNextID(), mainVec, 100.0);
   aiEcho("New main base ID is "+newBaseID);
   if (newBaseID > -1)
   {
      //Figure out the front vector.
      vector baseFront=xsVectorNormalize(kbGetMapCenter()-mainVec);
      kbBaseSetFrontVector(cMyID, newBaseID, baseFront);
      aiEcho("Setting front vector to "+baseFront);
      //Military gather point.
      float milDist = 40.0;
      while (  kbAreaGroupGetIDByPosition(mainVec+(baseFront*milDist)) != kbAreaGroupGetIDByPosition(mainVec) )
      {
         milDist = milDist - 5.0;
         if (milDist < 6.0)
            break;
      }
      vector militaryGatherPoint = mainVec + (baseFront * milDist);
      
      kbBaseSetMilitaryGatherPoint(cMyID, newBaseID, militaryGatherPoint);
      //Set the other flags.
      kbBaseSetMilitary(cMyID, newBaseID, true);
      kbBaseSetEconomy(cMyID, newBaseID, true);
      //Set the resource distance limit.
      

      // 200m x 200m map, assume I'm 25 meters in, I'm 150m from enemy base.  This sets the range at 80m.
      //(cMyID, newBaseID, (kbGetMapXSize() + kbGetMapZSize())/5);   // 40% of average of map x and z dimensions.
      kbBaseSetMaximumResourceDistance(cMyID, newBaseID, 100.0); // 100 led to age-2 gold starvation
      kbBaseSetSettlement(cMyID, newBaseID, true);
      //Set the main-ness of the base.
      kbBaseSetMain(cMyID, newBaseID, true);
      
      // Add the TC, if any.
      if (getUnit(cUnitTypeTownCenter, cMyID, cUnitStateABQ) >= 0)
         kbBaseAddUnit(cMyID, newBaseID, getUnit(cUnitTypeTownCenter, cMyID, cUnitStateABQ));
   }
   
   
   // Move the defend plan and reserve plan
   xsEnableRule("endDefenseReflexDelay"); // Delay so that new base ID will exist
   
//   xsEnableRule("populateMainBase");   // Can't add units yet, they still appear to be owned by deleted base.  This rule adds a slight delay.

   return(newBaseID);
}
 

//==============================================================================
// getAllyCount() // Returns number of allies EXCLUDING self
//==============================================================================
int getAllyCount()
{
   int retVal = 0;
   
   int player = 0;
   for (player=1; < cNumberPlayers)
   {
      if (player == cMyID)
         continue;
      
      if (kbIsPlayerAlly(player) == true)
         retVal = retVal + 1;
   }
   
   return(retVal);
}
 


//==============================================================================
// getEnemyCount() // Returns number of enemies excluding gaia
//==============================================================================
int getEnemyCount()
{
   int retVal = 0;
   
   int player = 0;
   for (player=1; < cNumberPlayers)
   {
      if (player == cMyID)
         continue;
      
      if (kbIsPlayerEnemy(player) == true)
         retVal = retVal + 1;
   }
   
   return(retVal);
}

//==============================================================================
// arraySortFloat
/*
   Takes two arrays, the source and the target.
   Source has the original values, and is a float array.
   Target (int array) will receive the indexes into source in descending order.  For example,
   if the highest value in source is source[17] with a value of 91, then
   arraySort(source, target) will assign target[0] the value of 17, and 
   source[target[0]] will be 91.

   WTF? Insertion Sort? Why not QSORT!!!!!
*/
//==============================================================================
bool arraySortFloat(int sourceArray=-1, int targetArray=-1)
{
   int pass = 0;
   int i = 0; 
   int size = xsArrayGetSize(sourceArray);
   if (size != xsArrayGetSize(targetArray))
   {
      aiEcho("ArraySort error, source and target are not of same size.");
      return(false);
   }
   
   float highestScore = 1000000.0;  // Highest score found on previous pass
   float highScore = -1000000.0;    // Highest score found on this pass
   int highestScoreIndex = -1;      // Which element had the high score last pass?
   int highScoreIndex = -1;         // Which element has the highest score so far this pass?
   for (pass=0; < size)             // Sort the array
   {
      highScore = -1000000.0;
      highScoreIndex = -1;
      for (i=0; < size)   // Look for highest remaining value
      {
         if ( xsArrayGetFloat(sourceArray, i) > highestScore ) // We're over the highest score, already been selected.  Skip.
            continue;

         if ( (xsArrayGetFloat(sourceArray, i) == highestScore) && (highestScoreIndex >= i) ) // Tie with a later one, we've been selected.  Skip.
            continue;

         if ( xsArrayGetFloat(sourceArray, i) <= highScore ) // We're not the highest so far on this pass, skip.
            continue;
         
         highScore = xsArrayGetFloat(sourceArray, i);    // This is the highest score this pass
         highScoreIndex = i;                                // So remember this index
      }
//      if(xsArrayGetString(gMissionStrings, highScoreIndex) != " ")
//         aiEcho("        "+highScoreIndex+" "+highScore+" "+xsArrayGetString(gMissionStrings,highScoreIndex));
      xsArraySetInt(targetArray, pass, highScoreIndex);
      highestScore = highScore;           // Save this for next pass
      highestScoreIndex = highScoreIndex;
   }
   return(true);
}









//==============================================================================
// getRandomPlayerByRelation
/*
   Returns a randomly selected ally or enemy.

*/
//==============================================================================
int getRandomPlayerByRelation(int playerRelation = -1)
{
   int retVal = -1;
   int matchCount = -1;    // I.e. there are 3 matching players
   int matchIndex = -1;    // Used for traversal
   int playerToGet = -1;   // i.e. get the 2nd matching player
   
   
   // Get a count of matching players
   matchCount = 0;
   for (matchIndex = 1; < cNumberPlayers)
   {
      if ( (playerRelation == cPlayerRelationAlly) && (kbIsPlayerAlly(matchIndex) == true) && (kbHasPlayerLost(matchIndex) == false))
         matchCount = matchCount + 1;
      if ( ( (playerRelation == cPlayerRelationEnemy) || (playerRelation == cPlayerRelationEnemyNotGaia) ) && (kbIsPlayerEnemy(matchIndex) == true) && (kbHasPlayerLost(matchIndex) == false))
         matchCount = matchCount + 1;
      if ( (playerRelation == cPlayerRelationSelf) && (cMyID == matchIndex) && (kbHasPlayerLost(matchIndex) == false))
         matchCount = matchCount + 1;
   }
   
   if (matchCount < 1)
      return(-1);
   
   playerToGet = aiRandInt(matchCount) + 1;  // If there are 3 matches, return 1, 2 or 3
   
   // Traverse the list again, and get the matching player.
   matchCount = 0;
   for (matchIndex = 1; < cNumberPlayers)
   {
      if ( (playerRelation == cPlayerRelationAlly) && (kbIsPlayerAlly(matchIndex) == true) && (kbHasPlayerLost(matchIndex) == false))
         matchCount = matchCount + 1;
      if ( ( (playerRelation == cPlayerRelationEnemy) || (playerRelation == cPlayerRelationEnemyNotGaia) )&& (kbIsPlayerEnemy(matchIndex) == true) && (kbHasPlayerLost(matchIndex) == false))
         matchCount = matchCount + 1;
      if ( (playerRelation == cPlayerRelationSelf) && (cMyID == matchIndex) && (kbHasPlayerLost(matchIndex) == false))
         matchCount = matchCount + 1;
      
      if (matchCount == playerToGet)
      {
         retVal = matchIndex;    // Save this player's number
         break;
      }
   }
   
   return(retVal);
}


//==============================================================================
// getTeamPosition
/*
   Returns the player's position in his/her team, i.e. in a 123 vs 456 game, 
   player 5's team position is 2, player 3 is 3, player 4 is 1.

   Excludes resigned players.

*/
//==============================================================================
int getTeamPosition(int playerID = -1)
{
   int index = -1;    // Used for traversal
   int playerToGet = -1;   // i.e. get the 2nd matching playe
   
   // Traverse list of players, increment when we find a teammate, return when we find my number.
   int retVal = 0;      // Zero if I don't exist...
   for (index = 1; < cNumberPlayers)
   {
      if ( (kbHasPlayerLost(index) == false) && (kbGetPlayerTeam(playerID) == kbGetPlayerTeam(index)) )
         retVal = retVal + 1; // That's another match
      
      if ( index == playerID )
         return(retVal);
   }
   return(-1);
}


//==============================================================================
// getEnemyPlayerByTeamPosition
/*
   Returns the ID of the Nth player on the enemy team, returns -1 if 
   there aren't that many players.

   Excludes resigned players.
*/

int getEnemyPlayerByTeamPosition(int position = -1)
{

   int matchCount = 0;
   int index = -1;    // Used for traversal
   int playerToGet = -1;   // i.e. get the 2nd matching playe
   
   // Traverse list of players, return when we find the matching player
   for (index = 1; < cNumberPlayers)
   {
      if ( (kbHasPlayerLost(index) == false) && (kbGetPlayerTeam(cMyID) != kbGetPlayerTeam(index)) )
         matchCount = matchCount + 1; // Enemy player, add to the count
      
      if ( matchCount == position )
         return(index);
   }
   return(-1);
}



//==============================================================================
// getClosestVPSite
/*
   Returns the VPSiteID of the closest VP Site that matches the parms.
   -1 means don't care, everything matches.
   To get the closest site that has been claimed (building or complete) by an enemy,
   use cVPStateAny with playerRelationOrID set to cPlayerRelationEnemy.  (Unbuilt ones have gaia ownership)
*/
//==============================================================================
int getClosestVPSite(vector location=cInvalidVector, int type=cVPAll, int state=cVPStateAny, int playerRelationOrID=-1)
{
   int retVal = -1;
   int vpList = kbVPSiteQuery(type, playerRelationOrID, state);
   vector siteLocation = cInvalidVector;
   int count = xsArrayGetSize(vpList);
   int index = 0;
   int siteID = 0;
   float dist = 0.0;
   float minDist = 100000.0;
   
   for (index = 0; < count)
   {
      siteID = xsArrayGetInt(vpList, index);
      siteLocation = kbVPSiteGetLocation(siteID);
      dist = distance(location, siteLocation);
      if (dist < minDist)
      {
         retVal = siteID;  // Remember this one.
         minDist = dist;
      }
   }
  
   return(retVal);
}

//==============================================================================
// chooseAttackPlayerID
/*
   Given a point/radius, look for enemy units, and choose the owner of one
   as an appropriate player to attack.

   If none found, return mostHatedEnemy.
*/
//==============================================================================
int chooseAttackPlayerID(vector point=cInvalidVector, float radius = 50.0)
{
   int retVal = aiGetMostHatedPlayerID();
   static int queryID = -1;
   
   if (point == cInvalidVector)
      return(retVal);
   
   if (queryID < 0)
   {
      queryID = kbUnitQueryCreate("Choose attack player");
      kbUnitQuerySetPlayerRelation(queryID, cPlayerRelationEnemyNotGaia);   // Any enemy units in point/radius
      kbUnitQuerySetIgnoreKnockedOutUnits(queryID, true);
      kbUnitQuerySetUnitType(queryID, cUnitTypeUnit);
      kbUnitQuerySetState(queryID, cUnitStateAlive);
   }
   kbUnitQuerySetPosition(queryID, point);
   kbUnitQuerySetMaximumDistance(queryID, radius);
   kbUnitQueryResetResults(queryID);
   int count = kbUnitQueryExecute(queryID);
   int index = 0;
   int unitID = 0;
   for (index = 0; < count)
   {
      unitID = kbUnitQueryGetResult(queryID, index);
      if (kbUnitGetPlayerID(unitID) > 0)  // Not Gaia
      {
         retVal = kbUnitGetPlayerID(unitID);  // Owner of first (random) non-gaia unit
         break;
      }
   }
   
   return(retVal);
}


//==============================================================================
// New functions for the Draugur AI
//==============================================================================

//==============================================================================
// chooseEuropeanPolitician()
// Chooses non-revolutionary age-up politicians for European civilizations
//==============================================================================
int chooseEuropeanPolitician()
{
   int position = 0;
   int randomizer = -1;
   int numChoices = -1;
   int politician = -1;
   int bestChoice = 0;
   int bestScore = 0;

   // Reset score array
   for (i=0; <6)
      xsArraySetInt(gPoliticianScores, i, 0);

   // Choose politician
   switch (kbGetAge())
   {
      case cAge1:
      {  // Governor for turtler, resources or settlers for rusher, biased against the Naturalist
         randomizer = aiRandInt(10); // 0-9

         // Create array of politicians to choose from
         for (i=0; <6)
         {
             politician = xsArrayGetInt(gAge2PoliticianList, i);
             if (kbTechGetStatus(politician) == cTechStatusObtainable)
             {
                xsArraySetInt(gAgeUpPoliticians, position, politician);
                position = position + 1;
             }
         }

         // Weight politicians as appropriate
         numChoices = position;
         for (i=0; <numChoices)
         {
            politician = xsArrayGetInt(gAgeUpPoliticians, i);
            if (btOffenseDefense < 0.0)
            {
               if (politician == cTechPoliticianGovernor)
               {
                  xsArraySetInt(gPoliticianScores, i, xsArrayGetInt(gPoliticianScores, i) + 10);
               }
            }
            if (btRushBoom > 0.0)
            {
               if ((politician == cTechPoliticianGovernor) ||
                   (politician == cTechPoliticianNaturalist))
               {
                  xsArraySetInt(gPoliticianScores, i, xsArrayGetInt(gPoliticianScores, i) - 10);
               }
            }
            if (randomizer < 5)
            {
               if (politician == cTechPoliticianNaturalist)
               {
                  xsArraySetInt(gPoliticianScores, i, xsArrayGetInt(gPoliticianScores, i) - 10);
               }
            }
         }
         // Add random bonus
         randomizer = aiRandInt(numChoices);
         xsArraySetInt(gPoliticianScores, randomizer, xsArrayGetInt(gPoliticianScores, randomizer) + 5);

         // Choose politician with best score
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gPoliticianScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gPoliticianScores, i);
               bestChoice = i;
            }
         }
         politician = xsArrayGetInt(gAgeUpPoliticians, bestChoice);
         break;
      }
      case cAge2:
      {  // Randomized, but biased towards Admiral or Pirate for water maps
         randomizer = aiRandInt(10); // 0-9

         // Create array of politicians to choose from
         for (i=0; <16)
         {
             politician = xsArrayGetInt(gAge3PoliticianList, i);
             if (kbTechGetStatus(politician) == cTechStatusObtainable)
             {
                xsArraySetInt(gAgeUpPoliticians, position, politician);
                position = position + 1;
             }
         }

         // Weight politicians as appropriate
         numChoices = position;
         for (i=0; <numChoices)
         {
            politician = xsArrayGetInt(gAgeUpPoliticians, i);
            if ((cRandomMapName == "amazonia") ||
                (cRandomMapName == "caribbean") ||
                (cRandomMapName == "Ceylon") ||
                ((randomizer < 5) && (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0)))
            {
               if ((politician == cTechPoliticianAdmiral) ||
                   (politician == cTechPoliticianAdmiralOttoman) ||
                   (politician == cTechPoliticianPirate))
               {
                  xsArraySetInt(gPoliticianScores, i, xsArrayGetInt(gPoliticianScores, i) + 10);
               }
            }
            if (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) == 0)
            {
               if ((politician == cTechPoliticianAdmiral) ||
                   (politician == cTechPoliticianAdmiralOttoman) ||
                   (politician == cTechPoliticianPirate))
               {
                  xsArraySetInt(gPoliticianScores, i, xsArrayGetInt(gPoliticianScores, i) - 10);
               }
            }
         }
         // Add random bonus
         randomizer = aiRandInt(numChoices);
         xsArraySetInt(gPoliticianScores, randomizer, xsArrayGetInt(gPoliticianScores, randomizer) + 5);

         // Choose politician with best score
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gPoliticianScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gPoliticianScores, i);
               bestChoice = i;
            }
         }
         politician = xsArrayGetInt(gAgeUpPoliticians, bestChoice);
         break;
      }
      case cAge3:
      {  // Randomized, but biased towards the Engineer
         randomizer = aiRandInt(10); // 0-9

         // Create array of politicians to choose from
         for (i=0; <24)
         {
             politician = xsArrayGetInt(gAge4PoliticianList, i);
             if (kbTechGetStatus(politician) == cTechStatusObtainable)
             {
                xsArraySetInt(gAgeUpPoliticians, position, politician);
                position = position + 1;
             }
         }

         // Weight politicians as appropriate
         numChoices = position;
         for (i=0; <numChoices)
         {
            politician = xsArrayGetInt(gAgeUpPoliticians, i);
            if (randomizer < 3)
            {
               if ((politician == cTechPoliticianEngineer) ||
                   (politician == cTechPoliticianEngineerPortuguese))
               {
                  xsArraySetInt(gPoliticianScores, i, xsArrayGetInt(gPoliticianScores, i) + 10);
               }
            }
         }
         // Add random bonus
         randomizer = aiRandInt(numChoices);
         xsArraySetInt(gPoliticianScores, randomizer, xsArrayGetInt(gPoliticianScores, randomizer) + 5);

         // Choose politician with best score
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gPoliticianScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gPoliticianScores, i);
               bestChoice = i;
            }
         }
         politician = xsArrayGetInt(gAgeUpPoliticians, bestChoice);
         break;
      }
      case cAge4:
      {  // Randomized, but heavily biased towards the General
         randomizer = aiRandInt(10); // 0-9

         // Create array of politicians to choose from
         for (i=0; <5)
         {
             politician = xsArrayGetInt(gAge5PoliticianList, i);
             if (kbTechGetStatus(politician) == cTechStatusObtainable)
             {
                xsArraySetInt(gAgeUpPoliticians, position, politician);
                position = position + 1;
             }
         }

         // Weight politicians as appropriate
         numChoices = position;
         for (i=0; <numChoices)
         {
            politician = xsArrayGetInt(gAgeUpPoliticians, i);
            if (randomizer < 8)
            {
               if ((politician == cTechPoliticianGeneral) ||
                   (politician == cTechPoliticianGeneralBritish) ||
                   (politician == cTechPoliticianGeneralOttoman) ||
                   (politician == cTechPoliticianGeneralSkirmisher))
               {
                  xsArraySetInt(gPoliticianScores, i, xsArrayGetInt(gPoliticianScores, i) + 10);
               }
            }
            else
            {
               if (politician == cTechPoliticianPresidente)
               {
                  xsArraySetInt(gPoliticianScores, i, xsArrayGetInt(gPoliticianScores, i) + 10);
               }
            }
         }

         // Choose politician with best score
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gPoliticianScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gPoliticianScores, i);
               bestChoice = i;
            }
         }
         politician = xsArrayGetInt(gAgeUpPoliticians, bestChoice);
         break;
      }
   }

   aiEcho("Chosen age-up politician: "+kbGetTechName(politician));
   return(politician);
}


//==============================================================================
// chooseNativeCouncilMember()
// Chooses age-up council members for native civilizations
//==============================================================================
int chooseNativeCouncilMember()
{
   int randomizer = -1;
   int numChoices = -1;
   int politician = -1;
   int bestChoice = 0;
   int bestScore = 0;

   for (i=0; <6)
      xsArraySetInt(gNatCouncilScores, i, 0);   // reset array

   switch (kbGetAge())
   {
      case cAge1:
      {  // Iroquois chief, Sioux wise woman, Aztec shaman, and all messengers to be avoided if possible
         numChoices = aiGetPoliticianListCount(cAge2);
         for (i=0; <numChoices)
         {
            politician = aiGetPoliticianListByIndex(cAge2, i);
            if ((politician == cTechTribalIroquoisChief2) ||
                (politician == cTechTribalSiouxWisewoman2) ||
                (politician == cTechTribalAztecShaman2) ||
                (politician == cTechTribalIroquoisYouth2) ||
                (politician == cTechTribalSiouxYouth2) ||
                (politician == cTechTribalAztecYouth2))
            {
               xsArraySetInt(gNatCouncilScores, i, xsArrayGetInt(gNatCouncilScores, i) - 10);
            }
         }
         randomizer = aiRandInt(numChoices);
         xsArraySetInt(gNatCouncilScores, randomizer, xsArrayGetInt(gNatCouncilScores, randomizer) + 5);
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gNatCouncilScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gNatCouncilScores, i);
               bestChoice = i;
            }
         }
         politician = aiGetPoliticianListByIndex(cAge2, bestChoice);
         break;
      }
      case cAge2:
      {  // Iroquois chief, Sioux wise woman, Aztec shaman, and all messengers to be avoided if possible
         numChoices = aiGetPoliticianListCount(cAge3);
         for (i=0; <numChoices)
         {
            politician = aiGetPoliticianListByIndex(cAge3, i);
            if ((politician == cTechTribalIroquoisChief3) ||
                (politician == cTechTribalSiouxWisewoman3) ||
                (politician == cTechTribalAztecShaman3) ||
                (politician == cTechTribalIroquoisYouth3) ||
                (politician == cTechTribalSiouxYouth3) ||
                (politician == cTechTribalAztecYouth3))
            {
               xsArraySetInt(gNatCouncilScores, i, xsArrayGetInt(gNatCouncilScores, i) - 10);
            }
            if (kbTechGetStatus(politician) != cTechStatusObtainable)
            {
               xsArraySetInt(gNatCouncilScores, i, xsArrayGetInt(gNatCouncilScores, i) - 50);
            }
            xsArraySetInt(gNatCouncilScores, i, xsArrayGetInt(gNatCouncilScores, i) + aiRandInt(10));
         }
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gNatCouncilScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gNatCouncilScores, i);
               bestChoice = i;
            }
         }
         politician = aiGetPoliticianListByIndex(cAge3, bestChoice);
         break;
      }
      case cAge3:
      {  // Iroquois chief, Sioux wise woman, Aztec shaman, and all messengers to be avoided if possible
         numChoices = aiGetPoliticianListCount(cAge4);
         for (i=0; <numChoices)
         {
            politician = aiGetPoliticianListByIndex(cAge4, i);
            if ((politician == cTechTribalIroquoisChief4) ||
                (politician == cTechTribalSiouxWisewoman4) ||
                (politician == cTechTribalAztecShaman4) ||
                (politician == cTechTribalIroquoisYouth4) ||
                (politician == cTechTribalSiouxYouth4) ||
                (politician == cTechTribalAztecYouth4))
            {
               xsArraySetInt(gNatCouncilScores, i, xsArrayGetInt(gNatCouncilScores, i) - 10);
            }
            if (kbTechGetStatus(politician) != cTechStatusObtainable)
            {
               xsArraySetInt(gNatCouncilScores, i, xsArrayGetInt(gNatCouncilScores, i) - 50);
            }
            xsArraySetInt(gNatCouncilScores, i, xsArrayGetInt(gNatCouncilScores, i) + aiRandInt(10));
         }
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gNatCouncilScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gNatCouncilScores, i);
               bestChoice = i;
            }
         }
         politician = aiGetPoliticianListByIndex(cAge4, bestChoice);
         break;
      }
      case cAge4:
      {  // All messengers to be avoided if possible
         numChoices = aiGetPoliticianListCount(cAge5);
         for (i=0; <numChoices)
         {
            politician = aiGetPoliticianListByIndex(cAge5, i);
            if ((politician == cTechTribalIroquoisYouth5) ||
                (politician == cTechTribalSiouxYouth5) ||
                (politician == cTechTribalAztecYouth5))
            {
               xsArraySetInt(gNatCouncilScores, i, xsArrayGetInt(gNatCouncilScores, i) - 10);
            }
            if (kbTechGetStatus(politician) != cTechStatusObtainable)
            {
               xsArraySetInt(gNatCouncilScores, i, xsArrayGetInt(gNatCouncilScores, i) - 50);
            }
            xsArraySetInt(gNatCouncilScores, i, xsArrayGetInt(gNatCouncilScores, i) + aiRandInt(10));
         }
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gNatCouncilScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gNatCouncilScores, i);
               bestChoice = i;
            }
         }
         politician = aiGetPoliticianListByIndex(cAge5, bestChoice);
         break;
      }
   }

   aiEcho("Chosen age-up council member: "+kbGetTechName(politician));
   return(politician);
}


//==============================================================================
// chooseAsianWonder()
// Chooses age-up wonders for Asian civilizations
//==============================================================================
int chooseAsianWonder()
{
   int numChoices = -1;
   int politician = -1;
   int ageUpWonder = -1;
   int bestChoice = 0;
   int bestScore = 0;

   for (i=0; <6)
      xsArraySetInt(gAsianWonderScores, i, 0);   // reset array

   switch (kbGetAge())
   {
      case cAge1:
      {
         numChoices = aiGetPoliticianListCount(cAge2);
         for (i=0; <numChoices)
         {
            politician = aiGetPoliticianListByIndex(cAge2, i);
            if (politician == cTechYPWonderChinesePorcelainTower2) // strong bias towards porcelain tower
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            if (politician == cTechYPWonderIndianCharminar2) // strong bias towards charminar gate
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            if (politician == cTechYPWonderJapaneseToshoguShrine2) // strong bias towards toshogu shrine
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + aiRandInt(10));
         }
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gAsianWonderScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gAsianWonderScores, i);
               bestChoice = i;
            }
         }
         politician = aiGetPoliticianListByIndex(cAge2, bestChoice);
         aiEcho("Chosen age-up wonder: "+kbGetTechName(politician));

         // Find building corresponding to chosen tech (i.e. "politician")
         for (i=0; <15)
         {
            if (xsArrayGetInt(gAge2WonderTechList, i) == politician)
            {
               ageUpWonder = xsArrayGetInt(gAge2WonderList, i);
            }
         }
         break;
      }
      case cAge2:
      {
         numChoices = aiGetPoliticianListCount(cAge3);
         for (i=0; <numChoices)
         {
            politician = aiGetPoliticianListByIndex(cAge3, i);
            if (politician == cTechYPWonderChineseConfucianAcademy3) // strong bias towards confucian academy
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            if (politician == cTechYPWonderIndianAgra3) // strong bias towards agra fort
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            if (politician == cTechYPWonderJapaneseShogunate3) // strong bias towards shogunate
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            if (kbTechGetStatus(politician) != cTechStatusObtainable)
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) - 50);
            }
            xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + aiRandInt(10));
         }
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gAsianWonderScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gAsianWonderScores, i);
               bestChoice = i;
            }
         }
         politician = aiGetPoliticianListByIndex(cAge3, bestChoice);
         aiEcho("Chosen age-up wonder: "+kbGetTechName(politician));

         // Find building corresponding to chosen tech (i.e. "politician")
         for (i=0; <15)
         {
            if (xsArrayGetInt(gAge3WonderTechList, i) == politician)
            {
               ageUpWonder = xsArrayGetInt(gAge3WonderList, i);
            }
         }
         break;
      }
      case cAge3:
      {
         numChoices = aiGetPoliticianListCount(cAge4);
         for (i=0; <numChoices)
         {
            politician = aiGetPoliticianListByIndex(cAge4, i);
            if (politician == cTechYPWonderChineseSummerPalace4) // strong bias towards summer palace
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            if (politician == cTechYPWonderIndianKarniMata4) // strong bias towards karni mata
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            if (politician == cTechYPWonderJapaneseGoldenPavillion4) // strong bias towards golden pavillion
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            if (kbTechGetStatus(politician) != cTechStatusObtainable)
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) - 50);
            }
            xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + aiRandInt(10));
         }
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gAsianWonderScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gAsianWonderScores, i);
               bestChoice = i;
            }
         }
         politician = aiGetPoliticianListByIndex(cAge4, bestChoice);
         aiEcho("Chosen age-up wonder: "+kbGetTechName(politician));

         // Find building corresponding to chosen tech (i.e. "politician")
         for (i=0; <15)
         {
            if (xsArrayGetInt(gAge4WonderTechList, i) == politician)
            {
               ageUpWonder = xsArrayGetInt(gAge4WonderList, i);
            }
         }
         break;
      }
      case cAge4:
      {
         numChoices = aiGetPoliticianListCount(cAge5);
         for (i=0; <numChoices)
         {
            politician = aiGetPoliticianListByIndex(cAge5, i);
            if (politician == cTechYPWonderJapaneseGiantBuddha5) // slight bias against giant buddha
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) - 5);
            }
            if (politician == cTechYPWonderJapaneseGoldenPavillion5) // strong bias towards golden pavillion
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            if (politician == cTechYPWonderJapaneseShogunate5) // strong bias towards shogunate
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + 10);
            }
            if (kbTechGetStatus(politician) != cTechStatusObtainable)
            {
               xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) - 50);
            }
            xsArraySetInt(gAsianWonderScores, i, xsArrayGetInt(gAsianWonderScores, i) + aiRandInt(10));
         }
         for (i=0; <numChoices)
         {
            if (xsArrayGetInt(gAsianWonderScores, i) >= bestScore)
            {
               bestScore = xsArrayGetInt(gAsianWonderScores, i);
               bestChoice = i;
            }
         }
         politician = aiGetPoliticianListByIndex(cAge5, bestChoice);
         aiEcho("Chosen age-up wonder: "+kbGetTechName(politician));

         // Find building corresponding to chosen tech (i.e. "politician")
         for (i=0; <15)
         {
            if (xsArrayGetInt(gAge5WonderTechList, i) == politician)
            {
               ageUpWonder = xsArrayGetInt(gAge5WonderList, i);
            }
         }
         break;
      }
   }

   aiEcho("Chosen age-up wonder: "+kbGetProtoUnitName(ageUpWonder));
   return(ageUpWonder);
}


//==============================================================================
// chooseRevolutionary()
// Chooses revolutionary politicians
//==============================================================================
int chooseRevolutionary(bool emergency = false)
{
   int randomizer = -1;
   int politician = -1;

   // Choose revolutionary based on civilization
   switch (kbGetCiv())
   {
      case cCivBritish: // 50 % chance each for L'Ouverture and Washington
      { 
         randomizer = aiRandInt(10); // 0-9
         if (randomizer < 5)
         {
            politician = cTechXPRevolutionLouverture;
         }
         else
         {
            politician = cTechXPRevolutionWashington;
         }
         break;
      }
      case cCivDutch: // 80 % chance for Bonifacio (100 % in an emergency), 20 % for Washington
      {
         randomizer = aiRandInt(10); // 0-9
         if ((randomizer < 8) || (emergency == true))
         {
            politician = cTechXPRevolutionBonifacio;
         }
         else
         {
            politician = cTechXPRevolutionWashington;
         }
         break;
      }
      case cCivFrench: // Santander on water maps, otherwise (or in an emergency) L'Ouverture
      {
         if ((kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0) && (emergency == false))
         {
            politician = cTechXPRevolutionSantander;
         }
         else
         {
            politician = cTechXPRevolutionLouverture;
         }
         break;
      }
      case cCivGermans: // 80 % chance for Bolivar (100 % in an emergency), 20 % for San Martin
      {
         randomizer = aiRandInt(10); // 0-9
         if ((randomizer < 8) || (emergency == true))
         {
            politician = cTechXPRevolutionBolivar;
         }
         else
         {
            politician = cTechXPRevolutionSanMartin;
         }
         break;
      }
      case cCivOttomans: // 100 % chance for Santander on island maps and 80 % on water maps, otherwise (or in an emergency) O'Higgins
      {
         randomizer = aiRandInt(10); // 0-9
         if ((cRandomMapName == "amazonia") ||
             (cRandomMapName == "caribbean") ||
             (cRandomMapName == "Ceylon") ||
             ((randomizer < 8) && (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0)))
         {
            politician = cTechXPRevolutionSantander;
         }
         else
         {
            politician = cTechXPRevolutionOHiggins;
         }
         if (emergency == true)
         {
            politician = cTechXPRevolutionOHiggins;
         }
         break;
      }
      case cCivPortuguese: // 50 % chance each for Bonifacio and Hidalgo
      { 
         randomizer = aiRandInt(10); // 0-9
         if (randomizer < 5)
         {
            politician = cTechXPRevolutionBonifacio;
         }
         else
         {
            politician = cTechXPRevolutionHidalgo;
         }
         break;
      }
      case cCivRussians: // Santander on water maps, otherwise (or in an emergency) Bolivar
      {
         if ((kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0) && (emergency == false))
         {
            politician = cTechXPRevolutionSantander;
         }
         else
         {
            politician = cTechXPRevolutionBolivar;
         }
         break;
      }
      case cCivSpanish: // 50 % chance each for Hidalgo and O'Higgins
      { 
         randomizer = aiRandInt(10); // 0-9
         if (randomizer < 5)
         {
            politician = cTechXPRevolutionHidalgo;
         }
         else
         {
            politician = cTechXPRevolutionOHiggins;
         }
         break;
      }
   }

   aiEcho("Chosen revolutionary: "+kbGetTechName(politician));
   return(politician);
}


//==============================================================================
// checkRevolutionLastStand()
// Checks feasibility of a revolution aimed at delaying defeat
//==============================================================================
bool checkRevolutionLastStand()
{
   int player = -1;
   int numAllies = 0;
   int numEliminatedAllies = 0;
   int numSurvivingAllies = 0;
   bool freeForAll = false;

   // Don't revolt if there are no surviving allies in a team game
   // Note that the AI player itself counts as its own ally
   for (player = 0; < cNumberPlayers)
   {
      if (kbIsPlayerAlly(player) == true) 
      {
         numAllies = numAllies + 1;
         if (kbHasPlayerLost(player) == false)
         {
            numSurvivingAllies = numSurvivingAllies + 1;
         }
         else
         {
            numEliminatedAllies = numEliminatedAllies + 1;
         }
      }
      if (kbGetPlayerTeam(player) > 2) 
      {
         freeForAll = true;
      }
   }
   if ((numSurvivingAllies < 2) && (numEliminatedAllies > 0))
      return(false);

   // Don't revolt in a non-Free-For-All game without teammates
   // Note that the AI player itself counts as its own ally
   if ((numAllies < 2) && (freeForAll == false))
      return(false);

   // Don't revolt if there are 10 or more military units left
   if (kbUnitCount(cMyID, cUnitTypeLogicalTypeLandMilitary, cUnitStateAlive) > 9) 
      return(false);

   // Don't revolt if there are not at least 20 setttlers etc. available to become militia
   if (kbUnitCount(cMyID, cUnitTypeSettler, cUnitStateAlive) + 
       kbUnitCount(cMyID, cUnitTypeSettlerNative, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeSettlerWagon, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeCoureur, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeCoureurCree, cUnitStateAlive) < 20)
      return(false);

   // Don't revolt if there are not at least 25 enemy units in our own main base
   vector mainBaseVec = cInvalidVector;
   mainBaseVec = kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));
   int enemyCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationEnemyNotGaia, cUnitStateAlive, mainBaseVec, 40.0);
   if (enemyCount < 25) 
      return(false);

   // Revolution is feasible if all preconditions are fulfilled
   return(true);
}


//==============================================================================
// checkRevolutionMegaLevy()
// Checks feasibility of a revolution aimed at defending an overrun base
//==============================================================================
bool checkRevolutionMegaLevy()
{
   int player = -1;
   int numEliminatedAllies = 0;
   int numSurvivingAllies = 0;

   // Don't revolt if there are no surviving allies
   // Note that the AI player itself counts as its own ally
   for (player = 0; < cNumberPlayers)
   {
      if ((kbIsPlayerAlly(player) == true) && (kbHasPlayerLost(player) == false))
      {
         numSurvivingAllies = numSurvivingAllies + 1;
      }
   }
   if (numSurvivingAllies < 2)
      return(false);

   // Don't revolt if there are not at least 2 factories or 4 banks available
   if ((kbUnitCount(cMyID, cUnitTypeFactory, cUnitStateAlive) < 2) &&
       (kbUnitCount(cMyID, cUnitTypeBank, cUnitStateAlive) < 4) &&
       (kbUnitCount(cMyID, cUnitTypeFactory, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeBank, cUnitStateAlive) < 3))
      return(false);

   // Don't revolt if there are not at least 40 setttlers etc. available to become militia
   if (kbUnitCount(cMyID, cUnitTypeSettler, cUnitStateAlive) + 
       kbUnitCount(cMyID, cUnitTypeSettlerNative, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeSettlerWagon, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeCoureur, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeCoureurCree, cUnitStateAlive) < 50)
      return(false);

   // Don't revolt if there are not at least 25 enemy units in our own main base
   vector mainBaseVec = cInvalidVector;
   mainBaseVec = kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));
   int enemyCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationEnemyNotGaia, cUnitStateAlive, mainBaseVec, 40.0);
   if (enemyCount < 25) 
      return(false);

   // Don't revolt if there are more than 10 own or allied units in our own main base
   int allyCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationAlly, cUnitStateAlive, mainBaseVec, 40.0);
   if (allyCount > 10) 
      return(false);

   // Revolution is feasible if all preconditions are fulfilled
   return(true);
}


//==============================================================================
// checkRevolutionMonopolyBreaker()
// Checks feasibility of a revolution aimed at breaking a trade monopoly
//==============================================================================
bool checkRevolutionMonopolyBreaker()
{
   int player = -1;
   int numEliminatedAllies = 0;
   int numSurvivingAllies = 0;

   // Don't revolt if there are no surviving allies
   // Note that the AI player itself counts as its own ally
   for (player = 0; < cNumberPlayers)
   {
      if ((kbIsPlayerAlly(player) == true) && (kbHasPlayerLost(player) == false))
      {
         numSurvivingAllies = numSurvivingAllies + 1;
      }
   }
   if (numSurvivingAllies < 2)
      return(false);

   // Don't revolt if there are not at least 40 setttlers etc. available to become militia
   if (kbUnitCount(cMyID, cUnitTypeSettler, cUnitStateAlive) + 
       kbUnitCount(cMyID, cUnitTypeSettlerNative, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeSettlerWagon, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeCoureur, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeCoureurCree, cUnitStateAlive) < 40)
      return(false);

   // Don't revolt if enemy trade monopoly timer is not running
   if ((gIsMonopolyRunning == false) || (gMonopolyTeam == kbGetPlayerTeam(cMyID)))
      return(false);

   // Don't revolt if there are more than two minutes left until trade monopoly timer expires
   if (gMonopolyEndTime - xsGetTime() > 120000)
      return(false);

   // Revolution is feasible if all preconditions are fulfilled
   return(true);
}

//==============================================================================
// checkRevolutionLastPush()
// Checks feasibility of a revolution aimed at econ Bias
//==============================================================================
bool checkRevolutionLastPush()
{
   // Don't revolt if there are not at least 2 factories or 4 banks available
   if ((kbUnitCount(cMyID, cUnitTypeFactory, cUnitStateAlive) < 2) &&
       (kbUnitCount(cMyID, cUnitTypeBank, cUnitStateAlive) < 4) &&
       (kbUnitCount(cMyID, cUnitTypeFactory, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeBank, cUnitStateAlive) < 3))
      return(false);

   // Don't revolt if there are not at least 40 setttlers etc. available to become militia
   if (kbUnitCount(cMyID, cUnitTypeSettler, cUnitStateAlive) + 
       kbUnitCount(cMyID, cUnitTypeSettlerNative, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeSettlerWagon, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeCoureur, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeCoureurCree, cUnitStateAlive) < 40)
      return(false);

   // Revolution is feasible if all preconditions are fulfilled
   return(true);
}



//==============================================================================
// revolutionaryShipmentHandler()
// Chooses appropriate revolutionary shipments
//==============================================================================
void revolutionaryShipmentHandler()
{
   int bestCard = -1;
   int cardRandomizer = 0;

   const int shipGatlings  = 0;
   const int shipMilitia   = 1;
   const int shipIronclads = 2;
   const int shipFortWagon = 3;

   // Ironclads are chosen whenever we expect naval action, unless we already have more than one
   // Otherwise, probability is 80 % gatling guns / 20 % militia; fort wagons are always ignored

   if ((kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0) &&
       (kbUnitCount(cMyID, cUnitTypexpIronclad) < 2) &&
       (aiPlanGetVariableInt(gFrigateMaintain, cTrainPlanNumberToMaintain, 0) > 0))
   {
      bestCard = shipIronclads;
   }
   else
   {
      cardRandomizer = aiRandInt(10);
      if (cardRandomizer < 8)
      {
         bestCard = shipGatlings;
      }
      else
      {
         bestCard = shipMilitia;
      }
   }
   if (bestCard >= 0)
   {
      aiEcho("Choosing card "+bestCard+", "+xsArrayGetString(gRevolutionaryCards, bestCard));
      aiHCDeckPlayCard(bestCard);
   }
}


//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
// Economy
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================

void startTCBuildPlan(vector location=cInvalidVector)
{
   if (cvOkToBuild == false)
      return;
   //echoMessage("Creating a TC build plan.");
   // Make a town center, pri 100, econ, main base, 1 builder.
   int buildPlan=aiPlanCreate("TC Build plan ", cPlanBuild);
   // What to build
   aiPlanSetVariableInt(buildPlan, cBuildPlanBuildingTypeID, 0, cUnitTypeTownCenter);
   // Priority.
   aiPlanSetDesiredPriority(buildPlan, 100);
   // Mil vs. Econ.
   aiPlanSetMilitary(buildPlan, false);
   aiPlanSetEconomy(buildPlan, true);
   // Escrow.
   aiPlanSetEscrowID(buildPlan, cEconomyEscrowID);
   // Builders.
   switch(kbGetCiv()) // Explorers, war chiefs, monks and econ unit build town centers
   {
      case cCivXPAztec:
      {
         if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
         { 
           aiPlanAddUnitType(buildPlan, cUnitTypexpAztecWarchief, 1, 1, 1);
           aiPlanAddUnitType(buildPlan, cUnitTypeSettlerNative, 1, 3, 6);
         }
         else
         { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
         break;
      }
      case cCivXPIroquois:
      {
         if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
         {
           aiPlanAddUnitType(buildPlan, cUnitTypexpIroquoisWarChief, 1, 1, 1);
           aiPlanAddUnitType(buildPlan, cUnitTypeSettlerNative, 1, 3, 6);
         }
         else
         { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
         break;
      }
      case cCivXPSioux:
      {
         if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
         {
           aiPlanAddUnitType(buildPlan, cUnitTypexpLakotaWarchief, 1, 1, 1);
           aiPlanAddUnitType(buildPlan, cUnitTypeSettlerNative, 1, 3, 6);
         }
         else
         { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
         break;
      }
      case cCivChinese:
      {
         if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
         {
           aiPlanAddUnitType(buildPlan, cUnitTypeypMonkChinese, 1, 1, 1);
           aiPlanAddUnitType(buildPlan, cUnitTypeypSettlerAsian, 1, 3, 6);
         }
         else
         { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
         break;
      }
      case cCivIndians:
      {
         if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
         {
           aiPlanAddUnitType(buildPlan, cUnitTypeypMonkIndian, 1, 1, 1);
           aiPlanAddUnitType(buildPlan, cUnitTypeypMonkIndian2, 1, 1, 1);
           aiPlanAddUnitType(buildPlan, cUnitTypeypSettlerIndian, 1, 3, 6);
         }
         else
         { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
         break;
      }
      case cCivJapanese:
      {
         if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
         {
           aiPlanAddUnitType(buildPlan, cUnitTypeypMonkJapanese, 1, 1, 1);
           aiPlanAddUnitType(buildPlan, cUnitTypeypMonkJapanese2, 1, 1, 1);
           aiPlanAddUnitType(buildPlan, cUnitTypeypSettlerJapanese, 1, 3, 6);
         }
         else
         { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
         break;
      }
      default:
      {
         if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
         { aiPlanAddUnitType(buildPlan, cUnitTypeExplorer, 1, 1, 1); }
         else
         { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
         break;
      }
   }

   // Instead of base ID or areas, use a center position and falloff.
   aiPlanSetVariableVector(buildPlan, cBuildPlanCenterPosition, 0, location);
   aiPlanSetVariableFloat(buildPlan, cBuildPlanCenterPositionDistance, 0, 50.00);

   // Add position influences for trees, gold, TCs.
   aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitTypeID, 4, true);
   aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitDistance, 4, true);
   aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitValue, 4, true);
   aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitFalloff, 4, true);
   
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 0, cUnitTypeWood);
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 0, 30.0);     // 30m range.
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 0, 10.0);        // 10 points per tree
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 0, cBPIFalloffLinear);  // Linear slope falloff
   
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 1, cUnitTypeMine);
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 1,  40.0);              // 40 meter range for gold
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 1, 300.0);                // 300 points each
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 1, cBPIFalloffLinear);  // Linear slope falloff
   
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 2, cUnitTypeMine);
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 2, 10.0);              // 10 meter inhibition to keep some space
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 2, -300.0);                // -300 points each
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 2, cBPIFalloffNone);      // Cliff falloff
   
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 3, cUnitTypeTownCenter);
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 3, 40.0);              // 40 meter inhibition around TCs.
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 3, -500.0);                // -500 points each
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 3, cBPIFalloffNone);      // Cliff falloff
      

   // Weight it to prefer the general starting neighborhood
   aiPlanSetVariableVector(buildPlan, cBuildPlanInfluencePosition, 0, location);    // Position influence for landing position
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluencePositionDistance, 0, 100.0);     // 100m range.
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluencePositionValue, 0, 300.0);        // 300 points max
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluencePositionFalloff, 0, cBPIFalloffLinear);  // Linear slope falloff
   

   
   aiPlanSetActive(buildPlan);
   aiPlanSetEventHandler(buildPlan, cPlanEventStateChange, "tcPlacedEventHandler");
   gTCBuildPlanID = buildPlan;   // Save in a global var so the rule can access it.


}


//==============================================================================
/* rule econUpgrades
   
   Make sure we always have an econ upgrade plan running.  Go cheapest first.
*/
//==============================================================================
rule econUpgrades
inactive
group tcComplete
minInterval 30
{
   int planState = -1;
   int techToGet = -1;
   float lowestCost = 1000000.0;
   static int gatherTargets = -1;   // Array to hold the list of things we gather from, i.e. mill, tree, etc.
   static int gatherTargetTypes = -1;  // Array.  If gatherTargets(x) == mill, then gatherTargetTypes(x) = cResourceFood.
   int target = -1;  // Index used to step through arrays
   static int startTime = -1;       // Time last plan was started, to make sure we're not waiting on an obsolete tech.
   
   if (gatherTargets < 0)  // Array not initialized
   {  // Set up our list of target units (what we gather from) and their resource categories.
      gatherTargets = xsArrayCreateInt(10, -1, "Gather Targets");
      gatherTargetTypes = xsArrayCreateInt(10, -1, "Gather Target Types");
      
      xsArraySetInt(gatherTargets, 0, gFarmUnit); // Mills and farms generate food
      xsArraySetInt(gatherTargetTypes, 0, cResourceFood);
      
      xsArraySetInt(gatherTargets, 1, cUnitTypeTree); // Trees generate wood
      xsArraySetInt(gatherTargetTypes, 1, cResourceWood);
      
      xsArraySetInt(gatherTargets, 2, cUnitTypeAbstractMine); // Mines generate gold
      xsArraySetInt(gatherTargetTypes, 2, cResourceGold);
      
      if ( (kbGetCiv() != cCivJapanese) && (kbGetCiv() != cCivSPCJapanese) && (kbGetCiv() != cCivSPCJapaneseEnemy) ) {
        xsArraySetInt(gatherTargets, 3, cUnitTypeHuntable);   // Huntables generate food, BHG: not for the japanese!
      }
      xsArraySetInt(gatherTargetTypes, 3, cResourceFood);
      
      xsArraySetInt(gatherTargets, 4, cUnitTypeFish);       // Fish generate food
      xsArraySetInt(gatherTargetTypes, 4, cResourceFood);
      
      xsArraySetInt(gatherTargets, 5, gPlantationUnit);       // Plantations generate gold
      xsArraySetInt(gatherTargetTypes, 5, cResourceGold);
   }
 
   planState = aiPlanGetState(gEconUpgradePlan);

   if ( planState < 0 )
   {  // Plan is done or doesn't exist
      aiPlanDestroy(gEconUpgradePlan); // Nuke the old one, if it exists
      startTime = -1;

      int techID = -1;        // The cheapest tech for the current target unit type      
      float rawCost = -1.0;   // The cost of the upgrade
      float relCost = -1.0;   // The cost, relative to some estimate of the number of gatherers
      float numGatherers = -1.0;  // Number of gatherers assigned to the resource type (i.e food)
      
      /*
         Step through the array of gather targets.  For each, calculate the cost of the upgrade
         relative to the number of gatherers that would benefit.  Choose the one with the best 
         payoff.
      */
      for (target=0; < 10)    
      {
         if (xsArrayGetInt(gatherTargets, target) < 0)   // No target specified
            continue;
         techID =  kbTechTreeGetCheapestEconUpgrade(xsArrayGetInt(gatherTargets, target));
         if (techID < 0)   // No tech available for this target type
            continue;
         rawCost = kbGetTechAICost(techID);
         if (rawCost == 0.0)
            rawCost = -1.0;
         
         // Percent of gatherers assigned to this resource, times the number of econ units.
         numGatherers = aiGetResourceGathererPercentage( xsArrayGetInt(gatherTargetTypes, target), cRGPActual ) *  kbUnitCount(cMyID, gEconUnit, cUnitStateAlive);
         
         // Calculate the relative cost
         switch( xsArrayGetInt(gatherTargets, target) )
         {
            case cUnitTypeHuntable:
            {
               // Assume all food gatherers are hunting unless we have a mill.
               relCost = rawCost / numGatherers;
                if (kbUnitCount(cMyID, gFarmUnit, cUnitStateAlive) > 0)
                  relCost = -1.0;   // Do NOT get hunting dogs once we're farming
               break;
            }
            case cUnitTypeFish:
            {
               numGatherers = kbUnitCount(cMyID, gFishingUnit, cUnitStateAlive);
               if ( numGatherers > 0.0)
                  relCost = rawCost / numGatherers;
               else
                  relCost = -1.0;
               break;
            }
            default: // All other resources
            {
               if (numGatherers > 0.0)
                  relCost = rawCost / numGatherers;
               else
                  relCost = -1.0;                  
               break;
            }
         }
         
         // We now have the relative cost for the cheapest tech that gathers from this target type.
         // See if it's > 0, and the cheapest so far.  If so, save the stats, as long as it's obtainable.
         
         if ( (techID >= 0) && (relCost < lowestCost) && (relCost > 0.0) && (kbTechGetStatus(techID) == cTechStatusObtainable) )
         {
            lowestCost = relCost;
            techToGet = techID;
         }
      }
      
      
      if ( (techToGet >= 0) && (lowestCost < 40.0) )  // We have a tech, and it doesn't cost more than 40 per gatherer
      {
    
         // If a plan has been running for 3 minutes...
         if ( (startTime > 0) && (xsGetTime() > (startTime + 180000)) )
         {
            // If it's still the tech we want, reset the start time counter and quit out.  Otherwise, kill it.
            if (aiPlanGetVariableInt(gEconUpgradePlan, cProgressionPlanGoalTechID, 0) == techToGet)
            {
               startTime = xsGetTime();
               return;
            }
            else
            {
               aiEcho("***** Destroying econ upgrade plan # "+gEconUpgradePlan+" because it has been running more than 3 minutes.");
               aiPlanDestroy(gEconUpgradePlan);
            }
         }
         // Plan doesn't exist, or we just killed it due to timeout....
         gEconUpgradePlan = aiPlanCreate("Econ upgrade tech "+techToGet, cPlanProgression);
         aiPlanSetVariableInt(gEconUpgradePlan, cProgressionPlanGoalTechID, 0, techToGet);
         aiPlanSetDesiredPriority(gEconUpgradePlan, 92);
         aiPlanSetEscrowID(gEconUpgradePlan, cEconomyEscrowID);
         aiPlanSetBaseID(gEconUpgradePlan, kbBaseGetMainID(cMyID));
         aiPlanSetActive(gEconUpgradePlan);
         startTime = xsGetTime();

         aiEcho("                **** Creating upgrade plan for "+kbGetTechName(techToGet)+" is "+gEconUpgradePlan);
         //aiEcho("                **** Status for tech "+kbGetTechName(techToGet)+" is "+kbTechGetStatus(techToGet));
         //aiEcho("                **** Relative cost (score) was lowest at "+lowestCost);
      }
   }
   // Otherwise, if a plan already existed, let it run...
}


/*

rule crateMonitor
inactive
group tcComplete
minInterval 5
{
//artheru:
return;
   static int cratePlanID = -1;
   int numCrates = -1;
   int gatherersWanted = -1;
   
   // If we have a main base, count the number of crates in it
   if (kbBaseGetMainID(cMyID) < 0)
      return;
   
   // We have a main base, count the crates
   numCrates = kbUnitCount(cMyID, cUnitTypeAbstractResourceCrate,cUnitStateAlive) + kbUnitCount(0, cUnitTypeAbstractResourceCrate,cUnitStateAlive);
   gatherersWanted = 1;  // At least one, plus one for each 3 crates over 1.
   
   if (numCrates == 0)
      gatherersWanted = 0;
   
   if (aiPlanGetState(cratePlanID) == -1)
   {
      aiEcho("Crate gather plan "+cratePlanID+" is invalid.");
      aiPlanDestroy(cratePlanID);
      cratePlanID = -1;
   }
   if (cratePlanID < 0)
   {  // Initialize the plan
      cratePlanID = aiPlanCreate("Main Base Crate", cPlanGather);
      aiPlanSetBaseID(cratePlanID, kbBaseGetMainID(cMyID));
      aiPlanSetVariableInt(cratePlanID, cGatherPlanResourceUnitTypeFilter, 0, cUnitTypeAbstractResourceCrate);
      aiPlanSetVariableInt(cratePlanID, cGatherPlanResourceType, 0, cAllResources);
		//aiPlanSetVariableInt(cratePlanID, cGatherPlanFindNewResourceTimeOut, 0, 20000);
      aiPlanAddUnitType(cratePlanID, gEconUnit, gatherersWanted, gatherersWanted, gatherersWanted);
      aiPlanSetDesiredPriority(cratePlanID, 85);
      aiPlanSetActive(cratePlanID);
      aiEcho("Activated crate gather plan "+cratePlanID);
   }
   
   aiPlanAddUnitType(cratePlanID, gEconUnit, gatherersWanted, gatherersWanted, gatherersWanted);

}

*/

//==============================================================================
// getLowestResourceAmount
/*
   Returns the amount of the resource that's in shortest supply.
   Note:  It does not identify WHICH resource, it just returns the lowest amount.
   Food, wood and gold/coin are considered, others are not.
*/
//==============================================================================

float getLowestResourceAmount()
{
   float retVal = 1000000.0;
   if (kbResourceGet(cResourceWood) < retVal)
      retVal = kbResourceGet(cResourceWood);
   if (kbResourceGet(cResourceFood) < retVal)
      retVal = kbResourceGet(cResourceFood);
   if (kbResourceGet(cResourceGold) < retVal)
      retVal = kbResourceGet(cResourceGold);
   return(retVal);   
}

//==============================================================================
// getHighestResourceAmount
/*
   Returns the amount of the resource that's in shortest supply.
   Note:  It does not identify WHICH resource, it just returns the highest amount.
   Food, wood and gold/coin are considered, others are not.
*/
//==============================================================================

float getHighestResourceAmount()
{
   float retVal = 0.0;
   if (kbResourceGet(cResourceWood) > retVal)
      retVal = kbResourceGet(cResourceWood);
   if (kbResourceGet(cResourceFood) > retVal)
      retVal = kbResourceGet(cResourceFood);
   if (kbResourceGet(cResourceGold) > retVal)
      retVal = kbResourceGet(cResourceGold);
   return(retVal);   
}

//==============================================================================
// updateSettlerCounts
/*
   Set the settler maintain plan according to age and our behavior traits  
*/
//==============================================================================
void updateSettlerCounts(void)
{
   int normalTarget = xsArrayGetInt(gTargetSettlerCounts, kbGetAge());
   int modifiedTarget = normalTarget;
   
   switch (kbGetAge())
   {
      case cAge1:
      {
         modifiedTarget = normalTarget - (5.0 * btRushBoom);   // Rushers five less, boomers 5 more
         break;
      }
      case cAge2:
      {
         modifiedTarget = normalTarget + (5.0 * btRushBoom);  //  Rushers 5 more (stay in age 2 longer), boomers 5 less (go to age 3 ASAP)
         break;
      }
      case cAge3:
      {
         modifiedTarget = normalTarget - (10.0 * btRushBoom);  //  Boomers 10 more, i.e. boom now means 'more econ'.
         break;
      }
      case cAge4:
      {
         modifiedTarget = normalTarget - (10.0 * btRushBoom);
         break;
      }
      case cAge5:
      {
         modifiedTarget = normalTarget - (10.0 * btRushBoom);
         break;
      }
   }
   if (kbGetCiv() != cCivOttomans)
      aiPlanSetVariableInt(gSettlerMaintainPlan, cTrainPlanNumberToMaintain, 0, modifiedTarget);
   else
      aiPlanSetVariableInt(gSettlerMaintainPlan, cTrainPlanNumberToMaintain, 0, 0);
}


//==============================================================================
// updateEscrows
/*
   Set the econ/mil escrow balances based on age, personality and our current
   settler pop compared to what we want to have.

   When we lose a lot of settlers, the economy escrow is expanded and the 
   military escrow is reduced until the econ recovers.  
*/
//==============================================================================
void updateEscrows(void)
{
   float econPercent = 0.0; 
   float milPercent = 0.0;
   float villTarget = xsArrayGetInt(gTargetSettlerCounts, kbGetAge());  // How many we want to have this age
   float villCount = kbUnitCount(cMyID, gEconUnit, cUnitStateABQ);   // How many do we have?
   float villRatio = 1.00;   
   if (villTarget > 0.0)
      villRatio = villCount / villTarget;  // Actual over desired.
   float villShortfall = 1.0 - villRatio;  // 0.0 means at target, 0.3 means 30% short of target
   
   switch(kbGetAge())
   {
      case cAge1:
      {
         econPercent = 0.90 - (0.1 * btRushBoom);  // 80% rushers, 100% boomers
         break;
      }
      case cAge2:
      {
         econPercent = 0.45 - (0.35 * btRushBoom);  // 10% rushers, 80% boomers
         break;
      }
      case cAge3:
      {
         econPercent = 0.30 - (0.15 * btRushBoom) + (0.3 * villShortfall);  // 0.3,  +/- up to 0.15, + up to 0.3 if we have no vills.
         // At 1/2 our target vill pop, this works out to 0.45 +/- rushBoom effect.  At vill pop, it's 0.3 +/- rushBoom factor.
         break;
      }
      case cAge4:
      {
         econPercent = 0.30 - (0.1 * btRushBoom) + (0.3 * villShortfall);
         break;
      }
      case cAge5:
      {
         econPercent = 0.20 - (0.1 * btRushBoom) + (0.3 * villShortfall);
         break;
      }
   }
   if (econPercent < 0.0)
      econPercent = 0.0;
   if (econPercent > 0.8)
      econPercent = 0.8;
   milPercent = 0.8 - econPercent;
   if (kbGetAge() == cAge1)
      milPercent = 0.0;
   
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceFood, econPercent);
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceWood, econPercent/2.0);   // Leave most wood at the root  
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceGold, econPercent);
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceFame, 0.0);
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceSkillPoints, 0.0);
   kbEscrowSetCap(cEconomyEscrowID, cResourceFood, 1200);    // Save for age upgrades
   kbEscrowSetCap(cEconomyEscrowID, cResourceWood, 500);
   if (kbGetAge() >= cAge3)
      kbEscrowSetCap(cEconomyEscrowID, cResourceWood, 800); // Needed for mills, plantations
   kbEscrowSetCap(cEconomyEscrowID, cResourceGold, 1000);   // Save for age upgrades
   if (kbGetCiv() == cCivDutch)
   {
      kbEscrowSetCap(cEconomyEscrowID, cResourceFood, 350); // Needed for banks
      kbEscrowSetCap(cEconomyEscrowID, cResourceWood, 350);
   }
   else if ( (cvMaxAge > -1) && (kbGetAge() >= cvMaxAge) )
   {  // Not dutch, and not facing age upgrade, so reduce food/gold withholding
      kbEscrowSetCap(cEconomyEscrowID, cResourceFood, 250); 
      kbEscrowSetCap(cEconomyEscrowID, cResourceWood, 250);      
   }
  
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceFood, milPercent);
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceWood, milPercent/2.0);  
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceGold, milPercent);
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceFame, 0.0);
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceSkillPoints, 0.0);
   kbEscrowSetCap(cMilitaryEscrowID, cResourceFood, 300);
   kbEscrowSetCap(cMilitaryEscrowID, cResourceWood, 200);
   kbEscrowSetCap(cMilitaryEscrowID, cResourceGold, 300);
  
   kbEscrowSetPercentage(gVPEscrowID, cResourceFood, 0.0);        
// kbEscrowSetPercentage(gVPEscrowID, cResourceWood, 0.2);        
// kbEscrowSetPercentage(gVPEscrowID, cResourceGold, 0.15);
   kbEscrowSetPercentage(gVPEscrowID, cResourceFame, 0.0);
   kbEscrowSetPercentage(gVPEscrowID, cResourceSkillPoints, 0.0);
   kbEscrowSetCap(gVPEscrowID, cResourceFood, 0);
   kbEscrowSetCap(gVPEscrowID, cResourceWood, 300);
   kbEscrowSetCap(gVPEscrowID, cResourceGold, 200);
   
   kbEscrowSetPercentage(gUpgradeEscrowID, cResourceFood, 0.0);
   kbEscrowSetPercentage(gUpgradeEscrowID, cResourceWood, 0.0);
   kbEscrowSetPercentage(gUpgradeEscrowID, cResourceGold, 0.0);
   kbEscrowSetPercentage(gUpgradeEscrowID, cResourceShips, 0.0);
}



void selectRicePaddyTactics(void){
   if (civIsAsian() == false)
   {
      return;
   }
   
   //gotta get all of the paddies
   static int paddyQueryID=-1;
   
   //If we don't have the query yet, create one.
   if (paddyQueryID < 0)
   {
      paddyQueryID=kbUnitQueryCreate("paddyGetUnitQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(paddyQueryID, true);
   }

   //Define a query to get all matching units
   if (paddyQueryID != -1)
   {
       kbUnitQuerySetPlayerRelation(paddyQueryID, -1);
       kbUnitQuerySetPlayerID(paddyQueryID, cMyID);
       kbUnitQuerySetUnitType(paddyQueryID, cUnitTypeypRicePaddy);
       kbUnitQuerySetState(paddyQueryID, cUnitStateAlive);
   }
   else
   return;

    kbUnitQueryResetResults(paddyQueryID);
    int numberFound=kbUnitQueryExecute(paddyQueryID);
    int index = 0;
   
    // Select a tactic
    static int lastricefood = 0;
   
    int foodriceNeeded = 1 + kbUnitCount(cMyID, gFarmUnit, cUnitStateAlive)*0.5;
    float percentOnGold = aiGetResourceGathererPercentage( cResourceGold, cRGPActual );
   
    if (percentOnGold < 0.90) 
    {  foodriceNeeded--;  }
  
    if (foodriceNeeded != lastricefood)
    {
        lastricefood = foodriceNeeded;
        for (index = 0; <foodriceNeeded) 
        {
           //change the rice to food
           aiUnitSetTactic(kbUnitQueryGetResult(paddyQueryID, index), cTacticPaddyFood);
        }
        for (index = foodriceNeeded; < numberFound) 
        {
           //change the rice to coin
           aiUnitSetTactic(kbUnitQueryGetResult(paddyQueryID, index), cTacticPaddyCoin);
        }
    }
}
//==============================================================================
// updateGatherers
/*
Full control of villagers.
*/
//==============================================================================
void updateGatherers(void)
{	
	//An Optimal Gatherer assignment is a weighted min-flow problem, and it's troublesome to implement in xs style... so approximate algorithm implemented, that is:
	//from most needed res, for each idle gatherer calculate min distance to target resource, then pick the gatherer having min distance, assign the task, until no available gatherer. if assignment is very unbalanced, choose a 
	
	int totalVillagers=kbUnitCount(cMyID, cUnitTypeAbstractVillager, cUnitStateAlive)-kbUnitCount(cMyID,cUnitTypeAbstractFishingBoat,cUnitStateAlive);
	int nGold=weightGold*totalVillagers;
	int nFood=weightFood*totalVillagers;
	int nWood=weightWood*totalVillagers;
	int nCrate=0;
	
	//Find Villagers:
	static int unitQueryID=-1;	//If we don't have the query yet, create one.
	if (unitQueryID < 0){
		unitQueryID=kbUnitQueryCreate("gathererUpdaterQuery");
		kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
	}
	if (unitQueryID!=-1){
        kbUnitQuerySetPlayerRelation(unitQueryID, -1);
      	kbUnitQuerySetPlayerID(unitQueryID, cMyID);
		kbUnitQuerySetUnitType(unitQueryID, cUnitTypeAbstractVillager);
		kbUnitQuerySetState(unitQueryID, cUnitStateAlive);
	}
	kbUnitQueryResetResults(unitQueryID);
	int vFound=kbUnitQueryExecute(unitQueryID);
		
	//tmp is debug string.
	string tmp="";
	//tmp="("+nFood+"/"+nWood+"/"+nGold+" -> ";
	
	
	//See how many gatherer is working:
    int villagerID=-1;
	for(index=0;<vFound){
		villagerID=kbUnitQueryGetResult(unitQueryID,index);
		//status=kbUnitGetActionType(villagerID);
		if (kbUnitIsType(kbUnitGetTargetUnitID(villagerID),cUnitTypeFood)) 	nFood=nFood-1;
		if (kbUnitIsType(kbUnitGetTargetUnitID(villagerID),cUnitTypeWood)) nWood=nWood-1;
		if (kbUnitIsType(kbUnitGetTargetUnitID(villagerID),cUnitTypeGold)) nGold=nGold-1;
		if (kbUnitIsType(kbUnitGetTargetUnitID(villagerID),cUnitTypeAbstractResourceCrate))
			nCrate=nCrate+1;
			
			/*
		if (kbUnitGetActionType(villagerID)==-1)
			aiTaskUnitWork(getUnit(cUnitTypeTownCenter),villagerID);
			*/
		//What? You want 5 villagers to go and build just a TP? 
		//What? you want all villagers get inside the TC while there is only ONE enemy?! disabled by diable townbell function... so human players wont get this too...
		//let's just kill it.
		int planID=kbUnitGetPlanID(villagerID);
		if (planID>=0 && aiPlanGetNumberUnits(planID,gEconUnit)>1){
			//aiPlanDestroy(planID);//just don't do that...
			//aiTaskUnitMove(villagerID,kbUnitGetPosition(villagerID));//emergency stop!
			//aiPlanSetActive(planID,false);
			//tmp=tmp+planID+aiPlanGetName(planID)+">>"+aiPlanGetType(planID)+":"+aiPlanGetNumberUnits(planID,gEconUnit)+" "+aiPlanGetState(planID)+"\n";
			//aiPlanAddUnitType(planID,gEconUnit,0,0,1);
			//aiPlanAddUnitType(planID,gExplorerUnit,1,1,1);
			//aiTaskMove(
			//aiPlanSetActive(planID,true);
		}
		
		//int i=cPlanRepair;
		//tmp=tmp+kbUnitIsType(kbUnitGetTargetUnitID(villagerID),cUnitTypeFood)+",";
	}
	
	//Check for Reassignment, including engage.
	int compensated=0;
	int max=nFood;
	if (nWood>max) max=nWood;
	if (nGold>max) max=nGold;
	int min=nFood;
	if (nWood<min) min=nWood;
	if (nGold<min) min=nGold;
	if (max-min>((kbGetAge()*kbGetAge())*0.5+kbGetAge()*1.7+3))
		compensated=kbGetAge()+1;
	
	//tmp=tmp+"|"+nFood+"/"+nWood+"/"+nGold+"/"+nCrate+")"+compensated+" => ";
	
	static int arrID=-1;
	static int arrDist=-1;
	static int arrResID=-1;
	static int arrAssigned=-1;
	static int arrDebug=-1;
	if (arrID==-1) {
		arrID=xsArrayCreateInt(100,0,"arrVillagerID");
		arrDist=xsArrayCreateFloat(100,0,"arrVillagerResDist");
		arrResID=xsArrayCreateInt(100,0,"arrVillagerResID");
		arrAssigned=xsArrayCreateInt(100,0,"arrVillagerAssigned");
		arrDebug=xsArrayCreateInt(100,0,"arrVillagerDebug");
	}
	
	int resID=-1;
	int nAvail=0;
	int nAssigned=0;
	bool notokFood=false;
	bool notokWood=false;
	bool notokGold=false;
	int bestWood=-1;
	int bestGold=-1;
	int bestFood=-1;
	float WoodDist=999;
	float GoldDist=999;
	float FoodDist=999;
	int debugItem=0;
	int status=0;
	
	vector vecRes=cInvalidVector;
	vector vecVillager=cInvalidVector;
	
	
	float tmpDist=0;
	
	//micro operation to avoid enemy contact, or engage a micro combat.
	for(index=0;<vFound){
		villagerID=kbUnitQueryGetResult(unitQueryID,index);
		if (kbUnitIsType(villagerID,cUnitTypeAbstractFishingBoat))
			continue; //not settler...
			
		int iTmp=0;
		//init:
		vecVillager=kbUnitGetPosition(villagerID);
		status=kbUnitGetActionType(villagerID);
		if (status==0) continue;
		if (status==9){ //Dont't bother if we have a plan... damn.
			if (kbUnitGetPlanID(villagerID)>0) continue;
		}
		
		bool isEngaged=false;
		for(iTmp=0;<nEngaged){
			if (xsArrayGetInt(arrEngaged,iTmp)==villagerID){
				xsArraySetInt(arrAssigned,nAssigned,villagerID);
				nAssigned=nAssigned+1;
				isEngaged=true;
				break;
			}
		}
		if (isEngaged) continue;
		//evaluate from:
		//if enemy is attacking us
		//if i'm close to ally military
		//the strength ratio nearby
		//Goal is to keep working + kill enemy + stay alive
		//Take actions:
		//Run away
		//Engage
		//Ignore
		int nAttacker=kbUnitGetNumberWorkers(villagerID);
		float enemyHPatt=0;
		float myHP=kbUnitGetCurrentHitpoints(villagerID);
		int nearestAttacker=-1;
		float AttackerDist=999;
		int enemyID=-1;
		int decideTarget=-1;
		for(iTmp=0;<nAttacker){
		//to do: implement as a function...
			enemyID=kbUnitGetWorkerID(villagerID,iTmp);
			enemyHPatt=enemyHPatt+getRelativeVillagerHP(enemyID);
			tmpDist=distance(vecVillager,kbUnitGetPosition(enemyID));
			if (tmpDist<AttackerDist){ AttackerDist=tmpDist; nearestAttacker=enemyID;}
		}
		float allyHPtot=getlocHP(vecVillager,26,cPlayerRelationAlly);
		float enemyHPtot=getlocHP(vecVillager,26);
		float settlerHPtot=getlocHP(vecVillager,26,cPlayerRelationAlly,gEconUnit);//Just in range that settler can come and help.
		
		int flag=0; //Ignore
		if (enemyHPtot>0)
			tmp=tmp+allyHPtot+","+settlerHPtot+","+enemyHPatt+","+enemyHPtot;
		if (nAttacker>=3 && enemyHPatt>myHP){
			tmp=tmp+"Suffer";
			flag=1;//run away
		}
		if (enemyHPtot>allyHPtot && enemyHPtot>250){
			if (enemyHPtot>settlerHPtot+allyHPtot) {
				tmp=tmp+"Outrun";
				flag=1;
			}
			else {
				if (enemyHPtot<settlerHPtot*2.3){
					tmp=tmp+"CanWin";
					flag=2; //engage.
				}
				else{
					tmp=tmp+"MayHurt";
					flag=1;
				}
			}
		}else
		if (nAttacker>0 && enemyHPatt<myHP) {
			tmp=tmp+"FightB";
			decideTarget=enemyID;
			flag=2;
		}
		for(iTmp=0;<nEngaged){
			enemyID=xsArrayGetInt(arrEngagedTarget,iTmp);
			if (distance(kbUnitGetPosition(enemyID),vecVillager)<24 &&
				getRelativeVillagerHP(enemyID)<myHP+100){
				flag=2;
				decideTarget=enemyID;
				break;
			}
		}
		
		if (flag==2){//Engage:
			if (decideTarget==-1)
				decideTarget=getClosestUnitByLocation(cUnitTypeLogicalTypeLandMilitary,cPlayerRelationEnemyNotGaia,cUnitStateAlive,vecVillager);
			aiTaskUnitWork(villagerID,decideTarget);
			engageUnit(villagerID,decideTarget,xsGetTime());
			tmp=tmp+",E"+decideTarget+":"+kbGetUnitTypeName(kbGetUnitBaseTypeID(decideTarget))+"@"+nEngaged+"\n";
		} else if (flag==1){//Run away
			tmp=tmp+",Flee!\n";
			aiTaskUnitMove(villagerID, getFleeVec(vecVillager,26));
		} else {
			if (enemyHPtot>0)
				tmp=tmp+",ignore\n";
			continue;//Ignore..
		}
		xsArraySetInt(arrAssigned,nAssigned,villagerID);
		nAssigned=nAssigned+1;
	}
	
	
	static int openCrateTime=-999999;
	static int opener=-1;
	//tmp="AT:"+nAssigned+",";
	//Then, assign task.
	int loop=0;
	for(loop=0;<vFound){
		nAvail=0;
		for(index=0;<vFound) {
			villagerID=kbUnitQueryGetResult(unitQueryID,index);
			if (kbUnitIsType(villagerID,cUnitTypeAbstractFishingBoat))
				continue; //not settler...
			
			//init:
			status=-1;
			vecVillager=kbUnitGetPosition(villagerID);
			status=kbUnitGetActionType(villagerID);
			
			//If has assigned task, go away.
			int tmpI=0; bool quit=false;
			for(tmpI=0;<nAssigned)
				if (xsArrayGetInt(arrAssigned,tmpI)==villagerID){
					quit=true;
					break;
				}
			if (quit) continue;
			
			//if busy building
			if (status==0) continue;
			if (status==9){ //Dont't bother building plans...
				if (kbUnitGetPlanID(villagerID)>0) continue;
				//Also don't bother who is just assigned to gather crate:
				if (openCrateTime+20000>xsGetTime() && opener==villagerID)
					continue;
			}
			
			//Get Position
			int nearBase=kbFindClosestBase(cMyID, vecVillager);
			vector nearBaseVec = kbBaseGetLocation(cMyID, nearBase);
			
			if (nearBase!=-1 && distance(vecVillager,nearBaseVec)>75+kbGetAge()*10 && getlocHP(nearBaseVec,60)>kbUnitGetCurrentHitpoints(villagerID))
				vecVillager=nearBaseVec; //Too far, go home and be safer!
				
			//Check Crate first of all, crate always have highest priority. however only one gatherer will be ok(at most kbgetage())
			//There might be some bug in age3y.exe for crate.... patch required...
			resID=getWorkItem(cPlayerRelationAny,cUnitTypeAbstractResourceCrate,vecVillager,30,1,cUnitStateAlive);
			if (resID!=-1
				//&& kbGetUnitBaseTypeID(resID)!=-1 //Patch: if cannot get basetype, then pass.
				&& nCrate<=kbGetAge()
				&& (xsGetTime()-20000>openCrateTime) //Patch: since i cannot know how many crate openers are assigned right now... i can delay the assignment...
				&& status!=0 && status!=9 
				//&& kbUnitIsType(kbUnitGetTargetUnitID(villagerID),cUnitTypeAbstractResourceCrate)==false
				) {
				xsArraySetInt(arrID,nAvail,villagerID);
				xsArraySetInt(arrResID,nAvail,resID);
				xsArraySetFloat(arrDist,nAvail,distance(vecVillager,kbUnitGetPosition(resID)));
				
				debugItem=0;
				xsArraySetInt(arrDebug,nAvail,debugItem);
				
				nAvail=nAvail+1;
				continue;
			}
			
			//If compensated and busy, go away
			if (compensated<=0 && status!=7 || kbUnitIsType(kbUnitGetTargetUnitID(villagerID),cUnitTypeAbstractResourceCrate)==true) continue;
			
			//If cannot compensate, go away
			if (status!=7){
				if (kbUnitIsType(kbUnitGetTargetUnitID(villagerID),cUnitTypeFood) && nFood>0) 
				continue;
				if (kbUnitIsType(kbUnitGetTargetUnitID(villagerID),cUnitTypeWood) && nWood>0)
				continue;
				if (kbUnitIsType(kbUnitGetTargetUnitID(villagerID),cUnitTypeGold) && nGold>0)
				continue;
			}
						
			//then the normal resources.
			notokFood=false; 
			notokWood=false;
			notokGold=false;
			bestWood=-1;
			bestGold=-1;
			bestFood=-1;
			WoodDist=999;
			GoldDist=999;
			FoodDist=999;
			
			
			//Check Wood:
			resID=getWorkItem(cPlayerRelationAny,cUnitTypeTree,vecVillager,80+kbGetAge()*10,7,cUnitStateAny);
			if (nWood>=nGold && nWood>=nFood && resID>0){
				xsArraySetInt(arrID,nAvail,villagerID);
				xsArraySetInt(arrResID,nAvail,resID);
				xsArraySetFloat(arrDist,nAvail,distance(vecVillager,kbUnitGetPosition(resID)));
				nAvail=nAvail+1;
				
				debugItem=1;
				xsArraySetInt(arrDebug,nAvail,debugItem);
				
				continue; //We Found Wood.
			}
			notokWood=true; bestWood=resID; WoodDist=distance(vecVillager,kbUnitGetPosition(resID));
			
			//Check Food:
			resID=-1;
			int minDist=999;
			tmpDist=0;
			int tmpID=-1;
			if (kbGetCiv()!=cCivJapanese){
				//Huntables:
				tmpID=getWorkItem(cPlayerRelationAny,cUnitTypeHuntable,vecVillager,55,5,cUnitStateAny);
				tmpDist=distance(kbUnitGetPosition(tmpID),vecVillager);
				if (tmpDist<minDist) {resID=tmpID; minDist=tmpDist;debugItem=2;}
			}
			//Berry:
			if (resID==-1){
				tmpID=getWorkItem(cPlayerRelationAny,cUnitTypeAbstractFruit,vecVillager,55,5,cUnitStateAlive);
				tmpDist=distance(kbUnitGetPosition(tmpID),vecVillager);
				if (tmpDist<minDist) {resID=tmpID; minDist=tmpDist;debugItem=3;}
			}
			if (resID==-1){
				tmpID=getWorkItem(cPlayerRelationAny,cUnitTypeypBerryBuilding,vecVillager,55,20,cUnitStateAlive);
				tmpDist=distance(kbUnitGetPosition(tmpID),vecVillager);
				if (tmpDist<minDist) {resID=tmpID; minDist=tmpDist;debugItem=3;}
			}
			//Herdables:
			if ((kbGetCiv() != cCivIndians) && (kbGetCiv() != cCivJapanese) && (xsGetTime()>200000)){
				tmpID=getWorkItem(cPlayerRelationAny,cUnitTypeHerdable,vecVillager,50,3,cUnitStateAlive);
				tmpDist=distance(kbUnitGetPosition(tmpID),vecVillager);
				if (tmpDist<minDist) {resID=tmpID; minDist=tmpDist;debugItem=4;}
			}
			//Farm:
			tmpID=getWorkItem(cPlayerRelationAlly,cUnitTypeFarm,vecVillager,60+kbGetAge()*10,7);
			tmpDist=distance(kbUnitGetPosition(tmpID),vecVillager);
			if (tmpDist<minDist) {resID=tmpID; minDist=tmpDist;debugItem=5;}
			//Mill:
			tmpID=getWorkItem(cPlayerRelationAlly,cUnitTypeMill,vecVillager,60+kbGetAge()*10,7);
			tmpDist=distance(kbUnitGetPosition(tmpID),vecVillager);
			if (tmpDist<minDist) {resID=tmpID; minDist=tmpDist;debugItem=6;}
			//RicePaddy:
			tmpID=getWorkItem(cPlayerRelationAlly,cUnitTypeypRicePaddy,vecVillager,60+kbGetAge()*10,10);
			tmpDist=distance(kbUnitGetPosition(tmpID),vecVillager);
			if (tmpDist<minDist) {resID=tmpID; minDist=tmpDist;debugItem=7;}
			
			if ((nFood>=nWood || notokWood==true) && nFood>=nGold && resID>0){
				xsArraySetInt(arrID,nAvail,villagerID);
				xsArraySetInt(arrResID,nAvail,resID);
				xsArraySetFloat(arrDist,nAvail,distance(vecVillager,kbUnitGetPosition(resID)));
				
				xsArraySetInt(arrDebug,nAvail,debugItem);
				
				nAvail=nAvail+1;
				continue;
			}
			notokFood=true; bestFood=resID; FoodDist=minDist;
			
			
			minDist=999;
			tmpDist=0;
			resID=-1;
			//Check Gold:
			//Mine:
			tmpID=getWorkItem(cPlayerRelationAny,cUnitTypeMinedResource,vecVillager,50+kbGetAge()*10,15);
			tmpDist=distance(kbUnitGetPosition(tmpID),vecVillager);
			if (tmpDist<minDist) {resID=tmpID; minDist=tmpDist;debugItem=8;}
			//my plantation:
			tmpID=getWorkItem(cMyID,gPlantationUnit,vecVillager,40+kbGetAge()*10,7);
			tmpDist=distance(kbUnitGetPosition(tmpID),vecVillager);
			if (tmpDist<minDist) {resID=tmpID; minDist=tmpDist;debugItem=9;}
			//ally's plantation:
			tmpID=getWorkItem(cPlayerRelationAlly,cUnitTypeGold,vecVillager,40+kbGetAge()*10,7);
			tmpDist=distance(kbUnitGetPosition(tmpID),vecVillager);
			if (tmpDist<minDist) {resID=tmpID; minDist=tmpDist;debugItem=10;}
			
			if ((nGold>=nWood || notokWood==true) && (nGold>=nFood || notokFood==true) && resID>0){
				xsArraySetInt(arrID,nAvail,villagerID);
				xsArraySetInt(arrResID,nAvail,resID);
				xsArraySetFloat(arrDist,nAvail,distance(vecVillager,kbUnitGetPosition(resID)));
				
				xsArraySetInt(arrDebug,nAvail,debugItem);
				
				nAvail=nAvail+1;
				continue;
			}
			notokGold=true; bestGold=resID; GoldDist=minDist;
			
			//No better choice...
			if (status!=7){
				xsArraySetInt(arrAssigned,nAssigned,villagerID);
				nAssigned=nAssigned+1;
				continue;
			}
			//Nothing to do?
			if (FoodDist<=WoodDist && FoodDist<=GoldDist && bestFood!=-1){
				resID=bestFood;
			}
			if (WoodDist<=FoodDist && WoodDist<=GoldDist && bestWood!=-1){
				resID=bestWood;
			}
			if (GoldDist<=WoodDist && GoldDist<=FoodDist && bestGold!=-1){
				resID=bestGold;
			}
			
			//tmp=tmp+"?"+resID;
			if (resID==-1){ //Really nothing to do?
				aiTaskUnitMove(villagerID,mainBaseVec);
				xsArraySetInt(arrAssigned,nAssigned,villagerID);
				nAssigned=nAssigned+1;
				continue;
			}
			
			xsArraySetInt(arrID,nAvail,villagerID);
			xsArraySetInt(arrResID,nAvail,resID);
			xsArraySetFloat(arrDist,nAvail,distance(vecVillager,kbUnitGetPosition(resID))+100);
				//100 for no better choice penalty...
			
			debugItem=11;
			xsArraySetInt(arrDebug,nAvail,debugItem);
			
			nAvail=nAvail+1;
		}
		
		//tmp=tmp+nAvail+">";
		
		if (nAvail==0) break;
		float minD=999;
		int determin=-1;
		for(index=0; <nAvail){
			if (xsArrayGetFloat(arrDist,index)<minD)
				determin=index;
		}
		villagerID=xsArrayGetInt(arrID,determin);
		resID=xsArrayGetInt(arrResID,determin);
		debugItem=xsArrayGetInt(arrDebug,determin);
		xsArraySetInt(arrAssigned,nAssigned,villagerID);
		nAssigned=nAssigned+1;
		compensated=compensated-1;
		aiTaskUnitWork(villagerID, resID);
		//tmp=tmp+
		//	villagerID+"("+villagerID+")>"+
		//	debugItem+":"+resID+","+kbGetUnitBaseTypeID(resID)+","+kbGetUnitTypeName(kbGetUnitBaseTypeID(resID))+"|";
		if (kbUnitIsType(resID,cUnitTypeGold))
			nGold=nGold-1;
		if (kbUnitIsType(resID,cUnitTypeFood))
			nFood=nFood-1;
		if (kbUnitIsType(resID,cUnitTypeWood))
			nWood=nWood-1;
		if (kbUnitIsType(resID,cUnitTypeAbstractResourceCrate)){
			nCrate=nCrate+1;
			opener=villagerID;
			openCrateTime=xsGetTime();
		}
	}
	
	//tmp=tmp+"*"+nAssigned+"("+nFood+"/"+nWood+"/"+nGold+")";
	
	//Active villagers avoid attack and dynamically change it's assignment.
	
	//tmp=tmp+"->"+nFood+"/"+nWood+"/"+nGold;
	//echoMessage("v:"+totalVillagers+", IdleA:"+idler+":"+tmp);
	//selectRicePaddyTactics();
	//echoMessage(tmp);
	//echoMessage("v:"+totalVillagers+":"+tmp+"\nMyRes:"+kbResourceGet(cResourceFood)+"/"+kbResourceGet(cResourceWood)+"/"+kbResourceGet(cResourceGold));
}






//==============================================================================
// rule resourceManager
/*
   Watch the resource balance, buy/sell imbalanced resources as needed
   
   In initial build phase (first 5 houses?) sell all food, buy wood with 
   any gold.  Later, look for imbalances.
*/
//==============================================================================
rule resourceManager
inactive
minInterval 12
group startup
{
   bool goAgain = false;         // Set this flag if we do a buy or sell and want to quickly evaluate
   static bool fastMode = false; // Set this flag if we enter high-speed mode, clear it on leaving
   static int lastTributeRequestTime = 0;
   
   if (aiResourceIsLocked(cResourceGold) == true)
   {
      aiEcho("Gold is locked.");
      if (fastMode == true)
      {
         // We need to slow down.
         xsSetRuleMinIntervalSelf(10);
         aiEcho("Resource manager going to slow mode.");
         fastMode = false;
      }
      return;
   }

   // Handle requests for tribute
   // After a revolution, tribute is requested more often, and not just for imbalances
   if (gRevolutionFlag == false)
   {
      if ( ((xsGetTime() - lastTributeRequestTime) > 30000) && ((xsGetTime() - gLastTribSentTime) > 10000) )    // Request often!//Don't request too often, and don't request right after sending.
      {  // See if we have a critical shortage of anything
         //float totalResources = kbResourceGet(cResourceFood) + kbResourceGet(cResourceWood) + kbResourceGet(cResourceGold);
         //if ( (totalResources > 1000.0) && (kbGetAge() > cAge1) )
         //{  // Don't request tribute if we're short on everything, just for imbalances.  And skip age 1, since we'll have zero gold and mucho food.
            if (kbResourceGet(cResourceFood) < 200 )
            {
               sendStatement(cPlayerRelationAlly, cAICommPromptToAllyRequestFood);
               lastTributeRequestTime = xsGetTime();
            }
            if (kbResourceGet(cResourceGold) < 200 )
            {
               sendStatement(cPlayerRelationAlly, cAICommPromptToAllyRequestCoin);
               lastTributeRequestTime = xsGetTime();
            }
            if (kbResourceGet(cResourceWood) < 200 )
            {
               sendStatement(cPlayerRelationAlly, cAICommPromptToAllyRequestWood);
               lastTributeRequestTime = xsGetTime();
            }
         //}
      }
   }
   else
   {
      if ((xsGetTime() - lastTributeRequestTime) > 20000)    // Don't request too often
      {
         // Ask for whatever we need most, unless we have at least 500 of each resource available
         if ((kbResourceGet(cResourceFood) < kbResourceGet(cResourceWood)) &&
             (kbResourceGet(cResourceFood) < kbResourceGet(cResourceGold)) &&
             (kbResourceGet(cResourceFood) < 500.0))
         {
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyRequestFood);
            lastTributeRequestTime = xsGetTime();
         }
         else if ((kbResourceGet(cResourceWood) < kbResourceGet(cResourceGold)) &&
                  (kbResourceGet(cResourceWood) < 500.0))
         {
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyRequestWood);
            lastTributeRequestTime = xsGetTime();
         }
         else if (kbResourceGet(cResourceGold) < 500.0)
         {
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyRequestCoin);
            lastTributeRequestTime = xsGetTime();
         }
      }
   }

   int times=0;
   // Normal imbalance rules apply
   while(goAgain==true){
		goAgain=false;
	   if ( (kbUnitCount(cMyID, gMarketUnit, cUnitStateAlive) > 0) && (aiResourceIsLocked(cResourceGold) == false))
	   {
		  if ( (kbResourceGet(cResourceFood) > (5*getLowestResourceAmount())) && (kbResourceGet(cResourceFood) > 7000) && (aiResourceIsLocked(cResourceFood) == false) )
		  {  // Sell food!  We have much, and it's 5x min
			 aiSellResourceOnMarket(cResourceFood);
			 //aiEcho("Selling 100 food.");
			 goAgain = true;
		  }         
		  if ( (kbResourceGet(cResourceWood) > (5*getLowestResourceAmount())) && (kbResourceGet(cResourceWood) > 7000) && (aiResourceIsLocked(cResourceWood) == false)  )
		  {  // Sell wood!  We have much, and it's 5x min
			 aiSellResourceOnMarket(cResourceWood);
			 aiEcho("Selling 100 wood.");
			 goAgain = true;
		  }         
		  if ( (kbResourceGet(cResourceGold) > (5*getLowestResourceAmount())) && (kbResourceGet(cResourceGold) > 12000) )
		  {  // Buy something!  We have much gold, and it's 5x min
			 if (kbResourceGet(cResourceFood) < kbResourceGet(cResourceWood))
			 {
				if ( aiResourceIsLocked(cResourceFood) == false )
				{
				   aiBuyResourceOnMarket(cResourceFood);
				   aiEcho("Buying 100 food.");
				   goAgain = true;
				}
			 }
			 else
			 {
				if (kbResourceGet(cResourceWood)<5000 && aiResourceIsLocked(cResourceWood) == false )
				{
				   aiBuyResourceOnMarket(cResourceWood);
				   aiEcho("Buying 100 wood.");
				   goAgain = true;
				}
			 }
		  }
	   }
	   times=times+1;
	   echoMessage("Did a market run");
	}
	
}


void findEnemyBase(void)
{
   if ( (cRandomMapName == "amazonia") || (cRandomMapName == "caribbean") || (cRandomMapName == "Ceylon") )   
      return();   // No sense trying that on these standard maps
   
   if (cvOkToExplore == false)
      return();

   // Decide on which unit type to use as scout
   // If possible, cheap infantry is used   
   int scoutType = -1;
   if (kbUnitCount(cMyID, cUnitTypeAbstractInfantry, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeAbstractInfantry;
   else if (kbUnitCount(cMyID, cUnitTypeAbstractCavalry, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeAbstractCavalry;   
   else if (kbUnitCount(cMyID, cUnitTypeAbstractNativeWarrior, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeAbstractNativeWarrior;
   else
      scoutType = cUnitTypeLogicalTypeLandMilitary;
   
   //Create an explore plan to go there.
   vector myBaseLocation=kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)); // Main base location...need to find reflection.
   vector centerOffset = kbGetMapCenter() - myBaseLocation;
   vector targetLocation = kbGetMapCenter() + centerOffset;
   // TargetLocation is now a mirror image of my base.
   aiEcho("My base is at "+myBaseLocation+", enemy base should be near "+targetLocation);
   int exploreID=aiPlanCreate("Probe Enemy Base", cPlanExplore);
   if (exploreID >= 0)
   {
      aiPlanAddUnitType(exploreID, scoutType, 1, 1, 1); // Infantry or cavalry only, no explorer!
      aiPlanAddWaypoint(exploreID, targetLocation);
      aiPlanSetVariableBool(exploreID, cExplorePlanDoLoops, 0, false);
      aiPlanSetVariableBool(exploreID, cExplorePlanQuitWhenPointIsVisible, 0, true);
      aiPlanSetVariableBool(exploreID, cExplorePlanAvoidingAttackedAreas, 0, false);
      aiPlanSetVariableInt(exploreID, cExplorePlanNumberOfLoops, 0, -1);
      aiPlanSetRequiresAllNeedUnits(exploreID, true);
      aiPlanSetVariableVector(exploreID, cExplorePlanQuitWhenPointIsVisiblePt, 0, targetLocation);
      aiPlanSetDesiredPriority(exploreID, 100);
      aiPlanSetActive(exploreID);
   }
}

//==============================================================================
/*
   Tower manager
   
   Tries to maintain gNumTowers for the number of towers near the main base.

   If there are idle outpost wagons, use them.  If not, use villagers to build outposts.
   Russians use blockhouses via gTowerUnit. Natives build war huts (Iroquois), 
   nobles huts (Aztecs) and teepees (Sioux), and Asians build castles, again 
   selected via gTowerUnit.

   Placement algorithm is brain-dead simple.  Check a point that is mid-edge or a 
   corner of a square around the base center.  Look for a nearby tower.  If none, 
   do a tight build plan.  If there is one, try again.    If no luck, try a build
   plan that just avoids other towers.

*/
//==============================================================================
rule towerManager
inactive
minInterval 10
{
   if (cvOkToFortify == false)
   {
      return;  // Oops.  I shouldn't be running.
   }
   
   static int towerUpgradePlan = -1;
   int towerUpgrade1 = cTechFrontierOutpost;
   int towerUpgrade2 = cTechFortifiedOutpost;
   if (kbGetCiv() == cCivRussians)
   {
      towerUpgrade1 = cTechFrontierBlockhouse;
      towerUpgrade2 = cTechFortifiedBlockhouse;
   }
   if (kbGetCiv() == cCivXPIroquois)
   {
      towerUpgrade1 = cTechStrongWarHut;
      towerUpgrade2 = cTechMightyWarHut;
   }
   if (kbGetCiv() == cCivXPAztec)
   {
      towerUpgrade1 = cTechStrongNoblesHut;
      towerUpgrade2 = cTechMightyNoblesHut;
   }
   if (kbGetCiv() == cCivXPSioux)
   {
      towerUpgrade1 = cTechStrongWarHut;
      towerUpgrade2 = cTechMightyWarHut;
   }
   if (civIsAsian() == true)
   {
      towerUpgrade1 = cTechypFrontierCastle;
      towerUpgrade2 = cTechypFortifiedCastle;
   }
  
   if (towerUpgradePlan >= 0)
   {
      if ((aiPlanGetState(towerUpgradePlan) < 0) || (aiPlanGetVariableInt(towerUpgradePlan, cResearchPlanBuildingID, 0) < 0))
      {
         aiPlanDestroy(towerUpgradePlan);
         towerUpgradePlan = -1;
         aiEcho("Invalid tower upgrade plan destroyed.");
      }
   }

   if ( (kbTechGetStatus(towerUpgrade1) == cTechStatusObtainable) && (towerUpgradePlan == -1) ) // The first upgrade is available, and I'm not researching it. 
   {
      if (kbUnitCount(cMyID, gTowerUnit, cUnitStateABQ) >= 2)
      {  // I have at least 3 towers
         towerUpgradePlan = createSimpleResearchPlan(towerUpgrade1, -1, cMilitaryEscrowID, 75);
         aiEcho("Starting research plan for first tower upgrade in plan # "+towerUpgradePlan);
      }
   }
   
   if ( (kbTechGetStatus(towerUpgrade2) == cTechStatusObtainable) && (towerUpgradePlan == -1) ) // The second upgrade is available, and I'm not researching it. 
   {
      if (kbUnitCount(cMyID, gTowerUnit, cUnitStateABQ) >= 2)
      {  // I have at least 5 towers
         towerUpgradePlan = createSimpleResearchPlan(towerUpgrade2, -1, cMilitaryEscrowID, 75);
         aiEcho("Starting research plan for second tower upgrade in plan # "+towerUpgradePlan);
      }
   }
   
   if ( (kbUnitCount(cMyID, gTowerUnit, cUnitStateABQ) >= gNumTowers) && (kbUnitCount(cMyID, cUnitTypeOutpostWagon, cUnitStateAlive) <= 0) && (kbUnitCount(cMyID, cUnitTypeYPCastleWagon, cUnitStateAlive) <= 0) )
      return;  // We have enough, thank you, and no idle outpost or castle wagons.
   
   if ( aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, gTowerUnit) >= 0 )
      return;  // We're already building one.
   
   if (civIsAsian() == false) { //BHG: Asians have different outpost wagon types so it's ok to keep going
      if ( aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeOutpost) >= 0 )
         return;  // We're already building one.  (Weird case of civs that don't usually make towers having an outpost wagon given to them.
   }
   
   // Need more, not currently building any.  Need to select a builder type (settler or outpostWagon) and a location.
   int builderType = -1;
   
   if ( (civIsAsian() == false) && (kbUnitCount(cMyID, cUnitTypeOutpostWagon, cUnitStateAlive) > 0) )
      builderType = cUnitTypeOutpostWagon;
   else if ( (civIsAsian() == true) && (kbUnitCount(cMyID, cUnitTypeYPCastleWagon, cUnitStateAlive) > 0) )
      builderType = cUnitTypeYPCastleWagon;
   else
      builderType = gEconUnit;
   
   int attempt = 0;
   vector testVec = cInvalidVector;
   float spacingDistance = 10.0; // Mid- and corner-spots on a square with 'radius' spacingDistance, i.e. each side is 2 * spacingDistance.
   float exclusionRadius = spacingDistance / 2.0;
   float dx = spacingDistance;
   float dz = spacingDistance;
   static int towerSearch = -1;
   bool success = false;
   
   for (attempt = 0; < 10) // Take ten tries to place it
   {
      testVec = kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)); // Start with base location
      
      switch(aiRandInt(8)) // 0..7
      {  // Use 0.8 * on corners to "round them" a bit
         case 0:
         {  // W
            dx = -0.8 * dx;
            dz = 0.8 * dz;
            aiEcho("West...");
            break;
         }
         case 1:
         {  // NW
            dx = 0.0;
            aiEcho("Northwest...");
            break;
         }
         case 2:
         {  // N
            dx = 0.8 * dx;
            dz = 0.8 * dz;
            aiEcho("North...");
            break;
         }
         case 3:
         {  // NE
            dz = 0.0;
            aiEcho("NorthEast...");
            break;
         }
         case 4:
         {  // E
            dx = 0.8 * dx;
            dz = -0.8 * dz;
            aiEcho("East...");
            break;
         }
         case 5:
         {  // SE
            dx = 0.0;
            dz = -1.0 * dz;
            aiEcho("SouthEast...");
            break;
         }
         case 6:
         {  // S
            dx = -0.8 * dx;
            dz = -0.8 * dz;
            aiEcho("South...");
            break;
         }
         case 7:
         {  // SW
            dx = -1.0 * dx;
            dz = 0;
            aiEcho("SouthWest...");
            break;
         }
      }
      testVec = xsVectorSetX(testVec, xsVectorGetX(testVec) + dx);
      testVec = xsVectorSetZ(testVec, xsVectorGetZ(testVec) + dz);
      aiEcho("Testing tower location "+testVec);
      if (towerSearch < 0)
      {  // init
         towerSearch = kbUnitQueryCreate("Tower placement search");
         kbUnitQuerySetPlayerRelation(towerSearch, cPlayerRelationAny);
         kbUnitQuerySetUnitType(towerSearch, gTowerUnit);
         kbUnitQuerySetState(towerSearch, cUnitStateABQ);
      }
      kbUnitQuerySetPosition(towerSearch, testVec);
      kbUnitQuerySetMaximumDistance(towerSearch, exclusionRadius);
      kbUnitQueryResetResults(towerSearch);
      if (kbUnitQueryExecute(towerSearch) < 1)
      {  // Site is clear, use it
         if ( kbAreaGroupGetIDByPosition(testVec) == kbAreaGroupGetIDByPosition(kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID))) )
         {  // Make sure it's in same areagroup.
            success = true;
            break;
         }
      }
   }
   
   // We have found a location (success == true) or we need to just do a brute force placement around the TC.
   if (success == false)
      testVec = kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));
   
   int buildPlan=aiPlanCreate("Tower build plan ", cPlanBuild);
   // What to build
   if ( (builderType == cUnitTypeOutpostWagon) && (civIsAsian() == false) )
      aiPlanSetVariableInt(buildPlan, cBuildPlanBuildingTypeID, 0, cUnitTypeOutpost);
   else
      aiPlanSetVariableInt(buildPlan, cBuildPlanBuildingTypeID, 0, gTowerUnit);
   // Priority.
   aiPlanSetDesiredPriority(buildPlan, 85);
   // Econ, because mil doesn't get enough wood.
   aiPlanSetMilitary(buildPlan, false);
   aiPlanSetEconomy(buildPlan, true);
   // Escrow.
   aiPlanSetEscrowID(buildPlan, cEconomyEscrowID);
   // Builders.
   aiPlanAddUnitType(buildPlan, builderType, 1, 1, 1);

   // Instead of base ID or areas, use a center position and falloff.
   aiPlanSetVariableVector(buildPlan, cBuildPlanCenterPosition, 0, testVec);
   if (success == true)
      aiPlanSetVariableFloat(buildPlan, cBuildPlanCenterPositionDistance, 0, exclusionRadius);
   else
      aiPlanSetVariableFloat(buildPlan, cBuildPlanCenterPositionDistance, 0, 60.0);

   // Add position influence for nearby towers
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 0, gTowerUnit);   // Russian's won't notice ally towers and vice versa...oh well.
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 0, spacingDistance);    
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 0, -20.0);        // -20 points per tower
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 0, cBPIFalloffLinear);  // Linear slope falloff

   // Weight it to stay very close to center point.
   aiPlanSetVariableVector(buildPlan, cBuildPlanInfluencePosition, 0, testVec);    // Position influence for landing position
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluencePositionDistance, 0, exclusionRadius);     // 100m range.
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluencePositionValue, 0, 10.0);        // 10 points for center
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluencePositionFalloff, 0, cBPIFalloffLinear);  // Linear slope falloff

   aiEcho("Starting building plan ("+buildPlan+") for tower at location "+testVec);
   aiEcho("Cheapest tech for tower buildings is "+ kbGetTechName(kbTechTreeGetCheapestUnitUpgrade(gTowerUnit)) );
   aiEcho("Cheapest tech ID is "+kbTechTreeGetCheapestUnitUpgrade(gTowerUnit));
   aiPlanSetActive(buildPlan);
}




vector selectForwardBaseLocation(void)
{
   vector retVal = cInvalidVector;
   vector mainBaseVec = kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));
   vector v = cInvalidVector; // Scratch variable for intermediate calcs.
   
   aiEcho("Selecting forward base location.");
   float distanceMultiplier = 0.5;  // Will be used to determine how far out we should put the fort on the line from our base to enemy TC.
   float dist = 0.0;
   
   int enemyTC = getUnitByLocation(cUnitTypeTownCenter, cPlayerRelationEnemy, cUnitStateABQ, mainBaseVec, 500.0);
   if (enemyTC < 0)
   {  
      retVal = kbGetMapCenter();   // Start with map center
      aiEcho("    No enemy TC found, using map center at "+retVal);
   }
   else  // enemy TC found
   {
      v = kbUnitGetPosition(enemyTC) - mainBaseVec;   // Vector from main base to enemy TC
      dist = distance(mainBaseVec, kbUnitGetPosition(enemyTC));
      if (dist > 200.0)
         distanceMultiplier = (dist-70.0) / dist; // I.e. take halfway point, or 70m from enemy TC, whichever is farther from my base.
      v = v * distanceMultiplier;   // Halfway there, or 100 meters away from enemy, whichever is closer to enemy.
      retVal = mainBaseVec + v;  // retval is midpoint between main base and nearest enemy TC.
      aiEcho("Enemy TC ("+enemyTC+") found at "+kbUnitGetPosition(enemyTC));
      aiEcho("Using midpoint of "+retVal);
   }
   // Now, make sure it's on the same areagroup, back up if it isn't.
   dist = distance(mainBaseVec, retVal);
   int mainAreaGroup = kbAreaGroupGetIDByPosition(mainBaseVec);
   vector delta = (mainBaseVec - retVal) * 0.1;
   int step = 0;
   bool siteFound = false;
   if (dist > 0.0)
   {
      for (step = 0; < 9)
      {
         aiEcho("    "+retVal+" is in area group "+kbAreaGroupGetIDByPosition(retVal));
         if ( getUnitByLocation(cUnitTypeFortFrontier, cPlayerRelationEnemy, cUnitStateABQ, retVal, 60.0) >= 0 ) //cUnitTypeFortFrontier
            continue;   // DO NOT build anywhere near an enemy fort!
         if ( getUnitByLocation(cUnitTypeTownCenter, cPlayerRelationEnemy, cUnitStateABQ, retVal, 60.0) >= 0 )
            continue;   // Ditto enemy TCs.
         if (mainAreaGroup == kbAreaGroupGetIDByPosition(retVal)) 
         {  // DONE!
            aiEcho("Good location found.");
            siteFound = true;
            break;
         }
         retVal = retVal + delta;   // Move 1/10 of way back to main base, try again.
      }
   }
   if (siteFound == false)
      retVal = mainBaseVec;
   if (aiGetWorldDifficulty() < cDifficultyModerate)
      retVal = mainBaseVec;   // Easy and Sandbox will never forward build.
   aiEcho("    New forward base location will be "+retVal);
   return(retVal);
}


//==============================================================================
/*
   Forward base manager
   
Handles the planning, construction, defense and maintenance of a forward military base.

The steps involved:
1)  Choose a location
2)  Defend it and send a fort wagon to build a fort.
3)  Define it as the military base, move defend plans there, move military production there.
4)  Undo those settings if it needs to be abandoned.

*/
//==============================================================================
rule forwardBaseManager
inactive
group tcComplete
minInterval 30
{
   if ( (cvOkToBuild == false) || (cvOkToBuildForts == false) || (aiTreatyActive() == true) )
      return;
   
   int buildingToMake = -1;
   int buildertype = -1;

   switch(gForwardBaseState)
   {
      case cForwardBaseStateNone:
      {
         // Check if we should go to state Building
         if (kbUnitCount(cMyID, cUnitTypeFortWagon, cUnitStateAlive) > 0) 
         {  // Yes.
            // get the fort wagon, start a build plan, keep it defended
            gForwardBaseLocation = selectForwardBaseLocation();
            gForwardBaseBuildPlan = aiPlanCreate("Fort build plan ", cPlanBuild);
            aiPlanSetVariableInt(gForwardBaseBuildPlan, cBuildPlanBuildingTypeID, 0, cUnitTypeFortFrontier);
            aiPlanSetDesiredPriority(gForwardBaseBuildPlan, 87);
            // Military
            aiPlanSetMilitary(gForwardBaseBuildPlan, true);
            aiPlanSetEconomy(gForwardBaseBuildPlan, false);
            aiPlanSetEscrowID(gForwardBaseBuildPlan, cMilitaryEscrowID);
            aiPlanAddUnitType(gForwardBaseBuildPlan, cUnitTypeFortWagon, 1, 1, 1);
         
            // Instead of base ID or areas, use a center position
            aiPlanSetVariableVector(gForwardBaseBuildPlan, cBuildPlanCenterPosition, 0, gForwardBaseLocation);
            aiPlanSetVariableFloat(gForwardBaseBuildPlan, cBuildPlanCenterPositionDistance, 0, 60.0);
     
            // Weight it to stay very close to center point.
            aiPlanSetVariableVector(gForwardBaseBuildPlan, cBuildPlanInfluencePosition, 0, gForwardBaseLocation);    // Position influence for center
            aiPlanSetVariableFloat(gForwardBaseBuildPlan, cBuildPlanInfluencePositionDistance, 0,  50.0);     // 100m range.
            aiPlanSetVariableFloat(gForwardBaseBuildPlan, cBuildPlanInfluencePositionValue, 0, 100.0);        // 100 points for center
            aiPlanSetVariableInt(gForwardBaseBuildPlan, cBuildPlanInfluencePositionFalloff, 0, cBPIFalloffLinear);  // Linear slope falloff
            
            // Add position influence for nearby towers
            aiPlanSetVariableInt(gForwardBaseBuildPlan, cBuildPlanInfluenceUnitTypeID, 0, cUnitTypeFortFrontier);   // Don't build anywhere near another fort.
            aiPlanSetVariableFloat(gForwardBaseBuildPlan, cBuildPlanInfluenceUnitDistance, 0, 50.0);    
            aiPlanSetVariableFloat(gForwardBaseBuildPlan, cBuildPlanInfluenceUnitValue, 0, -200.0);        // -20 points per fort
            aiPlanSetVariableInt(gForwardBaseBuildPlan, cBuildPlanInfluenceUnitFalloff, 0, cBPIFalloffNone);  // Cliff falloff
           
            aiPlanSetActive(gForwardBaseBuildPlan);
            
            // Chat to my allies
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyIWillBuildMilitaryBase, gForwardBaseLocation);
            
            gForwardBaseState = cForwardBaseStateBuilding;
              
            aiEcho("BUILDING FORWARD BASE, MOVING DEFEND PLANS TO COVER.");
            aiEcho("PLANNED LOCATION IS "+gForwardBaseLocation); 
            
            if (gDefenseReflex == false)
               endDefenseReflex();  // Causes it to move to the new location
         }
         break;
      }
      case cForwardBaseStateBuilding:
      {
         int fortUnitID = getUnitByLocation(cUnitTypeFortFrontier, cMyID, cUnitStateAlive, gForwardBaseLocation, 100.0);
         if ( fortUnitID >= 0 )
         {  // Building exists and is complete, go to state Active
            if ( kbUnitGetBaseID(fortUnitID) >= 0) 
            {  // Base has been created for it.
               gForwardBaseState = cForwardBaseStateActive;
               gForwardBaseID = kbUnitGetBaseID(fortUnitID);
               gForwardBaseLocation = kbUnitGetPosition(fortUnitID);  
               aiEcho("Forward base location is "+gForwardBaseLocation+", Base ID is "+gForwardBaseID+", Unit ID is "+fortUnitID);
               // Tell the attack goal where to go.
               aiPlanSetBaseID(gMainAttackGoal, gForwardBaseID);
               aiEcho(" ");
               aiEcho("    FORWARD BASE COMPLETED, GOING TO STATE ACTIVE, MOVING ATTACK GOAL.");
               aiEcho(" ");
            }
            else
            {
               aiEcho(" ");
               aiEcho("    FORT COMPLETE, WAITING FOR FORWARD BASE ID.");
               aiEcho(" ");
            }
         }
         else  // Check if plan still exists. If not, go back to state 'none'.
         {
            if (aiPlanGetState(gForwardBaseBuildPlan) < 0)
            {  // It failed?
               gForwardBaseState = cForwardBaseStateNone;
               gForwardBaseLocation = cInvalidVector;
               gForwardBaseID = -1;
               gForwardBaseBuildPlan = -1;
               aiEcho(" ");
               aiEcho("    FORWARD BASE PLAN FAILED, RETURNING TO STATE NONE.");
               aiEcho(" ");
            }
         }
         
         break;
      }
      case cForwardBaseStateActive:
      {  // Normal state.  If fort is destroyed and base overrun, bail.
         if ( getUnitByLocation(cUnitTypeFortFrontier, cMyID, cUnitStateAlive, gForwardBaseLocation, 50.0) < 0 )
         {
            // Fort is missing, is base still OK?  
            if ( ((gDefenseReflexBaseID == gForwardBaseID) && (gDefenseReflexPaused == true)) 
               || ( kbBaseGetNumberUnits( cMyID, gForwardBaseID, cPlayerRelationSelf, cUnitTypeBuilding ) < 1))   // Forward base under attack and overwhelmed, or gone.
            {  // No, not OK.  Get outa Dodge.
               gForwardBaseState = cForwardBaseStateNone;
               gForwardBaseID = -1;
               gForwardBaseLocation = cInvalidVector;
               // Tell the attack goal to go back to the main base.
               aiPlanSetBaseID(gMainAttackGoal, kbBaseGetMainID(cMyID));
               endDefenseReflex();
               aiEcho(" ");
               aiEcho("    ABANDONING FORWARD BASE, RETREATING TO MAIN BASE.");
               aiEcho(" ");
            }
         }
         break;
      }
   }
}



void deathMatchSetup(void)
{  // Make a bunch of changes to get a deathmatch start
   aiEcho("RUNNING DEATHMATCH SETUP");
   // 20 houses, pronto.
   /*
   if (cMyCiv != cCivXPSioux)
      createSimpleBuildPlan(gHouseUnit, 25, 99, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);*/
   // 1 each of the main military buildings, ASAP.
   // artheru: 2 barrack, 1 stable.
   if ( (civIsNative() == false) && (civIsAsian() == false) )
   {
      createSimpleBuildPlan(cUnitTypeBarracks, 2, 98, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
      createSimpleBuildPlan(cUnitTypeStable, 1, 97, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);

      if (cMyCiv == cCivGermans)
         createSimpleBuildPlan(cUnitTypeMill, 2, 95, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
   }
   else if (civIsAsian() == true) 
   {
      if ( (cMyCiv == cCivJapanese) || (cMyCiv == cCivSPCJapanese) || (cMyCiv == cCivSPCJapaneseEnemy) ) 
      {
        createSimpleBuildPlan(cUnitTypeypBarracksJapanese, 2, 98, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        createSimpleBuildPlan(cUnitTypeypStableJapanese, 1, 97, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
      }
      else if ( (cMyCiv == cCivChinese) || (cMyCiv == cCivSPCChinese) )
      {   createSimpleBuildPlan(cUnitTypeypWarAcademy, 3, 98, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);   }
      else 
      {
        createSimpleBuildPlan(cUnitTypeYPBarracksIndian, 2, 98, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        createSimpleBuildPlan(cUnitTypeypCaravanserai, 1, 98, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
      }
      createSimpleBuildPlan(cUnitTypeypCastle, 1, 97, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
   }
   else
   {      
      createSimpleBuildPlan(cUnitTypeWarHut, 2, 98, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
      if (cMyCiv == cCivXPAztec)
         createSimpleBuildPlan(cUnitTypeNoblesHut, 1, 98, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
      else
         createSimpleBuildPlan(cUnitTypeCorral, 1, 98, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
   }
   if ( (civIsNative() == false) || (cMyCiv == cCivXPIroquois) )  //holy crap if-elses...
   {
      if ( (civIsAsian() == false) && (cMyCiv != cCivFrench) )
        createSimpleBuildPlan(cUnitTypeArtilleryDepot, 1, 96, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
      else
        createSimpleBuildPlan(cUnitTypeypCastle, 1, 96, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
   }

   if (civIsAsian() == false)
   {  gNumTowers = 7;  } // Load up on towers.
   else
   {  gNumTowers = 5;  }  // Load up on castles.
   
   xsEnableRule("turtleUp");
   xsEnableRule("moreDMHouses");
}

rule moreDMHouses
inactive
minInterval 80
{  // After 90 seconds, make 10 more houses
	echoMessage("DMhouses");
   if (cMyCiv != cCivXPSioux)
      createSimpleBuildPlan(gHouseUnit, 10, 99, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
   
   xsEnableRule("finalDMHouses");
}

rule finalDMHouses
inactive
minInterval 100
{
   int count = kbUnitCount(cMyID, gHouseUnit, cUnitStateAlive);
   int max = kbGetBuildLimit(cMyID, gHouseUnit);
   
   count = max - count; // Count is number needed.
   if ( aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, gHouseUnit) >= 0 )
      count = count - 1;
   if (cMyCiv == cCivXPSioux)
      count = 0;
   
   if (count > 0)
      createSimpleBuildPlan(gHouseUnit, count, 99, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
   
   xsDisableSelf();
}


//==============================================================================
/*
   Military Manager
   
   Create maintain plans for military unit lines.  Control 'maintain' levels,
   buy upgrades.  
*/
//==============================================================================
rule militaryManager
inactive
minInterval 10
{
   
   static bool init = false;   // Flag to indicate vars, plans are initialized
   int i = 0;
   int proto = 0;
   int planID = -1;

   
   if (init == false)
   {     
      // Need to initialize, if we're allowed to.
      if (cvOkToTrainArmy == true)
      {
         init = true;
         if (cvNumArmyUnitTypes >= 0)
            gNumArmyUnitTypes = cvNumArmyUnitTypes;
         else
            gNumArmyUnitTypes = 3;
         
         gLandUnitPicker = initUnitPicker("Land military units", gNumArmyUnitTypes, 10, 30, -1, -1, 1, true);

         // now the goal
         // wmj -- hard coded for now, but this should most likely ramp up as the ages progress
         aiSetMinArmySize(gGoodArmyPop);
   
         gMainAttackGoal = createSimpleAttackGoal("AttackGoal", aiGetMostHatedPlayerID(), gLandUnitPicker, -1, cAge2, -1, gMainBase, false);
         aiPlanSetVariableInt(gMainAttackGoal, cGoalPlanReservePlanID, 0, gLandReservePlan);
      }
   }

   if (gLandUnitPicker != -1)
   {  
      setUnitPickerPreference(gLandUnitPicker);  // Update preferences in case btBiasEtc vars have changed, or cvPrimaryArmyUnit has changed.
      
      if (kbGetAge() == cAge2)
      {
	 kbUnitPickSetMinimumNumberUnits(gLandUnitPicker, 1);
	 kbUnitPickSetMaximumNumberUnits(gLandUnitPicker, 15);
      }
      if (kbGetAge() == cAge3)
      {
	 kbUnitPickSetMinimumNumberUnits(gLandUnitPicker, 1);                                                                      
 	 kbUnitPickSetMaximumNumberUnits(gLandUnitPicker, 55);
      }
      if(kbGetAge() == cAge4)
      {
	 kbUnitPickSetMinimumNumberUnits(gLandUnitPicker, 1);
         kbUnitPickSetMaximumNumberUnits(gLandUnitPicker, 90);
      }
      if(kbGetAge() == cAge5)
      {
	 kbUnitPickSetMinimumNumberUnits(gLandUnitPicker, 1);
	 kbUnitPickSetMaximumNumberUnits(gLandUnitPicker, 150);
      }
   }
   
   switch(kbGetAge())
   {
      case cAge1:
      {
         break;
      }
      case cAge2:
      {
         aiSetMinArmySize(8); // Now irrelevant?  (Was used to determine when to launch attack, but attack goal and opp scoring now do this.)
         break;
      }
      case cAge3:
      {
         aiSetMinArmySize(15);
         break;
      }
      case cAge4:
      {
         aiSetMinArmySize(25);
         break;
      }
      case cAge5:
      {
         aiSetMinArmySize(40);
         break;
      }
   }
}

int getNavalTargetPlayer()    // Find an enemy player ID to attack on the water.
{
   int count = 0;
   int retVal = -1;
   static int unitQueryID = -1;

   //If we don't have the query yet, create one.
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("navy target count");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
      kbUnitQuerySetPlayerRelation(unitQueryID, cPlayerRelationEnemyNotGaia);
   }
   
   kbUnitQuerySetUnitType(unitQueryID, gDockUnit);   // dock
   kbUnitQuerySetState(unitQueryID, cUnitStateABQ);
   kbUnitQueryResetResults(unitQueryID);
   count = kbUnitQueryExecute(unitQueryID);  
   //aiEcho("Enemy fishing boats: "+ count);
   if (count > 0)
   {  retVal = kbUnitGetPlayerID(kbUnitQueryGetResult(unitQueryID,0));  }
   else
   {    
      kbUnitQuerySetUnitType(unitQueryID, gFishingUnit);   // Fishing boats
      kbUnitQuerySetState(unitQueryID, cUnitStateABQ);
      kbUnitQueryResetResults(unitQueryID);
      count = kbUnitQueryExecute(unitQueryID);  
      //aiEcho("Enemy fishing boats: "+ count);
      if (count > 3)
	{  retVal = kbUnitGetPlayerID(kbUnitQueryGetResult(unitQueryID,0));  }
   }     
   return(retVal);
}


rule waterAttackDefend
active
minInterval 15
{  // Broke this out separately (from navyManager) so that scenarios that start with a pre-made navy will work.
   if (cvInactiveAI == true)
   {
      xsDisableSelf();
      return;
   }
   int navyUnit = getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive);

   if (navyUnit < 0)
      return;
   
   int flagUnit = getUnit(cUnitTypeHomeCityWaterSpawnFlag, cMyID);
   if (flagUnit >= 0)
      gNavyVec = kbUnitGetPosition(flagUnit);
   else
      gNavyVec = kbUnitGetPosition(navyUnit);
   
   if (gNavyDefendPlan < 0)
   {
      gNavyDefendPlan = aiPlanCreate("Primary Water Defend", cPlanDefend);
      aiPlanAddUnitType(gNavyDefendPlan, cUnitTypeAbstractWarShip , 1, 1, 200);    // Grab first caravel and any others
      aiPlanAddUnitType(gNavyDefendPlan, cUnitTypeCanoe, 1, 10, 200);
      aiPlanSetVariableVector(gNavyDefendPlan, cDefendPlanDefendPoint, 0, gNavyVec);
      aiPlanSetVariableFloat(gNavyDefendPlan, cDefendPlanEngageRange, 0, 300.0);    // Loose
      aiPlanSetVariableBool(gNavyDefendPlan, cDefendPlanPatrol, 0, false);
      aiPlanSetVariableFloat(gNavyDefendPlan, cDefendPlanGatherDistance, 0, 80.0);
      aiPlanSetInitialPosition(gNavyDefendPlan, gNavyVec);
      aiPlanSetUnitStance(gNavyDefendPlan, cUnitStanceDefensive);
      aiPlanSetVariableInt(gNavyDefendPlan, cDefendPlanRefreshFrequency, 0, 20);
      aiPlanSetVariableInt(gNavyDefendPlan, cDefendPlanAttackTypeID, 0, cUnitTypeUnit); // Only units
      aiPlanSetDesiredPriority(gNavyDefendPlan, 20);    // Very low priority, gather unused units.
      aiPlanSetActive(gNavyDefendPlan); 
      aiEcho("Creating primary navy defend plan at "+gNavyVec);
   }
  
   if (((aiPlanGetNumberUnits(gNavyDefendPlan, cUnitTypeAbstractWarShip) >= 3 ) && (civIsNative() == false)) ||
       (aiPlanGetNumberUnits(gNavyDefendPlan, cUnitTypeCanoe) >= 2 ) ||
       ((aiPlanGetNumberUnits(gNavyDefendPlan, cUnitTypeAbstractWarShip) >= 6 ) && (civIsNative() == true))) 
   {  // Time to start an attack?
      if (getNavalTargetPlayer() > 0)  // There's something to attack
      {
         int targetID = -1;
	 int targetPlayerID = -1;
	 vector targetLocation = cInvalidVector;

         targetID = getUnit(gFishingUnit, cPlayerRelationEnemyNotGaia, cUnitStateAlive);
         if (targetID < 0)
	 {
	    targetID = getUnit(cUnitTypeAbstractWarShip, cPlayerRelationEnemyNotGaia, cUnitStateAlive);
	    if (targetID < 0)
	      targetID = getUnit(gDockUnit, cPlayerRelationEnemyNotGaia, cUnitStateAlive);
         }

         targetPlayerID = kbUnitGetPlayerID(targetID); 
	 targetLocation = kbUnitGetPosition(targetID);

         int attackPlan = aiPlanCreate("Navy attack plan", cPlanAttack);
         aiPlanSetVariableInt(attackPlan, cAttackPlanPlayerID, 0, targetPlayerID);
         aiPlanSetNumberVariableValues(attackPlan, cAttackPlanTargetTypeID, 5, true);
         aiPlanSetVariableInt(attackPlan, cAttackPlanTargetTypeID, 0, cUnitTypeAbstractWarShip);
         aiPlanSetVariableInt(attackPlan, cAttackPlanTargetTypeID, 1, gFishingUnit);
         aiPlanSetVariableInt(attackPlan, cAttackPlanTargetTypeID, 2, gDockUnit);
         aiPlanSetVariableInt(attackPlan, cAttackPlanTargetTypeID, 3, cUnitTypeUnit);
         aiPlanSetVariableInt(attackPlan, cAttackPlanTargetTypeID, 4, cUnitTypeBuilding);
         aiPlanSetVariableVector(attackPlan, cAttackPlanGatherPoint, 0, targetLocation);
         aiPlanSetVariableFloat(attackPlan, cAttackPlanGatherDistance, 0, 50.0);
         aiPlanSetVariableInt(attackPlan, cAttackPlanRefreshFrequency, 0, 10);
         aiPlanSetDesiredPriority(attackPlan, 48); // Above defend, fishing.  Below explore.
         aiPlanAddUnitType(attackPlan, cUnitTypeAbstractWarShip, 1, 10, 200); 
         aiPlanAddUnitType(attackPlan, cUnitTypeCanoe, 1, 10, 200);
         aiPlanSetInitialPosition(attackPlan, gNavyVec);
         aiEcho("***** LAUNCHING NAVAL ATTACK, plan ID is "+attackPlan); 
         aiPlanSetActive(attackPlan, true);
      }
   } 
}


//==============================================================================
/*
   Navy Manager
   
   Create maintain plans for navy unit lines.  Control 'maintain' levels.
*/
//==============================================================================
rule navyManager
inactive
minInterval 30
{

   if (gNavyMap == false)
   {
      gNavyMode = cNavyModeOff;
      aiEcho("gNavyMap was false, turning off navy manager.");
      xsDisableSelf();
      return;
   }
   
   vector flagVec =  cInvalidVector;
   int flagUnit = getUnit(cUnitTypeHomeCityWaterSpawnFlag, cMyID);
   if (flagUnit >= 0)
   {      
      flagVec = kbUnitGetPosition(flagUnit);
   }
   else
   {
      int closestDock = getUnitByLocation(gDockUnit, cMyID, cUnitStateAlive, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)), 500.0);
      if (closestDock >= 0)
         flagVec = kbUnitGetPosition(closestDock);
   }
   if ( (gNavyVec == cInvalidVector) && (flagVec != cInvalidVector) )
      gNavyVec = flagVec;   // Set global vector   
     
   closestDock = getUnitByLocation(gDockUnit, cMyID, cUnitStateAlive, flagVec, 500.0);
   if (closestDock < 0)
      closestDock = getUnit(gDockUnit, cMyID, cUnitStateAlive);
   
   if(gWaterExplorePlan < 0)
   {
      vector location = cInvalidVector;
      if (getUnit(gTransportUnit, cMyID, cUnitStateAlive) >= 0)
         location = kbUnitGetPosition(getUnit(gTransportUnit, cMyID, cUnitStateAlive));
      else
         location = kbAreaGetCenter(kbAreaGetClosetArea(kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)), cAreaTypeWater, cAreaTypeWater, -1.0) );
      gWaterExplorePlan=aiPlanCreate("Water Explore", cPlanExplore);
      aiPlanSetVariableBool(gWaterExplorePlan, cExplorePlanReExploreAreas, 0, false);
      aiPlanSetInitialPosition(gWaterExplorePlan, location);
      aiPlanSetDesiredPriority(gWaterExplorePlan, 45);   // Low, so that transport plans can steal it as needed.
      aiPlanAddUnitType(gWaterExplorePlan, gTransportUnit, 1, 1, 1);
      aiPlanSetEscrowID(gWaterExplorePlan, cEconomyEscrowID);
      aiPlanSetVariableBool(gWaterExplorePlan, cExplorePlanDoLoops, 0, false);
      aiPlanSetActive(gWaterExplorePlan);
   }

   if (closestDock < 0)
      return;  // Don't fire up maintain plans until we have a dock
   
   int baseID = kbUnitGetBaseID(closestDock);
   if (baseID < 0) 
      return;  // Don't fire up maintain plans until we have a base ID
   
   //See if we have any enemy warships running around.
   int numberEnemyWarships=0;
   int numberEnemyFishingBoat=0;
   //Find the largest warship count for any of our enemies.
   for (i=0; < cNumberPlayers)
   {
      if ((kbIsPlayerEnemy(i) == true) &&
         (kbIsPlayerResigned(i) == false) &&
         (kbHasPlayerLost(i) == false))
      {
         int tempNumberEnemyWarships=kbUnitCount(i, cUnitTypeAbstractWarShip, cUnitStateAlive);  
         int tempNumberEnemyFishingBoat=kbUnitCount(i, gFishingUnit, cUnitStateAlive);       
         if (tempNumberEnemyWarships > numberEnemyWarships)
            numberEnemyWarships=tempNumberEnemyWarships;
         if (tempNumberEnemyFishingBoat > numberEnemyFishingBoat)
            numberEnemyFishingBoat=tempNumberEnemyFishingBoat;
      }
   }

   //Figure out the min/max number of warships we want.
   int numCaravel = 0;
   int numGalleon = 0;
   int numFrigate = 0;
   int numMonitor = 0;
   int numCanoe = 0;

   if ( (numberEnemyWarships > 0) || (numberEnemyFishingBoat > 0) )
   {
      numCaravel = kbGetBuildLimit(cMyID, gCaravelUnit);
      numGalleon = kbGetBuildLimit(cMyID, gGalleonUnit);
      numFrigate = kbGetBuildLimit(cMyID, gFrigateUnit);
      numMonitor = kbGetBuildLimit(cMyID, cUnitTypeMonitor);
      numCanoe = 20;
 
      gCaravelMaintain = createSimpleMaintainPlan(gCaravelUnit, numCaravel, true, baseID, 1);
      gGalleonMaintain = createSimpleMaintainPlan(gGalleonUnit, numGalleon, true, baseID, 1);
      gFrigateMaintain = createSimpleMaintainPlan(gFrigateUnit, numFrigate, true, baseID, 1);
      gMonitorMaintain = createSimpleMaintainPlan(cUnitTypeMonitor, numMonitor, true, baseID, 1);
      gCanoeMaintain = createSimpleMaintainPlan(cUnitTypeCanoe, numCanoe, true, baseID, 1);

      aiPlanSetVariableInt(gCaravelMaintain, cTrainPlanNumberToMaintain, 0, numCaravel);
      aiPlanSetVariableInt(gGalleonMaintain, cTrainPlanNumberToMaintain, 0, numGalleon);
      aiPlanSetVariableInt(gFrigateMaintain, cTrainPlanNumberToMaintain, 0, numFrigate);
      aiPlanSetVariableInt(gMonitorMaintain, cTrainPlanNumberToMaintain, 0, numMonitor);
      aiPlanSetVariableInt(gCanoeMaintain, cTrainPlanNumberToMaintain, 0, numCanoe);
   }
}

//==============================================================================
// RULE dockMonitor
//==============================================================================
rule dockMonitor
inactive
group tcComplete
minInterval 5
{
   // Quit and disable immediately if we're not on a water map
   if (gNavyMap == false)
   {
      xsDisableSelf();
      return;
   }

   int numDocks=kbUnitCount(cMyID, gDockUnit, cUnitStateAlive);

   // everything ok. we have enough docks
   if ((numDocks >= kbGetAge()+1) || aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, gDockUnit) >= 5)
      return;

   static int areaID=-1;
   if (areaID == -1)
     areaID=kbAreaGetClosetArea(kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)), cAreaTypeWater);

   int flagUnit = getUnit(cUnitTypeHomeCityWaterSpawnFlag, cMyID);
   vector flagVec = kbUnitGetPosition(flagUnit);
   if ( (gNavyVec == cInvalidVector) && (flagVec != cInvalidVector) )
      gNavyVec = flagVec;   // Set global vector 

   int dockPlan = aiPlanCreate("military dock plan", cPlanBuild);
   if (dockPlan >= 0) 
   { 
      aiPlanSetVariableInt(dockPlan, cBuildPlanBuildingTypeID, 0, gDockUnit);
      // Priority.
      aiPlanSetDesiredPriority(dockPlan, 80);
      // Mil vs. Econ.
      if (aiGetGameMode() == cGameModeDeathmatch)
      {
         aiPlanSetMilitary(dockPlan, true);
         aiPlanSetEconomy(dockPlan, false);         
      }
      else
      {
         aiPlanSetMilitary(dockPlan, false);
         aiPlanSetEconomy(dockPlan, true);
      }
      // Escrow.
      aiPlanSetEscrowID(dockPlan, cEconomyEscrowID);
      // Builders. //BHG - check for the new dockwagon, mostly for the honhsu map
      if (kbUnitCount(cMyID, cUnitTypeYPDockWagon, cUnitStateAlive) > 0) 
      {  aiPlanAddUnitType(dockPlan, cUnitTypeYPDockWagon, 1, 1, 1); }
      else 
      {  aiPlanAddUnitType(dockPlan, gEconUnit, 1, 1, 1); }
      
      aiPlanSetNumberVariableValues(dockPlan, cBuildPlanDockPlacementPoint, 3, true);
      aiPlanSetVariableVector(dockPlan, cBuildPlanDockPlacementPoint, 0, gNavyVec);  // One point at flag unit
      aiPlanSetVariableVector(dockPlan, cBuildPlanDockPlacementPoint, 1, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID))); // One point at main base
      aiPlanSetVariableVector(dockPlan, cBuildPlanDockPlacementPoint, 2, kbAreaGetCenter(areaID));   // One point at coast
           
      aiPlanSetActive(dockPlan);
      aiEcho("**** STARTING NAVY DOCK PLAN, plan ID "+dockPlan);      
   }
}

//==============================================================================
// setMilitaryUnitCostForecast
// Checks the current age, looks into the appropriate unit picker,
// calculates approximate resource needs for the next few (3?) minutes,
// adds this amount to the global vars.
//==============================================================================
void setMilitaryUnitCostForecast(void)
{
   int upID = -1;		// ID of the unit picker to query
   float totalAmount = 0.0;	// Total resources to be spent in near future
   if (kbGetAge() == cAge2)
   {
      upID = gLandUnitPicker;
      totalAmount = 1200;
   }
   if (kbGetAge() == cAge3)
   {
      upID = gLandUnitPicker;
      totalAmount = 3000;
   }
   if (kbGetAge() >= cAge4)
   {
      upID = gLandUnitPicker;
      totalAmount = 5000;
   }
   		
   float goldCost = 0.0;
   float woodCost = 0.0;
   float foodCost = 0.0;
   float totalCost = 0.0;

   int unitID = kbUnitPickGetResult(upID, 0);	// Primary unit
   float weight = 1.0;
   int numUnits = kbUnitPickGetDesiredNumberUnitTypes(upID);

   if (numUnits == 2)
      weight = 0.67; // 2/3 and 1/3
   if (numUnits >= 3)
      weight = 0.50; // 1/2, 1/3, 1/6
   
   goldCost = kbUnitCostPerResource(unitID, cResourceGold);
   woodCost = kbUnitCostPerResource(unitID, cResourceWood);
   foodCost = kbUnitCostPerResource(unitID, cResourceFood);
   totalCost = goldCost+woodCost+foodCost;
	
   //gForecasts = gForecasts + (goldCost+woodCost+foodCost) * (totalAmount*weight/totalCost);
     //artheru: this is a crappy bug....
   if (numUnits > 1)
   {  // Do second unit
      unitID = kbUnitPickGetResult(upID, 1);    // Secondary unit
      weight = 0.33;    // Second is 1/3 regardless 
      
      goldCost = kbUnitCostPerResource(unitID, cResourceGold);
      woodCost = kbUnitCostPerResource(unitID, cResourceWood);
      foodCost = kbUnitCostPerResource(unitID, cResourceFood);
      totalCost = goldCost+woodCost+foodCost;
	   
      //gForecasts = gForecasts + (goldCost+woodCost+foodCost) * (totalAmount*weight/totalCost);      
   }

   if (numUnits > 2)
   {  // Do third unit
      unitID = kbUnitPickGetResult(upID, 2);    // Tertiary unit
      weight = 0.167;    // Third unit, if used, is 1/6
      
      goldCost = kbUnitCostPerResource(unitID, cResourceGold);
      woodCost = kbUnitCostPerResource(unitID, cResourceWood);
      foodCost = kbUnitCostPerResource(unitID, cResourceFood);
      totalCost = goldCost+woodCost+foodCost;
	   
      //gForecasts = gForecasts + (goldCost+woodCost+foodCost) * (totalAmount*weight/totalCost);      
   }      
}

//==============================================================================
// rule age2Monitor
/*
   Watch for us reaching age 2.
*/
//==============================================================================
rule age2Monitor
inactive
group tcComplete
minInterval 5
{
   if (kbGetAge() >= cAge2)   // We're in age 2
   {
      xsDisableSelf();
      xsEnableRule("age3Monitor");
      if (xsIsRuleEnabled("militaryManager") == false)
      {
         xsEnableRule("militaryManager");
         aiEcho("Enabling the military manager.");
         militaryManager();   // runImmediately doesn't work.
      }
      if (xsIsRuleEnabled("navyManager") == false)
      {
         xsEnableRule("navyManager");
         aiEcho("Enabling the navy manager.");
      }

      xsEnableRule("stageCoachMonitor");
      xsEnableRule("healerMonitor");      
      xsEnableRule("bigMarketNewYearMonitor");
      
      // Enable settler hitpoint and attack upgrades (research to be started about 3 minutes later)
      xsEnableRule("settlerUpgradeMonitor");

      // Enable consulate
      //xsEnableRule("consulateMonitor");

      // Enable mansabdar maintain plans for Indians
      if (cMyCiv == cCivIndians)
         xsEnableRule("mansabdarMonitor");

      // Enable sacred field handling for Indians
      if (cMyCiv == cCivIndians)
         xsEnableRule("sacredFieldMonitor");

      // Enable cree coureur maintain plan
      xsEnableRule("maintainCreeCoureurs");

             
      findEnemyBase();  // Create a one-off explore plan to probe the likely enemy base location.
      // Get the estimate of military needs
      //setMilitaryUnitCostForecast();

      kbBaseSetMaximumResourceDistance(cMyID, kbBaseGetMainID(cMyID), 150.0);

      gAgeUpTime = xsGetTime();
   
      updateEscrows();
      
      kbEscrowAllocateCurrentResources();

      //-- Set the resource TargetSelector factors.
      gTSFactorDistance = -40.0;
      gTSFactorPoint = 10.0;
      gTSFactorTimeToDone = 0.0;
      gTSFactorBase = 100.0;
      gTSFactorDanger = -40.0;
      kbSetTargetSelectorFactor(cTSFactorDistance, gTSFactorDistance);
      kbSetTargetSelectorFactor(cTSFactorPoint, gTSFactorPoint);
      kbSetTargetSelectorFactor(cTSFactorTimeToDone, gTSFactorTimeToDone);
      kbSetTargetSelectorFactor(cTSFactorBase, gTSFactorBase);
      kbSetTargetSelectorFactor(cTSFactorDanger, gTSFactorDanger);
      
      setUnitPickerPreference(gLandUnitPicker);
     
      gLastAttackMissionTime = xsGetTime() - 5000;     
      gLastDefendMissionTime = xsGetTime() - 5000;     
      gLastClaimMissionTime = xsGetTime() - 5000;

      aiEcho("*** We're in age 2 ***");
   }
}


//==============================================================================
// rule age3Monitor
/*
   Watch for us reaching age 3.
*/
//==============================================================================
rule age3Monitor
inactive
minInterval 10
{
   if (kbGetAge() >= cAge3)
   {
      aiEcho("*** We're in age 3.");
		
      //setAge3OrAboveUnitPickerPreference(gLandUnitPicker);

      // Bump up settler train plan
      // Get the estimate of military needs
      //setMilitaryUnitCostForecast();

      xsDisableSelf();
      xsEnableRule("age4Monitor");
      gAgeUpTime = xsGetTime();
      
      kbBaseSetMaximumResourceDistance(cMyID, kbBaseGetMainID(cMyID), 150.0);

      if (cMyCiv == cCivGermans)
        xsEnableRule("GermantownFarmersMonitor");
      
      // Enable basic church upgrades
      xsEnableRule("churchUpgradeMonitor");
      xsEnableRule("churchUpgradeAsianMonitor");

      // Enable unique church upgrades
      xsEnableRule("royalDecreeMonitor");

      // Enable arsenal upgrades
      xsEnableRule("arsenalUpgradeMonitor");
      xsEnableRule("arsenalUpgradeAsianMonitor");

      // Enable unit upgrade rules
      xsEnableRule("veteranUpgradeMonitor");
      xsEnableRule("eliteUpgradeMonitor");
      xsEnableRule("disciplinedUpgradeMonitor");
      xsEnableRule("warriorSocietyUpgradeMonitor");
      xsEnableRule("minorAsianDisciplinedUpgradeMonitor");     
      xsEnableRule("upgradeWallConnector");
      xsEnableRule("autoFeedLowestAlly");

      // Enable minor tribe techs
      xsEnableRule("minorTribeTechMonitor");
      xsEnableRule("minorAsianTribeTechMonitor");

      // Enable navy upgrades
      xsEnableRule("navyUpgradeMonitor");

      // Enable agra fort upgrades for Indians
      if (kbGetCiv() == cCivIndians)
        xsEnableRule("agraFortUpgradeMonitor");

      // Enable monastery
      xsEnableRule("monasteryMonitor");

      // Enable summer palace tactic monitor for Chinese
      if (kbGetCiv() == cCivChinese)
        xsEnableRule("summerPalaceTacticMonitor");

      // Enable dojo tactic monitor for Japanese
      if (cMyCiv == cCivJapanese)
         xsEnableRule("dojoTacticMonitor");

   }
}


//==============================================================================
// rule age4Monitor
/*
   Watch for us reaching age 4.
*/
//==============================================================================
rule age4Monitor
inactive
minInterval 10
{
   if (kbGetAge() >= cAge4)
   {
      aiEcho("*** We're in age 4.");
		

      // Bump up settler train plan
      // Get the estimate of military needs
      //setMilitaryUnitCostForecast();
      xsDisableSelf();

      xsEnableRule("fillInWallGaps");
      xsEnableRule("fillInWallGapsAgressive");
	  
      xsEnableRule("ironHorseMonitor");

      xsEnableRule("balloonMonitor");

      // Enable advanced arsenal upgrades
      xsEnableRule("advancedArsenalUpgradeMonitor");

      if (cMyCiv == cCivBritish)
        xsEnableRule("ManorMonitor");
      
      // Enable 'New Way' upgrades for Iroquois
      if (cMyCiv == cCivXPIroquois)
        xsEnableRule("newWayIroquoisMonitor");

      // Enable 'New Way' upgrades for Sioux
      if (cMyCiv == cCivXPSioux)
        xsEnableRule("newWaySiouxMonitor");

      // Enable golden pavillion upgrades for Japanese
      if (cMyCiv == cCivJapanese)
        xsEnableRule("goldenPavillionUpgradeMonitor");

      // Enable shrine upgrade for Japanese
      if (cMyCiv == cCivJapanese)
        xsEnableRule("shrineUpgradeMonitor");

      // Enable dojo upgrade for Japanese
      if (cMyCiv == cCivJapanese)
        xsEnableRule("dojoUpgradeMonitor");

      // Enable unit upgrade rules
      xsEnableRule("guardUpgradeMonitor");
      xsEnableRule("imperialUpgradeMonitor");
      xsEnableRule("championUpgradeMonitor");
      xsEnableRule("legendaryUpgradeMonitor");
      xsEnableRule("honoredUpgradeMonitor");
      xsEnableRule("exaltedUpgradeMonitor");
      xsEnableRule("artilleryUpgradeMonitor");
      xsEnableRule("minorNativeChampionUpgradeMonitor");
      xsEnableRule("minorAsianHonoredUpgradeMonitor");

      // Enable fort upgrade
      xsEnableRule("fortUpgradeMonitor");

      // Enable factory upgrades and production configuration
      xsEnableRule("factoryEconUpgradeMonitor");
      xsEnableRule("factoryTacticMonitor");
      

      // Enable revolution specific rules (only in about 1 out of 3 games)
      if ((civIsNative() == false) && (civIsAsian() == false) && (gSPC == false))
      {         
         xsEnableRule("revolutionMonitor");
         xsEnableRule("setRevolutionFlag");
         aiEcho("Revolution feature enabled for this game");
      }
      else
      {  aiEcho("Revolution feature disabled for this game");  }
      
      xsEnableRule("autoFeedRevolutionary"); // independent of probability above!

      xsEnableRule("age5Monitor");
      gAgeUpTime = xsGetTime();
      
  }
}


//==============================================================================
// rule age5Monitor
/*
   Watch for us reaching age 5.
*/
//==============================================================================
rule age5Monitor
inactive
minInterval 10
{
   if (kbGetAge() >= cAge5)
   {
      aiEcho("*** We're in age 5.");
      // Bump up settler train plan

      // Get the estimate of military needs
      //setMilitaryUnitCostForecast();
   
      // Enable spies upgrades
      if (civIsEuropean() == true)
        xsEnableRule("spiesMonitor");

      // Enable blockade upgrades
      if ( (civIsNative() == true) || (civIsAsian() == true) )
        xsEnableRule("spiesNativeMonitor");

      // Enable blockade upgrades
      if ( (civIsNative() == false) || (civIsAsian() == false) )
        xsEnableRule("blockadeMonitor");

      // Enable blockade upgrades
      if ( (civIsNative() == true) || (civIsAsian() == true) )
        xsEnableRule("blockadeNativeMonitor");

      // Enable capitol upgrades
      xsEnableRule("capitolUpgradeMonitor");

      // Enable sheep handling for British
      //if (cMyCiv == cCivBritish)
         //xsEnableRule("sheepBritishMonitor");

      // Enable sheep handling for Iroquois
      if (cMyCiv == cCivXPIroquois)
         xsEnableRule("sheepIroquoisMonitor");

      // Enable goat handling for Chinese
      if (cMyCiv == cCivChinese)
         xsEnableRule("goatMonitor");

      // Enable fireship plan
      //xsEnableRule("fireshipMonitor");

      // Enable tlaloccanoe plan
      //xsEnableRule("tlaloccanoeMonitor");

      // Enable brigade technologies at the consulate
      if (civIsAsian() == true)
         xsEnableRule("brigadeMonitor");

      if ( (cMyCiv != cCivBritish) || (cMyCiv != cCivOttomans) )
         xsEnableRule("techImperialCannonMonitor");
      if (cMyCiv == cCivBritish)
         xsEnableRule("techImperialRocketMonitor");
      if (cMyCiv == cCivOttomans)
         xsEnableRule("techImperialBombardMonitor");

      xsDisableSelf();
      gAgeUpTime = xsGetTime();



   }
}

//==============================================================================
// rule startFishing
//==============================================================================
rule startFishing
inactive
group tcComplete
mininterval 15
{         
   if (btRushBoom > 0.0)
     gNumFishBoats = (btRushBoom + 0.7) * 12.0; // 20 for rushers
   else
     gNumFishBoats = ((btRushBoom * -1.0) + 1.0) * 15.0; // 30 for boomer
      
   aiEcho("StartFishing rule running.  gGoodFishingMap is "+gGoodFishingMap+", cvOkToFish is "+cvOkToFish);
   if ((cvOkToFish == true) && (gGoodFishingMap == true))
   {
      aiEcho("*** Starting fishing plans.");
      
      gFishingPlan = aiPlanCreate("Fishing plan", cPlanFish); 
      aiPlanSetDesiredPriority(gFishingPlan, 95); 
      aiPlanAddUnitType(gFishingPlan, gFishingUnit, 1, 10, 200);        
      aiPlanSetEscrowID(gFishingPlan, cEconomyEscrowID); 
      aiPlanSetBaseID(gFishingPlan, kbBaseGetMainID(cMyID)); 
      aiPlanSetVariableVector(gFishingPlan, cFishPlanLandPoint, 0, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID))); 
      aiPlanSetVariableBool(gFishingPlan, cFishPlanBuildDock, 0, true);    
      aiPlanSetActive(gFishingPlan); 

      aiEcho("*** Creating maintain plan for fishing boats.");
      gFishingBoatMaintainPlan = createSimpleMaintainPlan(gFishingUnit, gNumFishBoats, true, kbBaseGetMainID(cMyID), 1);
   }
  xsDisableSelf();
}   




//==============================================================================
// initEcon
/*
   Called when the initial units have disembarked.  Sets up initial economy.
*/
//==============================================================================
void initEcon(void)
{
   if (kbGetCiv() == cCivFrench)  
      gEconUnit = cUnitTypeCoureur;
	  
   //BHG...
   if ( civIsAsian() == true )
   {
      gEconUnit = cUnitTypeypSettlerAsian;
      
      gTowerUnit = cUnitTypeypCastle;
      gFarmUnit = cUnitTypeypRicePaddy;
      gPlantationUnit = cUnitTypeypRicePaddy;
      
      gMarketUnit = cUnitTypeypTradeMarketAsian;
      gDockUnit = cUnitTypeYPDockAsian;
      
	  if (kbGetCiv()==cCivChinese){
		cvOkToBuildForts = true; // BHG: Chinese can buy a fort wagon from Russian consulate.
      }
      gFishingUnit = cUnitTypeypFishingBoatAsian;
    }
    //...BHG
   
   if (kbGetCiv() == cCivRussians)
      gTowerUnit = cUnitTypeBlockhouse;
	  
   if (civIsNative() == true)
   {      
      gEconUnit = cUnitTypeSettlerNative;
      gTowerUnit = cUnitTypeWarHut;
      gFarmUnit = cUnitTypeFarm;
      gLivestockPenUnit = cUnitTypeFarm;
   }
   
   if (kbGetCiv() == cCivXPAztec)   
   {
      gTowerUnit = cUnitTypeNoblesHut;
      gExplorerUnit = cUnitTypexpAztecWarchief;
   }   

   if (kbGetCiv() == cCivXPSioux)
   {  
      gHouseUnit = cUnitTypeTeepee; //shouldn't be tower unit...
      gExplorerUnit = cUnitTypexpLakotaWarchief;
   }
   
   if (kbGetCiv() == cCivOttomans)
      gCaravelUnit = cUnitTypeGalley;
   
   if (civIsNative() == true)
      gCaravelUnit = cUnitTypeCanoe;
   
   if (kbGetCiv() == cCivDutch)
      gGalleonUnit = cUnitTypeFluyt;
   
   if (civIsNative() == true)
   {
      gCaravelUnit = cUnitTypeCanoe;      
      gGalleonUnit = cUnitTypexpWarCanoe;
      gFrigateUnit = cUnitTypexpTlalocCanoe;      
   }  

   //BHG...
   if ( (kbGetCiv() == cCivChinese) || (kbGetCiv() == cCivSPCChinese) )
   {
      gHouseUnit = cUnitTypeypVillage;
            
      gCaravelUnit = cUnitTypeypFireship;
      gGalleonUnit = cUnitTypeypFuchuan;
      gFrigateUnit = cUnitTypeypWarJunk;
      gExplorerUnit = cUnitTypeAbstractChineseMonk;
      gLivestockPenUnit = cUnitTypeypVillage;
   }
   
   if ( (kbGetCiv() == cCivJapanese) || (kbGetCiv() == cCivSPCJapanese) || (kbGetCiv() == cCivSPCJapaneseEnemy) )
   {
      gEconUnit = cUnitTypeypSettlerJapanese;
   
      gHouseUnit = cUnitTypeypShrineJapanese;
      
      gTowerUnit = cUnitTypeypCastle;
      gExplorerUnit = cUnitTypeAbstractJapaneseMonk;
      gCaravelUnit = cUnitTypeypFune;
      gGalleonUnit = cUnitTypeypAtakabune;
      gFrigateUnit = cUnitTypeypTekkousen;
      
      gLivestockPenUnit = cUnitTypeypShrineJapanese;
   }
   
   if ( (kbGetCiv() == cCivIndians) || (kbGetCiv() == cCivSPCIndians) )
   {
      gHouseUnit = cUnitTypeypHouseIndian;
            
      gLivestockPenUnit = cUnitTypeypSacredField;
      gExplorerUnit = cUnitTypeAbstractIndianMonk;
      gEconUnit = cUnitTypeypSettlerIndian;
   }
   //...BHG

   if ( (kbGetCiv() == cCivBritish) || (kbGetCiv() == cCivTheCircle) || (kbGetCiv() == cCivPirate) || (kbGetCiv() == cCivSPCAct3))
      gHouseUnit = cUnitTypeManor;
   
   if ( (kbGetCiv() == cCivFrench) || (kbGetCiv() == cCivDutch) )
      gHouseUnit = cUnitTypeHouse;
   
   if ( (kbGetCiv() == cCivGermans) || (kbGetCiv() == cCivRussians) )
      gHouseUnit = cUnitTypeHouseEast;
   
   if ( (kbGetCiv() == cCivSpanish) || (kbGetCiv() == cCivPortuguese) || (kbGetCiv() == cCivOttomans) )
      gHouseUnit = cUnitTypeHouseMed;
   
   if ( kbGetCiv() == cCivXPIroquois )
   {  
      gHouseUnit = cUnitTypeLonghouse;
      gExplorerUnit = cUnitTypexpIroquoisWarChief;
   }

   if ( kbGetCiv() == cCivXPAztec )
      gHouseUnit = cUnitTypeHouseAztec;

   /*gMaximumBaseResourceDistance = 25.0 * (1+kbGetAge());	 50m, 75m, 100m, 125m, 150m in ages 1-5*/
     
   // Escrow initialization is now delayed until the TC is built, as
   // any escrow allocation prevents the AI from affording a TC.
   // For now, though, override the default and set econ/mil to 0
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceFood, 0.0);
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceWood, 0.0);   
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceGold, 0.0);
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceFame, 0.0);
      
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceFood, 0.0);
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceWood, 0.0);  
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceGold, 0.0);
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceFame, 0.0);
   
   kbEscrowAllocateCurrentResources();

   aiSetEconomyPercentage(1.0);
   aiSetMilitaryPercentage(1.0);    // Priority balance neutral

   gFarmBaseID=kbBaseGetMainID(cMyID);
   gFoodBaseID=kbBaseGetMainID(cMyID);       // Where we hunt or gather non-farm food.
   gGoldBaseID=kbBaseGetMainID(cMyID);
   gWoodBaseID=kbBaseGetMainID(cMyID);
 
   // Set up gatherer goal
   //gGatherGoal = initGatherGoal();

   //aiRepairUnit(-1);
   xsEnableRuleGroup("startup");
   //Lastly, force an update on the economy...call the function directly.
   econMaster();
}







//==============================================================================
// evaluateBases
/*
   Review the list of currently active economic bases for viability.  
   Determine if bases need to be added to or removed from the list.  
*/
//==============================================================================
void evaluateBases()
{
}



//==============================================================================
// updateForecasts
//==============================================================================

void updateForecasts()
{
	if (kbGetAge()==cAge1){
		if (kbGetCiv()==cCivDutch){
			weightGold=0.2;
			weightFood=0.5;
			weightWood=0.3;
		} else
		if (kbGetCiv()==cCivIndians){
			weightGold=0.1;
			weightWood=0.3;
			weightFood=0.6;
		} else{
			weightGold=0.1;
			weightWood=0.2;
			weightFood=0.7;
		}
	}
	else{
		//balance resources: //buggy: only 3 values:0.5, 1, 0.3333
		int increment=kbGetAge()*kbGetAge()*300;
		int reserveRes=1000+increment;
		float nowFood=0;
		float nowWood=0;
		float nowGold=0;
		nowFood=kbResourceGet(cResourceFood)-reserveRes;
		if (nowFood<increment*5) weightFood=0.3;
		if (nowFood<increment*3) weightFood=0.5;
		if (nowFood<increment) weightFood=0.7;
		if (nowFood<0) weightFood=1;
		if (nowFood<-300) weightFood=1.3;
		if (nowFood<-800) weightFood=1.9;
		if (nowFood<-1100) weightFood=2.3;
		if (nowFood<-1800) weightFood=2.9;
		if (nowFood<-3000) weightFood=3.5;
		
		nowGold=kbResourceGet(cResourceGold)-reserveRes;
		if (nowGold<increment*5) weightGold=0.3;
		if (nowGold<increment*3) weightGold=0.5;
		if (nowGold<increment) weightGold=0.7;
		if (nowGold<0) weightGold=1;
		if (nowGold<-300) weightGold=1.3;
		if (nowGold<-800) weightGold=1.9;
		if (nowGold<-1100) weightGold=2.3;
		if (nowGold<-1800) weightGold=2.9;
		if (nowGold<-3000) weightGold=3.5;
		
		nowWood=kbResourceGet(cResourceWood)-reserveRes;
		if (nowWood<increment*5) weightWood=0;
		if (nowWood<increment*4) weightWood=0.2;
		if (nowWood<increment*2) weightWood=0.4;
		if (nowWood<increment) weightWood=0.7;
		if (nowWood<0) weightWood=1;
		if (nowWood<-300) weightWood=1.3;
		if (nowWood<-800) weightWood=1.9;
		if (nowWood<-1100) weightWood=2.3;
		if (nowWood<-1800) weightWood=2.9;
		if (nowWood<-3000) weightWood=3.5;
		
		float total=weightFood+weightGold+weightWood;
		weightFood=weightFood/total;
		weightWood=weightWood/total;
		weightGold=weightGold/total;
		//echoMessage("Forecast:"+weightFood+" "+weightWood+" "+weightGold+"r"+reserveRes+"t"+total+"\nMyRes:"+kbResourceGet(cResourceFood)+"/"+kbResourceGet(cResourceWood)+"/"+kbResourceGet(cResourceGold));
	}
}


void updateResources()
{
   const int cMinResourcePerGatherer = 200;   // When our supply gets below this level, start farming/plantations.
   int mainBaseID = kbBaseGetMainID(cMyID);
   if (mainBaseID < 0)
      return;
   vector loc = kbBaseGetLocation(cMyID, mainBaseID);
	int nVillagers=0;
	int ecoCount=0;
	int p=50;
   
   if (xsGetTime() > 5000)
   {  
      int foodAmount = kbGetAmountValidResources( mainBaseID, cResourceFood , cAIResourceSubTypeEasy, 40.0  );
      if ( (kbGetCiv() != cCivJapanese) && (kbGetCiv() != cCivSPCJapanese) && (kbGetCiv() != cCivSPCJapaneseEnemy) )
      {  foodAmount = foodAmount + kbGetAmountValidResources( mainBaseID, cResourceFood , cAIResourceSubTypeHunt, 40.0  );  }
      if ( (kbGetCiv() != cCivIndians) && (kbGetCiv() != cCivSPCIndians) && (kbGetCiv() != cCivJapanese) && (kbGetCiv() != cCivSPCJapanese) && (kbGetCiv() != cCivSPCJapaneseEnemy) ) 
      {  foodAmount = foodAmount + kbGetAmountValidResources( mainBaseID, cResourceFood , cAIResourceSubTypeHerdable, 40.0  );  } 
            
      float percentOnFood = aiGetResourceGathererPercentage( cResourceFood, cRGPActual );
      int numFoodGatherers =  percentOnFood * kbUnitCount(cMyID, gEconUnit, cUnitStateAlive);
      if (numFoodGatherers < 1)
         numFoodGatherers = 1;
      int foodPerGatherer = foodAmount / numFoodGatherers;
      
      int woodAmount = kbGetAmountValidResources( mainBaseID, cResourceWood , cAIResourceSubTypeEasy, 60.0);
      float percentOnWood = aiGetResourceGathererPercentage( cResourceWood, cRGPActual );
      int numWoodGatherers =  percentOnWood * kbUnitCount(cMyID, gEconUnit, cUnitStateAlive);
      if (numWoodGatherers < 1)
         numWoodGatherers = 1;
      int woodPerGatherer = woodAmount / numWoodGatherers;
      
      int goldAmount = kbGetAmountValidResources(mainBaseID, cResourceGold , cAIResourceSubTypeEasy, 55.0);
      float percentOnGold = aiGetResourceGathererPercentage( cResourceGold, cRGPActual);
      int numGoldGatherers =  percentOnGold * kbUnitCount(cMyID, gEconUnit, cUnitStateAlive);
      if (numGoldGatherers < 1)
         numGoldGatherers = 1;
      int goldPerGatherer = goldAmount / numGoldGatherers;
      
      //echoMessage("around: Food "+foodAmount+", Wood "+woodAmount+", Gold "+goldAmount+"\nPer gatherer:   Food "+foodPerGatherer+", Wood "+woodPerGatherer+", Gold "+goldPerGatherer+"\nMyRes:"+kbResourceGet(cResourceFood)+"/"+kbResourceGet(cResourceWood)+"/"+kbResourceGet(cResourceGold));
      
      if ( (foodAmount < 10.0) && (gTimeToFarm == false) && (foodPerGatherer < cMinResourcePerGatherer) )
      {
         aiEcho("**** It's time to start farming! ****");
         gTimeToFarm = true;
      }
      if ( (woodAmount < 10.0) && (gStopToLogging == false) )
      {
         //echoMessage("**** We have none remote wood! ****");
         //gStopToLogging = true;
      }
      if ( (goldAmount < 3.0) && (gTimeForPlantations == false) && (goldPerGatherer < cMinResourcePerGatherer) )
      {
         aiEcho("**** It's time to start using plantations! ****");
         gTimeForPlantations = true;
      }      
	  
	//nVillagers=kbUnitCount(cMyID, cUnitTypeAbstractVillager, cUnitStateAlive);
	
	  if (gTimeToFarm && aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, gFarmUnit) < 0){
		ecoCount=kbUnitCount(cMyID,gFarmUnit,cUnitStateAlive);
		if (nVillagers>ecoCount*7){
			if (ecoCount==0) p=99;
			if (ecoCount==1) p=90;
			if (ecoCount==2) p=85;
			if (ecoCount==3) p=70;
			if (ecoCount==4) p=50;
			if (ecoCount==5) p=30;
			if (ecoCount==6) p=20;
			if (ecoCount>6) p=10;
			createSimpleBuildPlan(gFarmUnit, 1, p, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);  
			//echoMessage("new mill "+p);
		}
	  }
	  
	  if (gTimeForPlantations && aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, gPlantationUnit) < 0){
		ecoCount=kbUnitCount(cMyID,gPlantationUnit,cUnitStateAlive);
		if (nVillagers>ecoCount*7){
			if (ecoCount==0) p=99;
			if (ecoCount==1) p=90;
			if (ecoCount==2) p=85;
			if (ecoCount==3) p=70;
			if (ecoCount==4) p=50;
			if (ecoCount==5) p=30;
			if (ecoCount==6) p=20;
			if (ecoCount>6) p=10;
			createSimpleBuildPlan(gPlantationUnit, 1, p, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);  
			//echoMessage("new Plantation "+p);
		}
	  }
   }
}


//==============================================================================
/*
   econMaster(int mode, int value)

   Performs top-level economic analysis and direction.   Generally called
   by the econMasterRule, it can be called directly for special-event processing.
   EconMasterRule calls it with default parameters, directing it to do a full
   reanalysis.  
*/
//==============================================================================
void econMaster(int mode=-1, int value=-1)
{
   // Monitor main base supply of food and gold, activate farming and plantations when resources run low
   updateResources();
 
   // Update forecasts for economic and military expenses.  Set resource
   // exchange rates.
   updateForecasts(); 

   
   // Update our settler maintain targets, based on age, personality.
   updateSettlerCounts();
   
   // Maintain escrow balance based on age, personality, actual vs. desired settler pop.
   updateEscrows();
}




//==============================================================================
// rule econMasterRule
/*
   This rule calls the econMaster() function on a regular basis.  The 
   function is separate so that it may be called with a parameter for 
   unscheduled processing based on unexpected events.  
*/
//==============================================================================

rule gathererController
active
minInterval 1
{
	updateGatherers();
}

rule econMasterRule
inactive
group startup
minInterval 15
{
   //echoMessage("EconMaster");
   //xsSetRuleMinIntervalSelf(10+aiRandInt(20));
   econMaster();
}









//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
// Military
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================



rule doWalls
inactive
minInterval 10
{
   if ( kbGetAge() <= cAge2 )
      return;  // Don't start walls until we have pop room
   int wallPlanID=aiPlanCreate("WallInBase", cPlanBuildWall);
   if (wallPlanID != -1)
   {
      aiPlanSetVariableInt(wallPlanID, cBuildWallPlanWallType, 0, cBuildWallPlanWallTypeRing);
      aiPlanAddUnitType(wallPlanID, gEconUnit, 1, 1, 1);
      aiPlanSetVariableVector(wallPlanID, cBuildWallPlanWallRingCenterPoint, 0, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
      aiPlanSetVariableFloat(wallPlanID, cBuildWallPlanWallRingRadius, 0.0, 55.0);
      aiPlanSetVariableInt(wallPlanID, cBuildWallPlanNumberOfGates, 0, 30);
      aiPlanSetBaseID(wallPlanID, kbBaseGetMainID(cMyID));
      aiPlanSetEscrowID(wallPlanID, cEconomyEscrowID);
      aiPlanSetDesiredPriority(wallPlanID, 80);
      aiPlanSetActive(wallPlanID, true);
      sendStatement(cPlayerRelationAlly, cAICommPromptToAllyWhenIWallIn);
      //Enable our wall gap rule, too.
      xsEnableRule("fillInWallGaps");
      aiEcho("Enabling Wall Plan for Base ID: "+kbBaseGetMainID(cMyID));
   }   
   xsDisableSelf();
}


rule turtleUp
inactive
group tcComplete
minInterval 10
{
   // Number of towers ranges from 2 at 0.0 up to 7 at -1.0
   // Numbers below 0 also encourage shipping towers from the home city
   if ((kbUnitCount(cMyID, gEconUnit, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeSettlerWagon, cUnitStateAlive)) < 20)
      return;
   
   if ( (kbGetCiv() == cCivDutch) && (kbUnitCount(cMyID, cUnitTypeBank, cUnitStateABQ) < 1) )
      return;
   
   
      aiEcho("Decided to do walls.");
      gBuildWalls = true;
      xsEnableRule("delayWalls");   // Start walls once we have housing room
   
   // If it hasn't been defined elsewhere, set defaults
   if (civIsAsian() == false)
   {
      gNumTowers = ( (btOffenseDefense * -1.0) + 0.5 ) * 5.25; // 7 for extreme turtler, 2 for balanced.
      if (gNumTowers < 0)
         gNumTowers = 0.0;
      if (kbGetCivForPlayer(cMyID) == cCivXPAztec)
         gNumTowers = gNumTowers / 2;
   }
   else
   {
      gNumTowers = ( (btOffenseDefense * -1.0) + 0.7 ) * 3.0; // 5 for extreme turtler, 2 for balanced.
      if (gNumTowers < 0)
         gNumTowers = 0.0;
   }   

   if (cvOkToFortify == false)
      gNumTowers = 0.0;
   
   aiEcho("Planning on making "+gNumTowers+" towers.");
  
   xsEnableRule("towerManager");
   xsEnableRule("aztecWarhutUpgradeMonitor");
               
   xsDisableSelf();
}


rule wallUp
inactive
group tcComplete
minInterval 10
{
   int armySize = aiPlanGetNumberUnits(gLandDefendPlan0, cUnitTypeLogicalTypeLandMilitary) + aiPlanGetNumberUnits(gLandReservePlan, cUnitTypeLogicalTypeLandMilitary);
   int enemyArmySize = -1;      
   bool emergency = false;
   static int enemyArmyQuery = -1;
   if (enemyArmyQuery < 0)
   {  // Initialize the queryID
      enemyArmyQuery = kbUnitQueryCreate("Enemy army query");
      kbUnitQuerySetIgnoreKnockedOutUnits(enemyArmyQuery, true);
      kbUnitQuerySetPlayerRelation(enemyArmyQuery, cPlayerRelationEnemyNotGaia);
      kbUnitQuerySetUnitType(enemyArmyQuery, cUnitTypeLogicalTypeLandMilitary);
      kbUnitQuerySetState(enemyArmyQuery, cUnitStateAlive);
      kbUnitQuerySetSeeableOnly(enemyArmyQuery, true);   // Ignore units we think are under fog
   }
   
   // Check main base
   kbUnitQuerySetPosition(enemyArmyQuery,  kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
   kbUnitQuerySetMaximumDistance(enemyArmyQuery, cvDefenseReflexSearchRadius);   
   kbUnitQuerySetSeeableOnly(enemyArmyQuery, true);
   kbUnitQuerySetState(enemyArmyQuery, cUnitStateAlive);
   kbUnitQueryResetResults(enemyArmyQuery);
   enemyArmySize = kbUnitQueryExecute(enemyArmyQuery);
      
   if (enemyArmySize >= 3)   
   {  
      // Enemy army size at least 2x my size and more than 20 units total. Thus, we do wall
      if ( ((armySize * 3.0) < enemyArmySize) && (enemyArmySize >= 20))
      {  // Too big to handle   
		//echoMessage("Decide to do Walls");
         gBuildWalls = true;          
         xsEnableRule("doWalls");         
      }                     
   }    
}


/* setUnitPickerPreference()

   Updates the unit picker biases, arbitrates between the potentially conflicting sources.  

   Priority order is:

      1)  If control is from a trigger, that wins.  The unit line specified in gCommandUnitLine gets a +.8, all others +.2
      2)  If control is ally command, ditto.  (Can only be one unit due to UI limits.
      3)  If we're not under command, but cvPrimaryArmyUnit (and optionally cvSecondaryArmyUnit, cvTertiaryArmy Unit) are set, they rule.
               If just primary, it gets 0.8, with 0.2 for other classes.  
               If primary and secondary, they get 1.0 and 0.5, others get 0.0.
               If primary, secondary and tertiary, they get 0.8, 0.4 and 0.2, others get 0.0.
      4)  If enough enemy units have been spotted, bias towards appropriate counters
      5)  If not under command, no cv's are set, and no units have been spotted, we go with the btBiasCav, btBiasInf and btBiasArt line settings.  


*/
void setUnitPickerPreference(int upID = -1)
{ 
   // Add the main unit lines
   if (upID < 0)
      return;
   
  // Check for commanded unit preferences.
   if ( (gUnitPickSource == cOpportunitySourceTrigger) || (gUnitPickSource == cOpportunitySourceAllyRequest) )
   {  // We have an ally or trigger command, so bias everything for that one unit
      if (cvPrimaryArmyUnit < 0)
         return;     // This should never happen, it should be set when the unitPickSource is set.
      
      kbUnitPickResetAll(gLandUnitPicker);
      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractInfantry, 0.2);   // Range 0.0 to 1.0
      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractArtillery, 0.2 );
      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractCavalry, 0.2);
      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.2);
      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCoureur, 0.0);    // Avoid coureurs, they mess up econ/mil calcs.
      if (cMyCiv == cCivXPAztec)
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractLightInfantry, 0.2);

      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpWarrior, 0.0);    // Never pick xpWarrior or xpDogSoldier, available via dance only
      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpDogSoldier, 0.0);
      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpMedicineManAztec, 0.0);
      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpSkullKnight, 0.0);

      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpRam, 0.0);   // Avoid units the AI cannot handle properly
      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpPetard, 0.0);
      kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMortar, 0.0);

      return;
   }
   
   // Check for cv settings
   if ( cvPrimaryArmyUnit >= 0 )
   {
      kbUnitPickResetAll(gLandUnitPicker);
      
      // See if 1, 2, or 3 lines set.  If 1, score 0.8 vs. 0.2.  If 2, score 1.0, 0.5 and 0.0.  If 3, score 0.8, 0.4 and 0.2.
      if (cvSecondaryArmyUnit < 0)  // Only one line selected
      {
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractInfantry, 0.2);   // Range 0.0 to 1.0
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractArtillery, 0.2 );
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractCavalry, 0.2);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.2);
         if (cMyCiv == cCivXPAztec)
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractLightInfantry, 0.2);

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCoureur, 0.0);    // Avoid coureurs, they mess up econ/mil calcs.

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpWarrior, 0.0);    // Never pick xpWarrior or xpDogSoldier, available via dance only
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpDogSoldier, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpMedicineManAztec, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpSkullKnight, 0.0);

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpRam, 0.0);   // Avoid units the AI cannot handle properly
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpPetard, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMortar, 0.0);

         if ( (kbGetCiv() == cCivJapanese) || (kbGetCiv() == cCivSPCJapanese) )    // Avoid Ninja or Ronin or Daimyos or Shogun
         {
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateNinja, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateRonin, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypDaimyoMasamune, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypDaimyoKiyomasa, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypDaimyoMototada, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypShogunTokugawa, 0.0);
         }

         if ( (kbGetCiv() == cCivIndians) || (kbGetCiv() == cCivSPCIndians) )    // Avoid mansabdar units
         {
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypNatMercGurkhaJemadar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypRajputMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypSepoyMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypZamburakMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypSowarMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypHowdahMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypMahoutMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypSiegeElephantMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypMercFlailiphantMansabdar, 0.0);
         }

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cvPrimaryArmyUnit, 0.8);
      }
      else if (cvTertiaryArmyUnit < 0)  // Two lines selected
      {
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractInfantry, 0.0);   // Range 0.0 to 1.0
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractArtillery, 0.0 );
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractCavalry, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.0);
         if (cMyCiv == cCivXPAztec)
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractLightInfantry, 0.0);

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCoureur, 0.0);    // Avoid coureurs, they mess up econ/mil calcs.  

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpWarrior, 0.0);    // Never pick xpWarrior or xpDogSoldier, available via dance only
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpDogSoldier, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpMedicineManAztec, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpSkullKnight, 0.0);

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpRam, 0.0);   // Avoid units the AI cannot handle properly
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpPetard, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMortar, 0.0);

         if ( (kbGetCiv() == cCivJapanese) || (kbGetCiv() == cCivSPCJapanese) )    // Avoid Ninja or Ronin or Daimyos or Shogun
         {
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateNinja, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateRonin, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypDaimyoMasamune, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypDaimyoKiyomasa, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypDaimyoMototada, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypShogunTokugawa, 0.0);
         }

         if ( (kbGetCiv() == cCivIndians) || (kbGetCiv() == cCivSPCIndians) )    // Avoid mansabdar units
         {
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypNatMercGurkhaJemadar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypRajputMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypSepoyMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypZamburakMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypSowarMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypHowdahMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypMahoutMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypSiegeElephantMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypMercFlailiphantMansabdar, 0.0);
         }

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cvPrimaryArmyUnit, 1.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cvSecondaryArmyUnit, 0.5);         
      }
      else  // Three lines selected
      {
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractInfantry, 0.0);   // Range 0.0 to 1.0
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractArtillery, 0.0 );
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractCavalry, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.0);
         if (cMyCiv == cCivXPAztec)
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractLightInfantry, 0.0);

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCoureur, 0.0);    // Avoid coureurs, they mess up econ/mil calcs.  

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpWarrior, 0.0);    // Never pick xpWarrior or xpDogSoldier, available via dance only
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpDogSoldier, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpMedicineManAztec, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpSkullKnight, 0.0);

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpRam, 0.0);   // Avoid units the AI cannot handle properly
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpPetard, 0.0);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMortar, 0.0);

         if ( (kbGetCiv() == cCivJapanese) || (kbGetCiv() == cCivSPCJapanese) )    // Avoid Ninja or Ronin or Daimyos or Shogun
         {
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateNinja, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateRonin, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypDaimyoMasamune, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypDaimyoKiyomasa, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypDaimyoMototada, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypShogunTokugawa, 0.0);
         }

         if ( (kbGetCiv() == cCivIndians) || (kbGetCiv() == cCivSPCIndians) )    // Avoid mansabdar units
         {
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypNatMercGurkhaJemadar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypRajputMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypSepoyMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypZamburakMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypSowarMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypHowdahMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypMahoutMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypSiegeElephantMansabdar, 0.0);
            kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypMercFlailiphantMansabdar, 0.0);
         }

         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cvPrimaryArmyUnit, 0.6);
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cvSecondaryArmyUnit, 0.2);         
         kbUnitPickSetPreferenceFactor(gLandUnitPicker, cvTertiaryArmyUnit, 0.2);         
      }
      return;
   }

   //======================== Set a new unit Preference Factor ========================//
   int effectiveAge = kbGetAge();
   if ( agingUp() == true )
      effectiveAge = effectiveAge + 1;
   int unitPreferenceRandomizer = aiRandInt(100); // 0-99
   int unitPreferenceRandomizerII = aiRandInt(10); // 0-9
   int cavalryPreferenceRandomizer = aiRandInt(10);  // 0-9

   float enemyToCounter = aiGetMostHatedPlayerID();
   float lightInfantryCount = kbUnitCount(enemyToCounter, cUnitTypeAbstractHeavyInfantry, cUnitStateAlive);
   float heavyCavalryCount = kbUnitCount(enemyToCounter, cUnitTypeAbstractInfantry, cUnitStateAlive) - lightInfantryCount +
                             kbUnitCount(enemyToCounter, cUnitTypeAbstractArtillery, cUnitStateAlive);
   float heavyInfantryCount = kbUnitCount(enemyToCounter, cUnitTypeAbstractLightCavalry, cUnitStateAlive);
   float lightCavalryCount = kbUnitCount(enemyToCounter, cUnitTypeAbstractHeavyCavalry, cUnitStateAlive);
   float artilleryCount = kbUnitCount(enemyToCounter, cUnitTypeAbstractInfantry, cUnitStateAlive);
   float cuirassierCount = kbUnitCount(enemyToCounter, cUnitTypeLogicalTypeLandMilitary, cUnitStateAlive);
   float totalEnemyCount = lightInfantryCount + heavyCavalryCount + heavyInfantryCount + lightCavalryCount + artilleryCount;
    
   if (kbUnitCount(enemyToCounter, cUnitTypeLogicalTypeLandMilitary, cUnitStateAlive) > 0)    
   {  
      /* We see one of this player's units for the first time...let's do some analysis on it

         Setup the military unit preferences.  These are just various strategies of unit
         combos and what-not that are more or less setup to coincide with the bonuses
         and mainline units of each civ.  We start with a random choice.  If we have
         an enemy unit type to preference against, we override that random choice.
          
         0:  Counter infantry (i.e. enemyToCounter == cUnitTypeAbstractInfantry).
         1:  Counter artillery (i.e. enemyToCounter == cUnitTypeAbstractArtillery).
         2:  Counter cavalry (i.e. enemyToCounter == cUnitTypeAbstractCavalry).
      */

      //Get our current resources.
      float totalResources = kbResourceGet(cResourceFood) + kbResourceGet(cResourceWood) + kbResourceGet(cResourceGold);
      float currentTrade=kbResourceGet(cResourceTrade);
      
      // Calculate enemy's basic unit ratio and favor appropriate counters
      float lightInfantryFactor = lightInfantryCount / totalEnemyCount;
      float heavyInfantryFactor = heavyInfantryCount / totalEnemyCount;
      float lightCavalryFactor = lightCavalryCount / totalEnemyCount;
      float heavyCavalryFactor = heavyCavalryCount / totalEnemyCount;
      float artilleryFactor = artilleryCount / totalEnemyCount;
      float cuirassierFactor = cuirassierCount / totalEnemyCount;
           
      switch(kbGetCiv())
      { 
          case cCivXPIroquois:
          {
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));
             if (effectiveAge == cAge2)
             { kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpTomahawk, heavyInfantryFactor); }
             else
             { kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpMusketWarrior, heavyInfantryFactor); }
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpAenna, lightInfantryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpMusketRider, lightCavalryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpHorseman, heavyCavalryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpLightCannon, artilleryFactor);
             break;
          }
          case cCivXPSioux:
          {
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));

             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpWarRifle, heavyInfantryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpWarBow, lightInfantryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpAxeRider, heavyCavalryFactor);
             if (effectiveAge == cAge2)
             { kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpWarClub, lightCavalryFactor); }
             else
             { kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpRifleRider, lightCavalryFactor); }
             break;
          }
          case cCivXPAztec:
          {
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));
 
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpCoyoteMan, heavyCavalryFactor);
             if ( (effectiveAge > cAge2) && (unitPreferenceRandomizer < 90) ) // 90 % for Jaguar Knight
             {  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpJaguarKnight, lightCavalryFactor+heavyInfantryFactor);  }
             else // 10 % for Puma Man
             {  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpPumaMan, lightCavalryFactor+heavyInfantryFactor);  }
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpMacehualtin, lightInfantryFactor);
                        
             break;
          }
          case cCivChinese:
          {
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0)); 
            
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypTerritorialArmy, lightInfantryFactor+heavyInfantryFactor);  
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypOldHanArmy, lightInfantryFactor+lightCavalryFactor);            
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypForbiddenArmy, heavyCavalryFactor);             
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypMingArmy, lightCavalryFactor);                                                    
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypFlameThrower, artilleryFactor);
             // Set preferences for consulate units                            
            /* if (currentTrade >= 400.0)
             {  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyRussian1, heavyCavalryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyBritish1, heavyInfantryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyGerman1, lightCavalryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyFrench1, cuirassierFactor);  BHG: useless for the AI...  
             }

             if (currentTrade >= 800.0)
             {  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyRussian2, heavyCavalryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyBritish2, heavyInfantryFactor+artilleryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyGerman2, lightCavalryFactor+lightInfantryFactor);  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyFrench2, cuirassierFactor);
             }
             
             if (currentTrade >= 1600.0)
             {  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyRussian3, lightCavalryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyBritish3, heavyCavalryFactor+artilleryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyGerman3, lightInfantryFactor+artilleryFactor);  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyFrench3, cuirassierFactor);
             }*/
             break;
          }
          case cCivJapanese:
          {
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));

             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypAshigaru, heavyInfantryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypYumi, lightInfantryFactor);
             
             if ( (effectiveAge > cAge3) && (kbResourceGet(cResourceFood) > (totalResources / 10.0) ) && (kbResourceGet(cResourceGold) > (totalResources / 10.0) ))
               kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypKensei, lightCavalryFactor); 
             else 
               kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypYabusame, lightCavalryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypNaginataRider, heavyCavalryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypFlamingArrow, artilleryFactor);
             // Set preferences for consulate units            
             /*if (currentTrade >= 400.0)
             {  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateRonin, cuirassierFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyDutch1, heavyInfantryFactor);  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyPortuguese1, lightInfantryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmySpanish1, heavyInfantryFactor);
             }
            
             if (currentTrade >= 800.0)
             {  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyDutch2, heavyInfantryFactor+lightCavalryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyPortuguese2, lightInfantryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmySpanish2, heavyInfantryFactor);
             }

             if (currentTrade >= 1600.0)
             {  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyDutch3, lightCavalryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyPortuguese3, heavyInfantryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmySpanish3, heavyInfantryFactor);
             }  */                      
             break;
          }
          case cCivIndians:
          {
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));  
            
              //BHG: elephants are too expensive!!
             if ( (effectiveAge > cAge4) && (kbResourceGet(cResourceFood) > (totalResources / 10.0) ) && (kbResourceGet(cResourceWood) > (totalResources / 10.0) ))
             {  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractMahout, cuirassierFactor); }
             if ( (effectiveAge > cAge4) && (kbResourceGet(cResourceFood) > (totalResources / 10.0) ) && (kbResourceGet(cResourceGold) > (totalResources / 10.0) ))
             {  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractHowdah, heavyCavalryFactor); }
             

             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractSepoy, heavyInfantryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractGurkha, lightInfantryFactor);              
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractSowar, heavyCavalryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractZamburak, lightCavalryFactor);
             //Set preferences for consulate units            
             /*if (currentTrade >= 400.0)
             {  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyBritish1, heavyInfantryFactor); 
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyPortuguese1, lightInfantryFactor); 
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyOttoman1, heavyCavalryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyFrench1, cuirassierFactor);   BHG: useless for the AI...  
             } 
            
             if (currentTrade >= 800.0)
             {
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyBritish2, heavyInfantryFactor+artilleryFactor); 
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyPortuguese2, lightInfantryFactor);  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyOttoman2, heavyInfantryFactor+heavyCavalryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyFrench2, cuirassierFactor);
             }

             if (currentTrade >= 1600.0)
             {  
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyBritish3, heavyCavalryFactor+artilleryFactor); 
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyPortuguese3, heavyInfantryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyOttoman3, heavyInfantryFactor+artilleryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeypConsulateArmyFrench3, cuirassierFactor);
             }    */        
             break;
          }
          case cCivBritish:
          { 
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));  
           
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMusketeer, heavyInfantryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeLongbowman, lightInfantryFactor); 
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeDragoon, lightCavalryFactor);     
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeHussar, heavyCavalryFactor);
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpHorseArtillery, artilleryFactor);
             break;
          }

          case cCivFrench:
          {
             kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));    
                
             // if we can afford the preferred Cuirassier, do it. 
             if ( (effectiveAge > cAge3) && (kbResourceGet(cResourceFood) > (totalResources / 10.0) ) && (kbResourceGet(cResourceGold) > (totalResources / 10.0) ))
             {  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCuirassier, cuirassierFactor); }
             else
             {  
                if (unitPreferenceRandomizer < 90)   // 90 % for Musketeer
                  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMusketeer, heavyInfantryFactor); 
                else    // 10 % for Halberdier
                  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeHalberdier, heavyInfantryFactor); 

                if (effectiveAge == cAge2)
                  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCrossbowman, lightInfantryFactor);
                else
                  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeSkirmisher, lightInfantryFactor);                                     
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeHussar, heavyCavalryFactor);
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeDragoon, lightCavalryFactor); 
             }                     
               break;
           }

           case cCivDutch:
           {                
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));                 
                
              int mercenaryID = -1;
              mercenaryID = getUnit(cUnitTypeMercenary, cMyID, cUnitStateAny);

              if (mercenaryID < 0)
                mercenaryID = getUnit(cUnitTypeMercRonin, cMyID, cUnitStateAny);
              if (mercenaryID < 0)
                mercenaryID = getUnit(cUnitTypeMercMameluke, cMyID, cUnitStateAny);
              if (mercenaryID < 0)
                mercenaryID = getUnit(cUnitTypeMercElmeti, cMyID, cUnitStateAny);
              if (mercenaryID < 0)
                mercenaryID = getUnit(cUnitTypeMercHackapell, cMyID, cUnitStateAny);
              if (mercenaryID < 0)
                mercenaryID = getUnit(cUnitTypeMercStradiot, cMyID, cUnitStateAny);

              if ( (mercenaryID >= 0) && (kbUnitVisible(mercenaryID) == true) && (effectiveAge > cAge3) && (kbResourceGet(cResourceGold) > (totalResources / 10.0) ))
              {              
                 kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMercRonin, heavyInfantryFactor+lightCavalryFactor);
                 kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMercMameluke, cuirassierFactor);
                 kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMercElmeti, cuirassierFactor);
                 kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMercHackapell, cuirassierFactor); 
                 kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMercStradiot, cuirassierFactor);                 
              }              
              else
              {                  
                 if (effectiveAge == cAge2)
                   kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypePikeman, heavyInfantryFactor);
                 else
                   kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeHalberdier, heavyInfantryFactor);
                 kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeSkirmisher, lightInfantryFactor); 
                 kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeHussar, heavyCavalryFactor);       
                 kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeRuyter, lightCavalryFactor); 
                 kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpHorseArtillery, artilleryFactor);    
              }
              break;   
           }

           case cCivSpanish:
           {
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));
             
              if (unitPreferenceRandomizerII < 6)  // 60 % for Musketeer
              {  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMusketeer, heavyInfantryFactor); }
              else if (unitPreferenceRandomizerII < 8)  // 20 % for Rodelero
              {  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeRodelero, heavyInfantryFactor); }
              else  // 20 % for Pikeman
              {  kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypePikeman, heavyInfantryFactor); }
 
              if (effectiveAge == cAge2)
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCrossbowman, lightInfantryFactor);
              else
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeSkirmisher, lightInfantryFactor); 
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeDragoon, lightCavalryFactor); 
              // 80 % for Lancer
              if ( (cavalryPreferenceRandomizer < 8) && (kbResourceGet(cResourceFood) > (totalResources / 10.0) ) && (kbResourceGet(cResourceGold) > (totalResources / 10.0) ))
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeLancer, heavyCavalryFactor); 
              else  // 20 % for Hussar
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeHussar, heavyCavalryFactor); 
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpHorseArtillery, artilleryFactor);
              
              break;
           }
 
           case cCivGermans:
           {
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));
              
              if (effectiveAge == cAge2)
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypePikeman, heavyInfantryFactor);

              if (unitPreferenceRandomizer < 90)  // 90 % for dopplesoldner      
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeDopplesoldner, lightCavalryFactor+heavyInfantryFactor);
              else // 10 % for War Wagon
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeWarWagon, lightCavalryFactor); 
              if (effectiveAge == cAge2)
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCrossbowman, lightInfantryFactor);
              else
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeSkirmisher, lightInfantryFactor);
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeUhlan, heavyCavalryFactor);              
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpHorseArtillery, artilleryFactor);
              break;
           }
 
           case cCivRussians:
           {
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));
   
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCossack, heavyCavalryFactor);
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCavalryArcher, lightCavalryFactor); 
              if (unitPreferenceRandomizer < 90)    // 90 % for Musketeer
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMusketeer, heavyInfantryFactor); 
              else    // 10 % for Halberdier
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeHalberdier, heavyInfantryFactor); 
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeStrelet, lightInfantryFactor); 
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpHorseArtillery, artilleryFactor);
              break;
           }

           case cCivPortuguese:
           {
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));        
                      
              if (unitPreferenceRandomizer < 90)    // 90 % for Musketeer
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeMusketeer, heavyInfantryFactor); 
              else    // 10 % for Halberdier
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeHalberdier, heavyInfantryFactor); 
          
              if (effectiveAge == cAge2)
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCrossbowman, lightInfantryFactor);
              else
                kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCacadore, lightInfantryFactor);
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeHussar, heavyCavalryFactor);
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeDragoon, lightCavalryFactor);
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpHorseArtillery, artilleryFactor); 
              break;                
           }

           case cCivOttomans:
           {
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbstractNativeWarrior, 0.8 + (btBiasNative / 2.0));

              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeJanissary, heavyInfantryFactor); 
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeAbusGun, lightInfantryFactor);
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeCavalryArcher, lightCavalryFactor);              
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypeHussar, heavyCavalryFactor);
              kbUnitPickSetPreferenceFactor(gLandUnitPicker, cUnitTypexpHorseArtillery, artilleryFactor);
              break;        
           }     
        } 
       return;     
    }
    
    /*if (civIsAsian() == true) 
    {  //Set preferences for consulate units
       setConsulateArmyPreference();
    }*/
}



//==============================================================================
// initUnitPicker
//==============================================================================
int initUnitPicker(string name="BUG", int numberTypes=1, int minUnits=10,
   int maxUnits=20, int minPop=-1, int maxPop=-1, int numberBuildings=1,
   bool guessEnemyUnitType=false)
{   
   //Create it.
   int upID=kbUnitPickCreate(name);
   if (upID < 0)
      return(-1);

   //Default init.
   kbUnitPickResetAll(upID);

   kbUnitPickSetPreferenceWeight(upID, 1.0);
   if (gSPC == false)
      kbUnitPickSetCombatEfficiencyWeight(upID, 2.0);    // Changed from 1.0 to dilute the power of the preference weight.
   else
      kbUnitPickSetCombatEfficiencyWeight(upID, 1.0);    // Leave it at 1.0 to avoid messing up SPC balance
      
   kbUnitPickSetCostWeight(upID, 0.0);
   //Desired number units types, buildings.
   kbUnitPickSetDesiredNumberUnitTypes(upID, numberTypes, numberBuildings, true);
   //Min/Max units and Min/Max pop.
   kbUnitPickSetMinimumNumberUnits(upID, minUnits);   // Sets "need" level on attack plans
   kbUnitPickSetMaximumNumberUnits(upID, maxUnits);   // Sets "max" level on attack plans, sets "numberToMaintain" on train plans for primary unit,
                                                      // half that for secondary, 1/4 for tertiary, etc.
   kbUnitPickSetMinimumPop(upID, minPop); // Not sure what this does...
   kbUnitPickSetMaximumPop(upID, maxPop); // If set, overrides maxNumberUnits for how many of the primary unit to maintain.
   
   //Default to land units.
   kbUnitPickSetEnemyPlayerID(upID, aiGetMostHatedPlayerID());
   kbUnitPickSetAttackUnitType(upID, cUnitTypeLogicalTypeLandMilitary);
   kbUnitPickSetGoalCombatEfficiencyType(upID, cUnitTypeLogicalTypeLandMilitary);
      
   xsEnableRule("siegeWeaponMonitor");
   
   //Done.
   return(upID);
}


//==============================================================================
// createTransportPlan
//==============================================================================
int createTransportPlan(string name="BUG", int startAreaID=-1, int goalAreaID=-1,
   bool persistent=false, int transportUnit=-1, int pri=-1, int baseID=-1)
{   
   //Create the plan.
   int planID=aiPlanCreate(name, cPlanTransport);
   if (planID < 0)
      return(-1);

   //Priority.
   aiPlanSetDesiredPriority(planID, pri);
   //Base.
   aiPlanSetBaseID(planID, baseID);
   //Set the areas.
   aiPlanSetVariableInt(planID, cTransportPlanPathType, 0, 1);
   aiPlanSetVariableInt(planID, cTransportPlanGatherArea, 0, startAreaID);
   aiPlanSetVariableInt(planID, cTransportPlanTargetArea, 0, goalAreaID);
   //Default the initial position to the start area's location.
   aiPlanSetInitialPosition(planID, kbAreaGetCenter(startAreaID));
   //Transport type.
   aiPlanSetVariableInt(planID, cTransportPlanTransportTypeID, 0, transportUnit);
   //Persistent.
   aiPlanSetVariableBool(planID, cTransportPlanPersistent, 0, persistent);
   //Always add the transport unit type.
   aiPlanAddUnitType(planID, transportUnit, 1, 1, 1);
   //Activate.
   aiPlanSetActive(planID);

   //Done.
   return(planID);
}

int getMatchTarget()    // Find an enemy player ID to attack.
{
   int count = 0;
   int retVal = -1;
   static int unitQueryID = -1;

   //If we don't have the query yet, create one.
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("navy target count");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
      kbUnitQuerySetPlayerRelation(unitQueryID, cPlayerRelationEnemyNotGaia);
   }
     
   kbUnitQuerySetUnitType(unitQueryID, cUnitTypeWallConnector);   // Wall Connector
   kbUnitQuerySetState(unitQueryID, cUnitStateABQ);
   count = kbUnitQueryExecute(unitQueryID);  // Cumulative, don't clear it.
   
   kbUnitQuerySetUnitType(unitQueryID, cUnitTypeLogicalTypeBuildingsNotWalls);   // Buildings
   kbUnitQuerySetState(unitQueryID, cUnitStateABQ);
   count = kbUnitQueryExecute(unitQueryID);  // Cumulative, don't clear it.
   
   if (count > 0)
      retVal = kbUnitGetPlayerID(kbUnitQueryGetResult(unitQueryID,0));
   
   aiEcho("Enemy unit owner is player "+retVal);
   
   return(retVal);
}

//==============================================================================
/*
   siegeWeaponMonitor
   
   make and update maintain plans for Siege Weapon

*/
//==============================================================================
rule siegeWeaponMonitor
inactive
minInterval 15
{
   if (aiTreatyActive() == true)
   {
      aiEcho("delayed because treaty is active.");
      return;
   }

   static int mortarPlan = -1;  
   int numMortar = 0;
   numMortar = 5;  
   int numberWalls = 0;

   static int ypHandMortarPlan = -1;  
   int numypHandMortar = 0;
   numypHandMortar = 10;  
   
   static int ypMorutaruPlan = -1;
   int numypMorutaru = 0;
   numypMorutaru = 5;  

   static int ypSiegeElephantPlan = -1;
   int numypSiegeElephant = 0;
   numypSiegeElephant = 5;

   static int xpRamPlan = -1;
   int numXpRam = 0;
   numXpRam = 5;

   //See how many walls our enemies have built.  Create our query if we don't already have one.
   static int wallQueryID=-1;
   if (wallQueryID < 0)
   {
      wallQueryID=kbUnitQueryCreate("wall count");
      kbUnitQuerySetIgnoreKnockedOutUnits(wallQueryID, true);
      kbUnitQuerySetPlayerRelation(wallQueryID, cPlayerRelationEnemyNotGaia);
   }   

   kbUnitQuerySetUnitType(wallQueryID, cUnitTypeWallConnector); 
   kbUnitQuerySetState(wallQueryID, cUnitStateABQ);
   kbUnitQueryResetResults(wallQueryID);
   numberWalls = kbUnitQueryExecute(wallQueryID);      

   // If we find a "lot" of walls. 
   if ( (numberWalls > 0) || (kbGetAge() >= cAge3) )
   {
      if (mortarPlan < 0)
      {  mortarPlan = createSimpleMaintainPlan(cUnitTypeMortar, numMortar, true, kbBaseGetMainID(cMyID), 1);  }
      else
      {  aiPlanSetVariableInt(mortarPlan, cTrainPlanNumberToMaintain, 0, numMortar); }

      if (ypHandMortarPlan < 0)
      {  ypHandMortarPlan = createSimpleMaintainPlan(cUnitTypeypHandMortar, numypHandMortar, true, kbBaseGetMainID(cMyID), 1);  }
      else
      {  aiPlanSetVariableInt(ypHandMortarPlan, cTrainPlanNumberToMaintain, 0, numypHandMortar); }

      if (ypMorutaruPlan < 0)
      {  ypMorutaruPlan = createSimpleMaintainPlan(cUnitTypeypMorutaru, numypMorutaru, true, kbBaseGetMainID(cMyID), 1);  }
      else
      {  aiPlanSetVariableInt(ypMorutaruPlan, cTrainPlanNumberToMaintain, 0, numypMorutaru); }

      if (ypSiegeElephantPlan < 0)
      {  ypSiegeElephantPlan = createSimpleMaintainPlan(cUnitTypeypSiegeElephant, numypSiegeElephant, true, kbBaseGetMainID(cMyID), 1);  }
      else
      {  aiPlanSetVariableInt(ypSiegeElephantPlan, cTrainPlanNumberToMaintain, 0, numypSiegeElephant); }
      
      if (xpRamPlan < 0)
      {  xpRamPlan = createSimpleMaintainPlan(cUnitTypexpRam, numXpRam, true, kbBaseGetMainID(cMyID), 1);  }
      else
      {  aiPlanSetVariableInt(xpRamPlan, cTrainPlanNumberToMaintain, 0, numXpRam); }
      
   }  
}

rule siegeWeaponManager
active
minInterval 15
{
   vector siegeWeaponVec = cInvalidVector;
   
   int tc = getUnit(cUnitTypeTownCenter, cMyID, cUnitStateAlive);   

   int siegeWeaponUnit = -1;

   if (siegeWeaponUnit < 0)
      siegeWeaponUnit = getUnit(cUnitTypeMortar, cMyID, cUnitStateAlive);
   if (siegeWeaponUnit < 0)
      siegeWeaponUnit = getUnit(cUnitTypeypHandMortar, cMyID, cUnitStateAlive);
   if (siegeWeaponUnit < 0)
      siegeWeaponUnit = getUnit(cUnitTypeypMorutaru, cMyID, cUnitStateAlive);
   if (siegeWeaponUnit < 0)
      siegeWeaponUnit = getUnit(cUnitTypeypSiegeElephant, cMyID, cUnitStateAlive);
   if (siegeWeaponUnit < 0) 
      siegeWeaponUnit = getUnit(cUnitTypexpRam, cMyID, cUnitStateAlive);

   if (siegeWeaponUnit >= 0)
      siegeWeaponVec = kbUnitGetPosition(siegeWeaponUnit);
   else
      siegeWeaponVec = kbUnitGetPosition(tc);  
       
   if (kbUnitCount(cMyID, cUnitTypeMortar, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeypHandMortar, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeypSiegeElephant, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypexpRam, cUnitStateAlive) +
       kbUnitCount(cMyID, cUnitTypeypMorutaru, cUnitStateAlive) >= 3) 
   { 
      if (getMatchTarget() > 0)  // There's something to attack :)
      {
         int attackPlan = aiPlanCreate("Mortar Attack plan", cPlanAttack);
         aiPlanSetVariableInt(attackPlan, cAttackPlanPlayerID, 0, getMatchTarget());
         aiPlanSetNumberVariableValues(attackPlan, cAttackPlanTargetTypeID, 2, true);
         aiPlanSetVariableInt(attackPlan, cAttackPlanTargetTypeID, 0, cUnitTypeWallConnector);          
         aiPlanSetVariableInt(attackPlan, cAttackPlanTargetTypeID, 1, cUnitTypeLogicalTypeBuildingsNotWalls);
         aiPlanSetVariableVector(attackPlan, cAttackPlanGatherPoint, 0, siegeWeaponVec);
         aiPlanSetVariableFloat(attackPlan, cAttackPlanGatherDistance, 0, 100.0);
         aiPlanSetVariableInt(attackPlan, cAttackPlanRefreshFrequency, 0, 5);
         aiPlanSetDesiredPriority(attackPlan, 58); 
         aiPlanAddUnitType(attackPlan, cUnitTypeMortar, 1, 3, 6); 
         aiPlanAddUnitType(attackPlan, cUnitTypeypHandMortar, 1, 5, 10);
         aiPlanAddUnitType(attackPlan, cUnitTypeypMorutaru, 1, 5, 10);
         aiPlanAddUnitType(attackPlan, cUnitTypeypSiegeElephant, 1, 3, 6);
         aiPlanAddUnitType(attackPlan, cUnitTypexpRam, 1, 3, 6);
         aiPlanSetInitialPosition(attackPlan, siegeWeaponVec);
         aiEcho("***** ATTACK, plan ID is +attackPlan *****"); 
         aiPlanSetActive(attackPlan, true);
      }
   }
}
//==============================================================================
/*
   moveDefenseReflex(vector, radius, baseID)
   
   Move the defend and reserve plans to the specified location
   Sets the gLandDefendPlan0 to a high pop count, so it steals units from the reserve plan,
   which will signal the AI to not start new attacks as no reserves are available.
*/
//==============================================================================
void moveDefenseReflex(vector location=cInvalidVector, float radius=-1.0, int baseID=-1)
{
   if (radius < 0.0)
      radius = cvDefenseReflexRadiusActive;
   if (location != cInvalidVector)
   {
      aiPlanSetVariableVector(gLandDefendPlan0, cDefendPlanDefendPoint, 0, location);
      aiPlanSetVariableFloat(gLandDefendPlan0, cDefendPlanEngageRange, 0, radius);  
      aiPlanSetVariableFloat(gLandDefendPlan0, cDefendPlanGatherDistance, 0, radius - 10.0);
      aiPlanAddUnitType(gLandDefendPlan0, cUnitTypeLogicalTypeLandMilitary, 0, 0, 200);
      
      aiPlanSetVariableVector(gLandReservePlan, cDefendPlanDefendPoint, 0, location);
      aiPlanSetVariableFloat(gLandReservePlan, cDefendPlanEngageRange, 0, radius);    
      aiPlanSetVariableFloat(gLandReservePlan, cDefendPlanGatherDistance, 0, radius - 10.0);
      aiPlanAddUnitType(gLandReservePlan, cUnitTypeLogicalTypeLandMilitary, 0, 0, 1);
      
      gDefenseReflex = true;
      gDefenseReflexBaseID = baseID;
      gDefenseReflexLocation = location;
      gDefenseReflexStartTime = xsGetTime();
      gDefenseReflexPaused = false;
   }
   aiEcho("******** Defense reflex moved to base "+baseID+" with radius "+radius+" and location "+location);
}

//==============================================================================
/*
   pauseDefenseReflex()
   
   The base (gDefenseReflexBaseID) is still under attack, but we don't have enough
   forces to engage.  Retreat to main base, set a small radius, and wait until we 
   have enough troops to re-engage through a moveDefenseReflex() call.
   Sets gLandDefendPlan0 to high troop count to keep reserve plan empty.
   Leaves the base ID and location untouched, even though units will gather at home.
*/
//==============================================================================
void pauseDefenseReflex(void)
{
   vector loc = kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID));
   if ( gForwardBaseState != cForwardBaseStateNone )
      loc = gForwardBaseLocation;
   
   aiPlanSetVariableVector(gLandDefendPlan0, cDefendPlanDefendPoint, 0, loc);  
   aiPlanSetVariableFloat(gLandDefendPlan0, cDefendPlanEngageRange, 0, cvDefenseReflexRadiusPassive);   
   aiPlanSetVariableFloat(gLandDefendPlan0, cDefendPlanGatherDistance, 0, cvDefenseReflexRadiusPassive - 10.0);
   
   aiPlanSetVariableVector(gLandReservePlan, cDefendPlanDefendPoint, 0, loc);
   aiPlanSetVariableFloat(gLandReservePlan, cDefendPlanEngageRange, 0, cvDefenseReflexRadiusPassive);    
   aiPlanSetVariableFloat(gLandReservePlan, cDefendPlanGatherDistance, 0, cvDefenseReflexRadiusPassive - 10.0);   
   
   aiPlanAddUnitType(gLandDefendPlan0, cUnitTypeLogicalTypeLandMilitary, 0, 0, 200);
   aiPlanAddUnitType(gLandReservePlan, cUnitTypeLogicalTypeLandMilitary, 0, 0, 1);

   
   gDefenseReflexPaused = true;
   
   aiEcho("******** Defense reflex paused.");
}

//==============================================================================
/*
   endDefenseReflex()
   
   Move the defend and reserve plans to their default positions
*/
//==============================================================================
void endDefenseReflex(void)
{
   vector resLoc = kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID));
   vector defLoc = kbBaseGetLocation(cMyID,kbBaseGetMainID(cMyID));
   if ( gForwardBaseState != cForwardBaseStateNone )
   {
      resLoc = gForwardBaseLocation;
      defLoc = gForwardBaseLocation;
   }
   aiPlanSetVariableVector(gLandDefendPlan0, cDefendPlanDefendPoint, 0, defLoc);  // Main base or forward base (if forward base exists)
   aiPlanSetVariableFloat(gLandDefendPlan0, cDefendPlanEngageRange, 0, cvDefenseReflexRadiusActive);  
   aiPlanSetVariableFloat(gLandDefendPlan0, cDefendPlanGatherDistance, 0, cvDefenseReflexRadiusActive - 10.0);
   aiPlanAddUnitType(gLandDefendPlan0, cUnitTypeLogicalTypeLandMilitary, 0, 0, 1);     // Defend plan will use 1 unit to defend against stray snipers, etc.
   
   aiPlanSetVariableVector(gLandReservePlan, cDefendPlanDefendPoint, 0, resLoc);  
   aiPlanSetVariableFloat(gLandReservePlan, cDefendPlanEngageRange, 0, cvDefenseReflexRadiusPassive);   // Small radius
   aiPlanSetVariableFloat(gLandReservePlan, cDefendPlanGatherDistance, 0, cvDefenseReflexRadiusPassive - 10.0);
   aiPlanAddUnitType(gLandReservePlan, cUnitTypeLogicalTypeLandMilitary, 0, 0, 200);   // All unused troops
   
   aiEcho("******** Defense reflex terminated for base "+gDefenseReflexBaseID+" at location "+gDefenseReflexLocation);
   aiEcho("******** Returning to "+resLoc);
   aiEcho(" Forward base ID is "+gForwardBaseID+", location is "+gForwardBaseLocation);
   
   gDefenseReflex = false;
   gDefenseReflexPaused = false;
   gDefenseReflexBaseID = -1;
   gDefenseReflexLocation = cInvalidVector;
   gDefenseReflexStartTime = -1;
}

rule endDefenseReflexDelay    // Use this instead of calling endDefenseReflex in the createMainBase function, so that the new BaseID will be available.
inactive
minInterval 1
{
   xsDisableSelf();
   endDefenseReflex();
}


int baseBuildingCount(int baseID = -1)
{
   int retVal = -1;
   
   if (baseID >= 0)  // Check for buildings in the base, regardless of player ID (only baseOwner can have buildings there)
      retVal = kbBaseGetNumberUnits(kbBaseGetOwner(baseID), baseID, cPlayerRelationAny, cUnitTypeBuilding);
   
   
   return(retVal);
}



//==============================================================================
/*
   shipManager

   After early exploration, move the ship back to the TC (as close as pathing
   allows).  Monitor its motion. Once it stops, set a defend plan, and put the
   ship into broadside mode.  This prevents it from being destroyed by other 
   ships, but means it's only fair against land units.
*/
//==============================================================================
/*rule shipManager
inactive
group tcComplete
minInterval 10
{
   // Totally disabling this for now, so the caravel will fish.
   // That means no naval defend plan at all.
   xsDisableSelf();
   return;
   
   static vector lastPosition = cInvalidVector;
   static int numberMoves = 0;
   
   if ( cRandomMapName == "caribbean" )      // Keep exploring, forever.
   {
      xsDisableSelf();
      return;
   }
   
   int caravelID = getUnit(cUnitTypeLogicalTypeNavalMilitary);
   if (caravelID < 0)
   {
      xsDisableSelf();
      return;
   }
   
   vector currentPosition = kbUnitGetPosition(getUnit(cUnitTypeLogicalTypeNavalMilitary)); 
   if ( (distance(currentPosition,lastPosition) < 1.0) || (numberMoves > 5) )
   {  // We haven't moved for 10 seconds, or we've tried too many times.  Start the defend plan and exit
      gWaterDefendPlan0 = aiPlanCreate("Primary Water Defend", cPlanDefend);
      aiPlanAddUnitType(gWaterDefendPlan0, cUnitTypeLogicalTypeNavalMilitary , 1, 1, 200);    // Grab first caravel and any others
      
      aiPlanSetVariableVector(gWaterDefendPlan0, cDefendPlanDefendPoint, 0, lastPosition);
      aiPlanSetVariableFloat(gWaterDefendPlan0, cDefendPlanEngageRange, 0, 60.0);    // Loose
      aiPlanSetVariableBool(gWaterDefendPlan0, cDefendPlanPatrol, 0, false);
      aiPlanSetVariableFloat(gWaterDefendPlan0, cDefendPlanGatherDistance, 0, 20.0);
      aiPlanSetInitialPosition(gWaterDefendPlan0, lastPosition);
      aiPlanSetUnitStance(gWaterDefendPlan0, cUnitStanceDefensive);
      aiPlanSetVariableInt(gWaterDefendPlan0, cDefendPlanRefreshFrequency, 0, 20);
      aiPlanSetVariableInt(gWaterDefendPlan0, cDefendPlanAttackTypeID, 0, cUnitTypeUnit); // Only units
      aiPlanSetDesiredPriority(gWaterDefendPlan0, 20);    // Very low priority, gather unused units.
      aiPlanSetActive(gWaterDefendPlan0); 
      aiEcho("Creating primary water defend plan at "+lastPosition);

      xsDisableSelf();     // My work here is done.
      return;
   }
   else
   {
      // Else, rule keeps waiting...
      aiTaskUnitMove(caravelID, kbUnitGetPosition(getUnit(cUnitTypeTownCenter)));
      lastPosition = currentPosition;
      aiEcho("Moving ship "+caravelID+" toward "+kbUnitGetPosition(getUnit(cUnitTypeTownCenter)));
      numberMoves = numberMoves + 1;
   }   
}*/

//==============================================================================
// useLevy
//==============================================================================
rule useLevy
inactive
group tcComplete
minInterval 3
{
	return;
	
   static int levyPlan = -1;
   vector mainBaseVec = cInvalidVector;
   
   mainBaseVec =  kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));
   
   float enemyHP = getlocHP(mainBaseVec,40);
   float allyHP = getlocHP(mainBaseVec,40,cPlayerRelationAlly);

   string tmp="e"+enemyHP+"f:"+allyHP+"\nMyRes:"+kbResourceGet(cResourceFood)+"/"+kbResourceGet(cResourceWood)+"/"+kbResourceGet(cResourceGold);
      
   if (levyPlan < 0) // No plan, see if we need one.
   {
      if (enemyHP >= allyHP+250) // We're behind by 6 or more
      {
		tmp=tmp+"\nstart";
         levyPlan = createSimpleResearchPlan(cTechLevy, getUnit(cUnitTypeTownCenter), cMilitaryEscrowID, 99);     // Extreme priority
      }
   }
   else  // Plan exists, make sure it's still needed
   {
      
      if (enemyHP >= allyHP+250)
      {  // Do nothing
		tmp=tmp+"\nwait";
      }
      else
      {
         tmp=tmp+"\nStop";
         aiPlanDestroy(levyPlan);
         levyPlan = -1;
      }
   }
    //echoMessage(tmp);
}


//==============================================================================
// mostHatedEnemy
// Determine who we should attack, checking control variables
//==============================================================================
rule mostHatedEnemy
minInterval 15
active
{
   if ( (cvPlayerToAttack > 0) && (kbHasPlayerLost(cvPlayerToAttack) == false) )
   {
      aiEcho("****  Changing most hated enemy from "+aiGetMostHatedPlayerID()+" to "+cvPlayerToAttack);
      aiSetMostHatedPlayerID(cvPlayerToAttack);
      return;
   }
   
   // For now, find your position in your team (i.e. 2nd of 3) and
   // target the corresponding player on the other team.  If the other
   // team is smaller, count through again.  (I.e. in a 5v2, player 5 on
   // one team will attack the 1st player on the other.)

   int ourTeamSize = 0;
   int theirTeamSize = 0;
   int myPosition = 0;
   int i=0;
   
   for (i=1; <cNumberPlayers)
   {
      if (kbHasPlayerLost(i) == false)
      {
         if ( kbGetPlayerTeam(i) == kbGetPlayerTeam(cMyID) )
         {  // Self or ally 
            ourTeamSize = ourTeamSize + 1;
            if ( i == cMyID )
               myPosition = ourTeamSize;   
         }
         else
         {
            theirTeamSize = theirTeamSize + 1;
         }
      }
   }
   int targetPlayerPosition = 0;
   
   if (myPosition > theirTeamSize)
   {
      targetPlayerPosition = myPosition - (theirTeamSize * (myPosition/theirTeamSize));      // myPosition modulo theirTeamSize
      if (targetPlayerPosition == 0)
         targetPlayerPosition = theirTeamSize;  // Need to be in range 1...teamsize, not 0...(teamSize-1).
   }
   else
      targetPlayerPosition = myPosition;
   
   int playerCount = 0;
   // Find the corresponding enemy player
   for (i=1; <cNumberPlayers)
   {
      if ( (kbHasPlayerLost(i) == false) && (kbGetPlayerTeam(i) != kbGetPlayerTeam(cMyID) ) )
      {
         playerCount = playerCount + 1;
         if (playerCount == targetPlayerPosition)
         { 
            if (aiGetMostHatedPlayerID() != i)
               aiEcho("****  Changing most hated enemy from "+aiGetMostHatedPlayerID()+" to "+i);
            aiSetMostHatedPlayerID(i);
            if (gLandUnitPicker >= 0)
               kbUnitPickSetEnemyPlayerID(gLandUnitPicker, i); // Update the unit picker
         }
      }
   }
}


//==============================================================================
// initMil
//==============================================================================
void initMil(void)
{
   aiSetAttackResponseDistance(80.0);

   // Choose a most-hated player
   xsEnableRule("mostHatedEnemy");

   // Call it immediately
   mostHatedEnemy();   

   //Auto gather our military units.
   aiSetAutoGatherMilitaryUnits(true);
}






//==============================================================================
/* Defend0

   Create a defend plan, protect the main base.
*/
//==============================================================================
rule defend0
inactive
group startup
minInterval 10
{  
   
   if (gLandDefendPlan0 < 0)
   {
      gLandDefendPlan0 = aiPlanCreate("Primary Land Defend", cPlanDefend);
      aiPlanAddUnitType(gLandDefendPlan0, cUnitTypeLogicalTypeLandMilitary , 0, 0, 1);    // Small, until defense reflex
      
      aiPlanSetVariableVector(gLandDefendPlan0, cDefendPlanDefendPoint, 0, kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID)));
      aiPlanSetVariableFloat(gLandDefendPlan0, cDefendPlanEngageRange, 0, cvDefenseReflexRadiusActive);  
      aiPlanSetVariableFloat(gLandDefendPlan0, cDefendPlanGatherDistance, 0, cvDefenseReflexRadiusActive - 10.0);
      aiPlanSetVariableBool(gLandDefendPlan0, cDefendPlanPatrol, 0, false);
      aiPlanSetVariableFloat(gLandDefendPlan0, cDefendPlanGatherDistance, 0, 40.0);
      aiPlanSetInitialPosition(gLandDefendPlan0, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
      aiPlanSetUnitStance(gLandDefendPlan0, cUnitStanceDefensive);
      aiPlanSetVariableInt(gLandDefendPlan0, cDefendPlanRefreshFrequency, 0, 30);
      aiPlanSetVariableInt(gLandDefendPlan0, cDefendPlanAttackTypeID, 0, cUnitTypeUnit); // Only units
      aiPlanSetDesiredPriority(gLandDefendPlan0, 20);    // Very low priority, don't steal from attack plans
      aiPlanSetActive(gLandDefendPlan0); 
      aiEcho("Creating primary land defend plan");
   
      gLandReservePlan = aiPlanCreate("Land Reserve Units", cPlanDefend);
      aiPlanAddUnitType(gLandReservePlan, cUnitTypeLogicalTypeLandMilitary , 0, 5, 200);    // All mil units, high MAX value to suck up all excess
      
      aiPlanSetVariableVector(gLandReservePlan, cDefendPlanDefendPoint, 0, kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID)));
      if (kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID)) == cInvalidVector)
      {  if (getUnit(cUnitTypeAIStart, cMyID) >= 0)   // If no mil gather point, but there is a start block, use it.
            aiPlanSetVariableVector(gLandReservePlan, cDefendPlanDefendPoint, 0, kbUnitGetPosition(getUnit(cUnitTypeAIStart, cMyID)));
      }
      if (aiPlanGetVariableVector(gLandReservePlan, cDefendPlanDefendPoint, 0) == cInvalidVector) // If all else failed, use main base location.
         aiPlanSetVariableVector(gLandReservePlan, cDefendPlanDefendPoint, 0, kbBaseGetLocation(kbBaseGetMainID(cMyID)));
      aiPlanSetVariableFloat(gLandReservePlan, cDefendPlanEngageRange, 0, 60.0);    // Loose
      aiPlanSetVariableBool(gLandReservePlan, cDefendPlanPatrol, 0, false);
      aiPlanSetVariableFloat(gLandReservePlan, cDefendPlanGatherDistance, 0, 40.0);
      aiPlanSetInitialPosition(gLandReservePlan, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
      aiPlanSetUnitStance(gLandReservePlan, cUnitStanceDefensive);
      aiPlanSetVariableInt(gLandReservePlan, cDefendPlanRefreshFrequency, 0, 30);
      aiPlanSetVariableInt(gLandReservePlan, cDefendPlanAttackTypeID, 0, cUnitTypeUnit); // Only units
      aiPlanSetDesiredPriority(gLandReservePlan, 45);    // gather unused units.
      aiPlanSetActive(gLandReservePlan); 
      if (gMainAttackGoal >= 0)
         aiPlanSetVariableInt(gMainAttackGoal, cGoalPlanReservePlanID, 0, gLandReservePlan);
      aiEcho("Creating reserve plan");
      xsEnableRule("endDefenseReflexDelay"); // Reset to relaxed stances after plans have a second to be created.
   }
}






//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
// General strategy (spans econ/mil)
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================






//==============================================================================
/* getActiveMissionCount(int missionType)
   
   Returns the number of active missions that match the optional type.  If no types
   is given, returns the total number of missions.
*/
//==============================================================================
/*int getActiveMissionCount(int missionType=-1)
{
   int retVal = 0;
   
   int missionCount = 0;
   int missionIndex = 0;
   int missionID = -1;
   
   for (missionIndex = 0; < aiPlanGetNumber(cPlanMission, -1, true))    // Step through all mission plans.  -1 means any state is OK.
   {
      missionID = aiPlanGetIDByIndex(cPlanMission, -1, true, missionIndex);
      if ( (missionType == -1) || (aiPlanGetVariableInt(missionID, cMissionPlanType, 0) == missionType) )   // No type specified, or type matches
         retVal = retVal + 1;
   }      
   
   return(retVal);
}*/


void setMilPopLimit(int age1=10, int age2=30, int age3=80, int age4=130, int age5=170)
{
   int limit = 10;
   int age = kbGetAge();
   if (age == cvMaxAge)
      age = cAge5;   // If we're at the highest allowed age, go for our full mil pop.
      // This overrides the normal settings, so an SPC AI capped at age 3 can use his full
      // military pop.
   switch(age)
   {
      case cAge1:
      {
         limit = age1;
         break;
      }
      case cAge2:
      {
         limit = age2;
         break;
      }
      case cAge3:
      {
         limit = age3;
         break;
      }
      case cAge4:
      {
         limit = age4;
         break;
      }
      case cAge5:
      {
         limit = age5;
         break;
      }
   }
   if ( (cvMaxArmyPop >= 0) && (cvMaxNavyPop >= 0) && (limit > (cvMaxArmyPop + cvMaxNavyPop)) )
      limit = cvMaxArmyPop+cvMaxNavyPop;     // Manual pop limits have been set
   
   if ( (cvMaxNavyPop <= 0) && (cvMaxArmyPop < limit) && (cvMaxArmyPop >= 0) )  // Only army pop set?
      limit = cvMaxArmyPop;
   
   aiSetMilitaryPop(limit);
}


//==============================================================================
/* rule popManager
   
   Set population limits based on age, difficulty and control variable settings
*/
//==============================================================================
rule popManager
active
minInterval 15
{
   float difficulty = aiGetWorldDifficulty();
   int intDifficulty = difficulty;
   int cvPopLimit = 200;      // Used to calculate implied total pop limit based on civ, army and navy components.
   if ( (kbGetCiv() == cCivChinese) || (kbGetCiv() == cCivSPCChinese) )
      cvPopLimit = 220;
   if (cMyCiv == cCivXPAztec)
		cvPopLimit=255;
   if (cMyCiv == cCivXPIroquois)
		cvPopLimit=215;
	if (cMyCiv == cCivXPSioux)
		cvPopLimit=235;

   //if ( (cvMaxCivPop >= 0) && (cvMaxArmyPop >= 0) && (cvMaxNavyPop >= 0) )    // All three //are defined, so set a hard total
   //   cvPopLimit = cvMaxCivPop + cvMaxArmyPop + cvMaxNavyPop;
   
   int maxMil = -1;  // The full age-5 max military size...to be reduced in earlier ages to control runaway spending.

 // Typically 70 econ, 130 mil.
	 gMaxPop = cvPopLimit;
	 //if (gMaxPop > cvPopLimit)
		//gMaxPop = cvPopLimit;
	 if (civIsNative() == true)
	   aiSetEconomyPop(80);
	 else
	   aiSetEconomyPop(70);
	 if ( (aiGetEconomyPop() > cvMaxCivPop) && (cvMaxCivPop >= 0) )
		aiSetEconomyPop(cvMaxCivPop);
	 maxMil = gMaxPop - aiGetEconomyPop();
	 if (btRushBoom <= 0) // boom
	   setMilPopLimit(0, maxMil/2, maxMil*2/3, maxMil, maxMil);
	 if (btRushBoom > 0) // rush
	   setMilPopLimit(0, maxMil, maxMil, maxMil, maxMil);
   
   //gGoodArmyPop = aiGetMilitaryPop();
   gGoodArmyPop = 5+3*kbGetAge();
}


//==============================================================================
// findACompletedTownCenter
//
// Will find A Completed Town Center
//==============================================================================
bool findACompletedTownCenter()
{
   bool retVal = false;
   static int townCenterQuery = -1;
   if (townCenterQuery < 0)
   {
      townCenterQuery=kbUnitQueryCreate("Completed Town Center Query");
      kbUnitQuerySetIgnoreKnockedOutUnits(townCenterQuery, true);
   }  
   //Define the query
   if (townCenterQuery != -1)
   {
      kbUnitQuerySetPlayerRelation(townCenterQuery, -1);
      kbUnitQuerySetPlayerID(townCenterQuery, cMyID);
      kbUnitQuerySetUnitType(townCenterQuery, cUnitTypeTownCenter);
      kbUnitQuerySetState(townCenterQuery, cUnitStateAny);
      kbUnitQuerySetAscendingSort(townCenterQuery, true);   // Ascending distance from initial location	  
   }  
   else
      return(retVal);

   // Run the query
   kbUnitQueryResetResults(townCenterQuery);
   int count = kbUnitQueryExecute(townCenterQuery);
   int tcID = kbUnitQueryGetResult(townCenterQuery, 0);  
   
   if (tcID >=0)
      retVal = true;

   return(retVal);
}

//==============================================================================
/* townCenterComplete
   
   Wait until the town center is complete, then build other stuff next to it.
   In a start with a TC, this will fire very quickly.
   In a scenario with no TC, we do the best we can.

*/
//==============================================================================
rule townCenterComplete
inactive
minInterval 2
{
   // First, create a query if needed, then use it to look for a completed town center
   static int townCenterQuery = -1;
   if (townCenterQuery < 0)
   {
      townCenterQuery=kbUnitQueryCreate("Completed Town Center Query");
      kbUnitQuerySetIgnoreKnockedOutUnits(townCenterQuery, true);
      if (townCenterQuery < 0)
         aiEcho("****  Query create failed in townCenterComplete.");
	   //Define the query
	   if (townCenterQuery != -1)
	   {
		   kbUnitQuerySetPlayerID(townCenterQuery, cMyID);
         kbUnitQuerySetUnitType(townCenterQuery, cUnitTypeTownCenter);
         kbUnitQuerySetState(townCenterQuery, cUnitStateAlive);
	   }
   }

   // Run the query
   kbUnitQueryResetResults(townCenterQuery);
   int count = kbUnitQueryExecute(townCenterQuery);

   //-- If our startmode is one without a TC, wait until a TC is found.
	if ((count < 1) && (gStartMode != cStartModeScenarioNoTC) )
      return;
   
   int tcID = kbUnitQueryGetResult(townCenterQuery, 0);
   aiEcho("New TC is "+tcID+" at "+kbUnitGetPosition(tcID));
   

   if (tcID >= 0)
   {
      int tcBase = kbUnitGetBaseID(tcID);
      gMainBase = kbBaseGetMainID(cMyID);
      aiEcho(" TC base is "+tcBase+", main base is "+gMainBase);
      // We have a TC.  Make sure that the main base exists, and it includes the TC
      if ( gMainBase < 0 )
      {  // We have no main base, create one
         gMainBase = createMainBase(kbUnitGetPosition(tcID));
         aiEcho(" We had no main base, so we created one: "+gMainBase);
      }
      tcBase = kbUnitGetBaseID(tcID);  // in case base ID just changed
      if ( tcBase != gMainBase ) 
      {
         aiEcho(" TC "+tcID+" is not in the main base ("+gMainBase+".");
         aiEcho(" Setting base "+gMainBase+" to non-main, setting base "+tcBase+" to main.");
         kbBaseSetMain(cMyID, gMainBase, false);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeEasy, gMainBase);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeHunt, gMainBase);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeHerdable, gMainBase);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeHuntAggressive, gMainBase);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeFish, gMainBase);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeFarm, gMainBase);
         aiRemoveResourceBreakdown(cResourceWood, cAIResourceSubTypeEasy, gMainBase);
         aiRemoveResourceBreakdown(cResourceGold, cAIResourceSubTypeEasy, gMainBase);
         kbBaseSetMain(cMyID, tcBase, true);
         gMainBase = tcBase;
      }
   }
   else
   {
      aiEcho("No TC, leaving main base as it is.");
   }
   
   kbBaseSetMaximumResourceDistance(cMyID, kbBaseGetMainID(cMyID), 150.0);

   
   // Set up the escrows
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceFood, .70);
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceWood, .50);   
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceGold, .30);
   kbEscrowSetPercentage(cEconomyEscrowID, cResourceShips, 0.0);
   kbEscrowSetCap(cEconomyEscrowID, cResourceFood, 200);
   kbEscrowSetCap(cEconomyEscrowID, cResourceWood, 200);
   if (kbGetCiv() == cCivDutch)
   {
      kbEscrowSetCap(cEconomyEscrowID, cResourceFood, 350); // Needed for banks
      kbEscrowSetCap(cEconomyEscrowID, cResourceWood, 350);
   }
   kbEscrowSetCap(cEconomyEscrowID, cResourceGold, 200);
   
   
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceFood, .0);
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceWood, .50);  
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceGold, .0);
   kbEscrowSetPercentage(cMilitaryEscrowID, cResourceShips, 0.0);
   kbEscrowSetCap(cMilitaryEscrowID, cResourceFood, 300);
   kbEscrowSetCap(cMilitaryEscrowID, cResourceWood, 300);
   kbEscrowSetCap(cMilitaryEscrowID, cResourceGold, 300);
    
   kbEscrowCreate("VP Site", cResourceFood, .25, cRootEscrowID);     // Add an accelerator escrow
   gVPEscrowID = kbEscrowGetID("VP Site");   
   
   kbEscrowSetPercentage(gVPEscrowID, cResourceFood, 0.0);        
   kbEscrowSetPercentage(gVPEscrowID, cResourceWood, 0.0);        
   kbEscrowSetPercentage(gVPEscrowID, cResourceGold, 0.0);
   kbEscrowSetPercentage(gVPEscrowID, cResourceShips, 0.0);
   kbEscrowSetCap(gVPEscrowID, cResourceFood, 0);
   kbEscrowSetCap(gVPEscrowID, cResourceWood, 300);
   kbEscrowSetCap(gVPEscrowID, cResourceGold, 300);
   
   kbEscrowCreate("Age Upgrade", cResourceShips, 0.0, cRootEscrowID);     // Add an upgrade escrow
   gUpgradeEscrowID = kbEscrowGetID("Age Upgrade");    
   
   kbEscrowSetPercentage(gUpgradeEscrowID, cResourceFood, 0.0);        
   kbEscrowSetPercentage(gUpgradeEscrowID, cResourceWood, 0.0);        
   kbEscrowSetPercentage(gUpgradeEscrowID, cResourceGold, 0.0);
   kbEscrowSetPercentage(gUpgradeEscrowID, cResourceShips, 0.0);
   kbEscrowSetCap(gUpgradeEscrowID, cResourceFood, 0.0);
   kbEscrowSetCap(gUpgradeEscrowID, cResourceWood, 0.0);
   kbEscrowSetCap(gUpgradeEscrowID, cResourceGold, 0.0);
   
   kbEscrowAllocateCurrentResources();
 
   // Town center found, start building the other buildings
   xsDisableSelf();
   xsEnableRuleGroup("tcComplete");

   if (kbGetCiv() == cCivOttomans)
      xsEnableRule("ottomanMonitor");
  
   gSettlerMaintainPlan = createSimpleMaintainPlan(gEconUnit, xsArrayGetInt(gTargetSettlerCounts, kbGetAge()), true, kbBaseGetMainID(cMyID), 1);   
   if (kbGetCiv() == cCivOttomans)
      aiPlanSetVariableInt(gSettlerMaintainPlan, cTrainPlanNumberToMaintain, 0, 0); // To not throw off resource planning

   if (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0)
   {
      gWaterTransportUnitMaintainPlan = createSimpleMaintainPlan(gCaravelUnit, 2, true, kbBaseGetMainID(cMyID), 1);
      xsEnableRule("navyManager");
      navyManager();
   }

   if (aiGetGameMode() == cGameModeDeathmatch)
      deathMatchSetup();   // Add a bunch of custom stuff for a DM jump-start.

   if (kbUnitCount(cMyID, cUnitTypeypDaimyoRegicide, cUnitStateAlive) > 0)   
      xsEnableRule("regicideMonitor");
      
   if (cRandomMapName=="Honshu" || cRandomMapName=="HonshuRegicide")
   {
      createSimpleBuildPlan(gDockUnit, 1, 100, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
      xsEnableRule("navyManager");
   }
   if (cRandomMapName=="Ceylon")
      xsEnableRule("navyManager");

}

rule useFactoryWagons
inactive
minInterval 5
{

   int wagon = getUnit(cUnitTypeFactoryWagon, cMyID, cUnitStateAlive);
   
   // Check if we have a factory wagon, but no factory build plan....
   if ( (wagon >= 0) && (aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeFactory) < 0) )
   {
      int planID = createSimpleBuildPlan(cUnitTypeFactory, 1, 50, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 0); //No settler builders
      aiPlanAddUnitType(planID, cUnitTypeFactoryWagon, 1, 1, 1);
   }
}

rule useAIStart
inactive
minInterval 10
{
   //If there is a start object, use it.
   int coveredWagon = getUnit(gCoveredWagonUnit, cMyID, cUnitStateAlive);
   int unitID = -1;
   unitID = getUnit(cUnitTypeAIStart, cMyID, cUnitStateAlive);

   if (unitID < 0)
      unitID = getUnit(gCoveredWagonUnit, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeExplorer, cMyID, cUnitStateAlive); 
   if (unitID < 0)
      unitID = getUnit(cUnitTypexpAztecWarchief, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypexpIroquoisWarChief, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypexpLakotaWarchief, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeAbstractChineseMonk, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeAbstractIndianMonk, cMyID, cUnitStateAlive);   
   if (unitID < 0)
      unitID = getUnit(cUnitTypeAbstractJapaneseMonk, cMyID, cUnitStateAlive);   
   if (unitID < 0)
      unitID = getUnit(gEconUnit, cMyID, cUnitStateAlive);
     
   // Check if we have a start object, but no TC build plan....  
   if ( ((unitID >= 0) || (coveredWagon >= 0)) && (aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeTownCenter) < 0) )   
   {
      // We need to figure out where to put the new TC.  Start with the current main base as an anchor.
      // From that, check all gold mines within 100 meters and on the same area group.  For each, see if there
      // is a TC nearby, if not, do it.  
      // If all gold mines fail, use the main base location and let it sort it out in the build plan, i.e. TCs repel, gold attracts, etc.
      static int resourcesQuery = -1;
      if (resourcesQuery < 0)
      {
         resourcesQuery = kbUnitQueryCreate("resources query for TC placement");
         kbUnitQuerySetPlayerID(resourcesQuery, 0);
         kbUnitQuerySetUnitType(resourcesQuery, cUnitTypeMine);
         kbUnitQuerySetMaximumDistance(resourcesQuery, 500.0);
         kbUnitQuerySetAscendingSort(resourcesQuery, true);   // Ascending distance from initial location
      }
      kbUnitQuerySetPosition(resourcesQuery, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
      kbUnitQueryResetResults(resourcesQuery);
      int resourcesCount = kbUnitQueryExecute(resourcesQuery);
      int i = 0;
      int resourcesID = -1;
      int oppID = -1;
      vector loc = cInvalidVector;     
      int resourcesAreaGroup = -1;
      int mainAreaGroup = kbAreaGroupGetIDByPosition(kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
      bool found = false;
      aiEcho("**** Starting TC placement search, found "+resourcesCount+" resources.");
      for (i=0; < resourcesCount)
      {  // Check each resources for a nearby TC, i.e. w/in 30 meters.
         resourcesID = kbUnitQueryGetResult(resourcesQuery, i);
         loc = kbUnitGetPosition(resourcesID);
         resourcesAreaGroup = kbAreaGroupGetIDByPosition(loc);         
         if ( (getUnitByLocation(cUnitTypeTownCenter, cPlayerRelationAny, cUnitStateABQ, loc, 30.0) < 0) && (resourcesAreaGroup == mainAreaGroup) )
         {
            aiEcho("Found good resources at "+loc);
            found = true;
            break;
         }
         else
         {
            aiEcho("Ignoring resources at "+loc);
         }
      }
      
      // If we found a resources without a nearby TC, use that mine's location.  If not, use the main base.
      if (found == false)
         loc = kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));
      
      gTCSearchVector = loc;
      
      aiEcho("Moving wagon to "+gTCSearchVector);
      aiTaskUnitMove(coveredWagon, kbUnitGetPosition(resourcesID));
      startTCBuildPlan(gTCSearchVector);       
   }
}

/*
rule reInitGatherers
inactive
group tcComplete
minInterval 5
{
   updateFoodBreakdown();     // Reinit each gatherer breakdown in case initial pass didn't yet have proper "actual" assignments.
   updateWoodBreakdown();
   updateGoldBreakdown();
   xsDisableSelf();
}
*/
//==============================================================================
//int createSimpleQuery
//==============================================================================
int createSimpleQuery(int playerRelationOrID=cMyID, int unitTypeID=-1, int state=cUnitStateAlive)
{
   static int unitQueryID=-1;
   //If we don't have the query yet, create one.
   if (unitQueryID < 0)
   {
      unitQueryID=kbUnitQueryCreate("miscGetUnitQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(unitQueryID, true);
   }

   //Define a query to get all matching units
   if (unitQueryID != -1)  //if unitQueryID=-1, query creation fails.
   {
     if (playerRelationOrID > 1000)      // Too big for player ID number
     {
	kbUnitQuerySetPlayerID(unitQueryID, -1);  // Clear the player ID, so playerRelation takes precedence.
	kbUnitQuerySetPlayerRelation(unitQueryID, playerRelationOrID);
     }
     else
     {
	kbUnitQuerySetPlayerRelation(unitQueryID, -1);
        kbUnitQuerySetPlayerID(unitQueryID, playerRelationOrID);
     }
     kbUnitQuerySetUnitType(unitQueryID, unitTypeID);
     kbUnitQuerySetState(unitQueryID, state);
   }
   return(unitQueryID);
}

vector shrineBuildPlaceSearch(void)
{
	static int huntableQuery = -1;
	if (huntableQuery==-1){
		huntableQuery=kbUnitQueryCreate("queryHuntablesForShine");
		kbUnitQuerySetIgnoreKnockedOutUnits(huntableQuery, true);
		kbUnitQuerySetPlayerID(huntableQuery, -1);
		kbUnitQuerySetPlayerRelation(huntableQuery, cPlayerRelationAny);
		kbUnitQuerySetState(huntableQuery, cUnitStateAlive);
		kbUnitQuerySetUnitType(huntableQuery, cUnitTypeHuntable);
	}
	
	kbUnitQueryResetResults(huntableQuery);
	int huntableCount = kbUnitQueryExecute(huntableQuery);
	
	//string tmp="HN:"+huntableCount;
	float minDist=9999;
    vector loc = cInvalidVector;
    int i = 0;
	for(i=0;<huntableCount){
		int hID=kbUnitQueryGetResult(huntableQuery, i);
		vector tmpLoc=kbUnitGetPosition(hID);
		int nHuntables=getUnitCountByLocation(cUnitTypeHuntable, 0, cUnitStateAlive, tmpLoc, 20.0);
		int shrines = getUnitCountByLocation(cUnitTypeypShrineJapanese, cMyID, cUnitStateABQ, tmpLoc, 20.0);
		if (nHuntables<=shrines*4) {
			//tmp=tmp+"Sh,";
			continue;
		}
		float enemyHP=getlocHP(tmpLoc,30);
		if (enemyHP>800) {
			//tmp=tmp+"EHP,";
			continue;
		}
		int nEnemyBuildings=getUnitByLocation(cUnitTypeLogicalTypeBuildingsNotWallsOrGroves, cPlayerRelationEnemyNotGaia, cUnitStateAlive, tmpLoc, 70.0);
		if (nEnemyBuildings>1) {
			//tmp=tmp+"EB,";
			continue;
		}
		
		int myBuildingID=getClosestUnitByLocation(cUnitTypeLogicalTypeBuildingsNotWallsOrGroves,cMyID,cUnitStateAlive,tmpLoc);
		int myExplorerID=getClosestUnitByLocation(cUnitTypeAbstractJapaneseMonk,cMyID,cUnitStateAlive,tmpLoc);
		//So it ignore wheather monk is dead or not.
		
		float tmpScore=0;
		if (myBuildingID==-1) 
			tmpScore=999+distance(kbUnitGetPosition(myExplorerID),tmpLoc);
		else tmpScore=distance(kbUnitGetPosition(myBuildingID),tmpLoc);
		
		if (tmpScore<2) continue;
		if (tmpScore<minDist){
			minDist=tmpScore;
			loc=tmpLoc;
		}
		//tmp=tmp+"OK"+tmpScore+",";
	}
   
	//echoMessage(tmp);
	
    return(loc);
}

//==============================================================================
/* House monitor

   Make sure we have a house build plan active, regardless of the number of houses.
*/
//==============================================================================
rule houseMonitor
inactive
group tcComplete
minInterval 3
{  
	if (kbGetCiv()==cCivXPSioux) return;
	
   int houseBuildPlanID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, gHouseUnit);
   static int shrineStartedTime=-1;
   /*Damn Explorer cannot be checked via state!
   if (houseBuildPlanID>=0 && kbUnitCount(cMyID,cUnitTypeAbstractJapaneseMonk,cUnitStateAlive)==0)
		aiPlanAddUnitType(houseBuildPlanID, gEconUnit, 1, 1, 1);
   */
	if (((kbGetCiv() == cCivSPCJapanese)||(kbGetCiv() == cCivJapanese)||(kbGetCiv() == cCivSPCJapaneseEnemy)))
	{
		if (houseBuildPlanID>=0) return;
		int gBuilder=cUnitTypeAbstractJapaneseMonk;
			
		vector shrineBuildPlace = shrineBuildPlaceSearch();
		
		//aiTaskUnitMove(getUnit(cUnitTypeypMonkJapanese),shrineBuildPlace);
		aiTaskUnitMove(getUnit(cUnitTypeypMonkJapanese2),shrineBuildPlace);
		
		//echoMessage("Shrine failed:"+(shrineBuildPlace));
		
		if ((shrineBuildPlace != cInvalidVector)) {
			int oP=houseBuildPlanID;
			houseBuildPlanID = aiPlanCreate("shrineBuildPlanID ", cPlanBuild);	
			aiPlanSetVariableInt(houseBuildPlanID, cBuildPlanBuildingTypeID, 0, gHouseUnit);	
			aiPlanSetVariableFloat(houseBuildPlanID, cBuildPlanBuildingBufferSpace, 0, 4.0);
			aiPlanSetVariableVector(houseBuildPlanID, cBuildPlanCenterPosition, 0, shrineBuildPlace);
			aiPlanSetVariableFloat(houseBuildPlanID, cBuildPlanCenterPositionDistance, 0, 5.0);
			
			aiPlanAddUnitType(houseBuildPlanID, cUnitTypeAbstractJapaneseMonk, 1, 1, 2);
			
			aiPlanSetMilitary(houseBuildPlanID, false);
			aiPlanSetEconomy(houseBuildPlanID, true);	
			aiPlanSetEscrowID(houseBuildPlanID, cEconomyEscrowID);
			aiPlanSetDesiredPriority(houseBuildPlanID, 96);
			aiPlanSetActive(houseBuildPlanID);
			
			shrineStartedTime=xsGetTime();
			echoMessage("Ss"+houseBuildPlanID+"@"+shrineBuildPlace+","+oP);
			//lastHousePlanTime = xsGetTime();				
			//lastShrineTime = xsGetTime();
		}//else 
	}
	
   if ( (kbGetCiv() == cCivDutch) && (kbUnitCount(cMyID, cUnitTypeBank, cUnitStateABQ) < 1) && (kbUnitCount(cMyID, gHouseUnit, cUnitStateABQ) >= 1))
      return;  // Dutch need bank before getting extra houses

   if (kbGetBuildLimit(cMyID, gHouseUnit) <= kbUnitCount(cMyID, gHouseUnit, cUnitStateAlive))
      return;     // Don't build if we're at limit.
   
  
   if ( (kbGetPopCap()-kbGetPop()) < (15 + (10*kbGetAge())) && 
		(	(houseBuildPlanID < 0)  || 
			((houseBuildPlanID >= 0) && (kbGetCiv()==cCivJapanese) && (xsGetTime()-shrineStartedTime>30000))	)   // None in progress, and pop headroom < 15 in cAge1, etc.  
	  )
    {  // Start a new one  
		aiPlanDestroy(houseBuildPlanID);
		createSimpleBuildPlan(gHouseUnit, 1, 95, true, cEconomyEscrowID, 	kbBaseGetMainID(cMyID), 1);
		echoMessage("pop cap!, build one");
    }
}


//==============================================================================
/* Monastery monitor

   Make sure we have a Monastery around, and research healing upgrades for 
   Indians and Japanese. (All other upgrades are useless for the AI.)

*/
//==============================================================================
rule monasteryMonitor
inactive
minInterval 60
{
   int upgradePlanID = -1;

   // Disable rule for non-Asian civs
   if (civIsAsian() == false)
   {
      xsDisableSelf();
      return;
   }

   // Don't start too soon.
   if (kbGetAge() < cAge1)
     return;

   // Build a monastery if there is none
   if ( (kbUnitCount(cMyID, cUnitTypeypMonastery, cUnitStateABQ) < 1) && (aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypMonastery) < 0) ) 
   {
      createSimpleBuildPlan(cUnitTypeypMonastery, 1, 80, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
      aiEcho("Starting a new monastery build plan.");
   }

   // Research monk for Chinese, Indians and Japanese
   if (kbTechGetStatus(cTechypMonasteryJapaneseHealing) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryJapaneseHealing);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryJapaneseHealing, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMonasteryCriticalUpgrade) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryCriticalUpgrade);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryCriticalUpgrade, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMonasteryAttackSpeed) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryAttackSpeed);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryAttackSpeed, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMonasteryShaolinWarrior) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryShaolinWarrior);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryShaolinWarrior, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMonasteryDiscipleAura) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryDiscipleAura);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryDiscipleAura, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMonasteryImprovedHealing) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryImprovedHealing);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryImprovedHealing, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMonasteryStompUpgrade) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryStompUpgrade);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryStompUpgrade, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMonasteryIndianSpeed) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryIndianSpeed);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryIndianSpeed, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMonasteryKillingBlowUpgrade) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryKillingBlowUpgrade);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryKillingBlowUpgrade, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMonasteryJapaneseCombat) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryJapaneseCombat);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryJapaneseCombat, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMonasteryRangedSplash) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMonasteryRangedSplash);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMonasteryRangedSplash, getUnit(cUnitTypeypMonastery), cMilitaryEscrowID, 50);
      return;
   }
}


//==============================================================================
/* BHG Consulate monitor

   Make sure we have a Consulate around.
   Research Consulate Techs as appropriate.

*/
//==============================================================================
rule consulateMonitor
inactive
group tcComplete
minInterval 3
{
   // Disable rule for non-Asian civilizations
   if (civIsAsian() == false) 
   {
      xsDisableSelf();
      return;
   }

   // Quit if consulate is not allowed and not already built
   if ((cvOkToBuildConsulate == false) && (kbUnitCount(cMyID, cUnitTypeypConsulate, cUnitStateAlive) == 0)) 
   {
      return;
   }

   // Build a consulate if there is none, not until age1...
   if ((kbUnitCount(cMyID, cUnitTypeypConsulate, cUnitStateABQ) < 1) && (aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypConsulate) < 0) && (kbGetAge()>cAge1))
   {
      createSimpleBuildPlan(cUnitTypeypConsulate, 1, 75, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
      aiEcho("Starting a new consulate build plan.");
   }

   // If no option has been chosen already, choose one now
   if ((kbUnitCount(cMyID, cUnitTypeypConsulate, cUnitStateAlive) > 0) && (gFlagChosen == false))
   {
      chooseConsulateFlag();
   }
   
   // Maximize export generation in Age 4 and above
   /*if (kbGetAge() >= cAge4)
   {
      int consulateQueryID = -1;
       
      consulateQueryID = kbUnitQueryCreate("consulateGetUnitQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(consulateQueryID, true);
      
      //Define a query to get consulate
      if (consulateQueryID != -1)
      {
         kbUnitQuerySetPlayerRelation(consulateQueryID, -1);
         kbUnitQuerySetPlayerID(consulateQueryID, cMyID);
         kbUnitQuerySetUnitType(consulateQueryID, cUnitTypeypConsulate);
         kbUnitQuerySetState(consulateQueryID, cUnitStateAlive);
         kbUnitQueryResetResults(consulateQueryID);
         int numberFound = kbUnitQueryExecute(consulateQueryID);

         // Set export gathering rate to +60 %
         if (numberFound > 0)
         {
            aiUnitSetTactic(kbUnitQueryGetResult(consulateQueryID, 0), cTacticTax10);
         }
      }
   }*/
   
   // Research consulate technologies one at a time
   // Unavailable techs are simply ignored
   int upgradePlanID = -1;

   // British technologies
   // (Redcoats, RogersRangers, LifeGuards)
   if (kbTechGetStatus(cTechypConsulateBritishRedcoats) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateBritishRedcoats);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateBritishRedcoats, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateBritishRogersRangers) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateBritishRogersRangers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateBritishRogersRangers, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateBritishLifeGuards) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateBritishLifeGuards);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateBritishLifeGuards, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }

   // Dutch technologies
   // (bank wagon, arsenal wagon, church wagon)
   if (kbTechGetStatus(cTechypConsulateDutchSaloonWagon) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateDutchSaloonWagon);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateDutchSaloonWagon, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateDutchArsenalWagon) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateDutchArsenalWagon);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateDutchArsenalWagon, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateDutchChurchWagon) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateDutchChurchWagon);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateDutchChurchWagon, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }

   // French technologies
   // (WoodCrates, CoinCrates, FoodCrates)
   if (kbTechGetStatus(cTechypConsulateFrenchWoodCrates) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateFrenchWoodCrates);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateFrenchWoodCrates, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateFrenchCoinCrates) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateFrenchCoinCrates);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateFrenchCoinCrates, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateFrenchFoodCrates) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateFrenchFoodCrates);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateFrenchFoodCrates, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }

   // German technologies
   // (FoodTrickle, WoodTrickle, CoinTrickle)
   if (kbTechGetStatus(cTechypConsulateGermansFoodTrickle) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateGermansFoodTrickle);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateGermansFoodTrickle, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateGermansWoodTrickle) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateGermansWoodTrickle);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateGermansWoodTrickle, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateGermansCoinTrickle) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateGermansCoinTrickle);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateGermansCoinTrickle, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }

   // Japanese isolation technologies
   // (Clan offerings, MasterTraining)
   if ((kbTechGetStatus(cTechypConsulateJapaneseKoujou) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypCastle, cUnitStateAlive) >= 5))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateJapaneseKoujou);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateJapaneseKoujou, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateJapaneseMasterTraining) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateJapaneseMasterTraining);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateJapaneseMasterTraining, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }

   // Ottoman technologies
   // (Great bombards)
   if (kbTechGetStatus(cTechypConsulateOttomansGunpowderSiege) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateOttomansGunpowderSiege);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateOttomansGunpowderSiege, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }

   // Portuguese technologies
   // (Ironclad, FishingFleet)
   if ((kbTechGetStatus(cTechypConsulatePortugueseExpeditionaryFleet) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag, cUnitStateAlive) > 0))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulatePortugueseExpeditionaryFleet);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulatePortugueseExpeditionaryFleet, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypConsulatePortugueseFishingFleet) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag, cUnitStateAlive) > 0))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulatePortugueseFishingFleet);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulatePortugueseFishingFleet, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }

   // Russian technologies
   // (fort wagon, factory wagon, blockhouse wagon)
   if (kbTechGetStatus(cTechypConsulateRussianFortWagon) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateRussianFortWagon);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateRussianFortWagon, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateRussianFactoryWagon) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateRussianFactoryWagon);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateRussianFactoryWagon, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateRussianOutpostWagon) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateRussianOutpostWagon);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateRussianOutpostWagon, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }

   // Spanish technologies
   // (Mercantilism, FasterShipments, EnhancedProfits)
   if (kbTechGetStatus(cTechypConsulateSpanishMercantilism) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateSpanishMercantilism);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateSpanishMercantilism, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateSpanishFasterShipments) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateSpanishFasterShipments);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateSpanishFasterShipments, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypConsulateSpanishEnhancedProfits) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateSpanishEnhancedProfits);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypConsulateSpanishEnhancedProfits, getUnit(cUnitTypeypConsulate), cEconomyEscrowID, 50);
      return;
   }
}


//==============================================================================
/* BHG Rickshaw monitor

   If theres a rickshaw, try to use it

*/
//==============================================================================
rule rickshawMonitor
inactive
group tcComplete
minInterval 30
{ 
  if (civIsAsian() == false) { //don't need to be here unless we're Asian
    xsDisableSelf();
    return;
  }
  
  if (kbUnitCount(cMyID, cUnitTypeYPMilitaryRickshaw, cUnitStateAlive) > 0)
    createSimpleBuildPlan(cUnitTypeypBarracksJapanese, 1, 75, true, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
    
  if (kbUnitCount(cMyID, cUnitTypeYPDojoWagon, cUnitStateAlive) > 0)
    createSimpleBuildPlan(cUnitTypeypDojo, 1, 75, true, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
}


//==============================================================================
/* BHG regicide monitor

   Pop the regent in the castle

*/
//==============================================================================
rule regicideMonitor
inactive
minInterval 10
{ 
  //if the castle is up, put the guy in it
  
  if (kbUnitCount(cMyID, cUnitTypeypCastleRegicide, cUnitStateAlive) > 0) {
    //gotta find the castle
     static int castleQueryID=-1;
     //If we don't have the query yet, create one.
     if (castleQueryID < 0)
     {
        castleQueryID=kbUnitQueryCreate("castleGetUnitQuery");
        kbUnitQuerySetIgnoreKnockedOutUnits(castleQueryID, true);
     }
    //Define a query to get all matching units
    if (castleQueryID != -1) {
      kbUnitQuerySetPlayerRelation(castleQueryID, -1);
      kbUnitQuerySetPlayerID(castleQueryID, cMyID);
      kbUnitQuerySetUnitType(castleQueryID, cUnitTypeypCastleRegicide);
      kbUnitQuerySetState(castleQueryID, cUnitStateAlive);
    }
    else {
      return;
    }
    
    //gotta find the regent
     static int regentQueryID=-1;
     //If we don't have the query yet, create one.
     if (regentQueryID < 0)
     {
        regentQueryID=kbUnitQueryCreate("regentGetUnitQuery");
        kbUnitQuerySetIgnoreKnockedOutUnits(regentQueryID, true);
     }
    //Define a query to get all matching units
    if (regentQueryID != -1) {
      kbUnitQuerySetPlayerRelation(regentQueryID, -1);
      kbUnitQuerySetPlayerID(regentQueryID, cMyID);
      kbUnitQuerySetUnitType(regentQueryID, cUnitTypeypDaimyoRegicide);
      kbUnitQuerySetState(regentQueryID, cUnitStateAlive);
    }
    else {
      return;
    }
  
    
    kbUnitQueryResetResults(castleQueryID);
    kbUnitQueryResetResults(regentQueryID);
    
    kbUnitQueryExecute(castleQueryID);
    kbUnitQueryExecute(regentQueryID);
    
    int index = 0;
    
    aiTaskUnitWork(kbUnitQueryGetResult(regentQueryID, index), kbUnitQueryGetResult(castleQueryID, index));
  }
  else {
    xsDisableSelf();
  }
}


//==============================================================================
/* Building monitor

   Make sure we have the right number of buildings, or at least a build plan,
   for each required building type.

*/
//==============================================================================



rule buildingMonitor
inactive
group tcComplete
minInterval 3
{
   int planID = -1;
   if (cvOkToBuild == false)
      return;
   /*
   if (gDefenseReflexBaseID == kbBaseGetMainID(cMyID))
      return;  
*/
   //If I could be, do it.
   int coveredWagon = getUnit(cUnitTypeCoveredWagon, cMyID, cUnitStateAlive);
   if ((coveredWagon <= 0) && (xsGetTime() > gTCStartTime) && (aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeTownCenter) < 0))
   {
	createSimpleBuildPlan(cUnitTypeTownCenter, 1, 90, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
   }
   // If Dutch, add banks to the build limit.
   if (kbGetCiv() == cCivDutch)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeBank);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeBank, cUnitStateAlive) < kbGetBuildLimit(cMyID, cUnitTypeBank)) && (kbUnitCount(cMyID, cUnitTypeTownCenter, cUnitStateAlive) > 0))  // If I'm not building one and I could be, do it.
      {     // Start a new one
         if ( kbUnitCount(cMyID, cUnitTypeBank, cUnitStateAlive) < ((kbGetAge()*2) + 4) )
         {  // Less than 4 bank in age 1 (0*2+4), less than 6 in age 2, etc.
            createSimpleBuildPlan(cUnitTypeBank, 1, 93, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1); // Very high pri, just above houses
            aiEcho("Starting a new bank build plan.");
         }
      }  
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeMarket);   // Dutch market check...only if bank exists
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeMarket, cUnitStateAlive) < 1) && (kbUnitCount(cMyID, cUnitTypeBank, cUnitStateAlive) > 0) )
      {
         createSimpleBuildPlan(cUnitTypeMarket, 1, 96, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);  // Just higher than house
         aiEcho("Starting a new market build plan.");
      }
   }
   
   //a market is needed...
   planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, gMarketUnit);
   if (kbUnitCount(cMyID, gEconUnit, cUnitStateAlive)>=10){
      if ( (planID < 0) && (kbUnitCount(cMyID, gMarketUnit, cUnitStateAlive) < 1))
      {
         createSimpleBuildPlan(gMarketUnit, 1, 85, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);  // Just higher than house
         aiEcho("Starting a new market build plan.");
      }
   }
   
   
   if ( (kbGetCiv() == cCivDutch) && (kbUnitCount(cMyID, cUnitTypeBank, cUnitStateABQ) < 1) )
      return;

   //If British, at least 10 houses
   if (cMyCiv == cCivBritish)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeManor);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeManor, cUnitStateAlive) < 10) )
      { 
         createSimpleBuildPlan(cUnitTypeManor, 1, 65, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new house build plan.");
      }
   }

   // If Indians, at least 1 sacred fields
   if (cMyCiv == cCivIndians)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypSacredField);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypSacredField, cUnitStateAlive) < 1) )
      { 
         createSimpleBuildPlan(cUnitTypeypSacredField, 1, 65, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new sacred field build plan.");
      }
   }

   // Mosque construction for Ottomans is handled in ottomanMonitor rule, do not build mosques here
   // Construction of monastery and consulate for Asians is handled in monasteryMonitor and consulateMonitor rules

   // That's it for age 1
   if (kbGetAge() < cAge2) 
      return;
   // ***************************************************
   


   // If native, at least one fire pit   
   planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeFirePit);
   
   if ( civIsNative() == true ) 
   {
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeFirePit, cUnitStateAlive) < 1) && (kbUnitCount(cMyID, gHouseUnit, cUnitStateAlive) > 0) )
      {     // Start a new one if we have at least one house.
         createSimpleBuildPlan(cUnitTypeFirePit, 1, 92, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1); 
         aiEcho("Starting a new firepit build plan.");
      }   
      if (cMyCiv == cCivXPSioux)
      {
         if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeFirePit, cUnitStateAlive) < 1) )
         {     // Start a new one even without house.
            createSimpleBuildPlan(cUnitTypeFirePit, 1, 92, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1); 
            aiEcho("Starting a new firepit build plan.");
         }   
      }
   }

   // If Russian, at least 2 block house
	if (kbGetCiv() == cCivRussians)
	{
		planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeBlockhouse);
		if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeBlockhouse, cUnitStateAlive) < 2) )
		{     // Start a new one
			createSimpleBuildPlan(cUnitTypeBlockhouse, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
			aiEcho("Starting a new blockhouse build plan.");
		}   
	}
   else if ( civIsNative() == true )
   {  // Natives, at least 2 war hut
		planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeWarHut);
		if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateAlive) < 2) )
		{     // Start a new one
			createSimpleBuildPlan(cUnitTypeWarHut, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
			aiEcho("Starting a new war hut build plan.");
		}  
   }
   else if (civIsAsian() == true) {
      if ( (cMyCiv == cCivJapanese) || (cMyCiv == cCivSPCJapanese) || (cMyCiv == cCivSPCJapaneseEnemy) ) {
        planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypBarracksJapanese);
        if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypBarracksJapanese, cUnitStateAlive) < 2) )
        {     // Start a new one
          createSimpleBuildPlan(cUnitTypeypBarracksJapanese, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
          aiEcho("Starting a new bansho build plan.");
        }
      }
      else if ( (cMyCiv == cCivChinese) || (cMyCiv == cCivSPCChinese) ) {
        planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypWarAcademy);
        if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypWarAcademy, cUnitStateAlive) < 2) )
        {     // Start a new one
          createSimpleBuildPlan(cUnitTypeypWarAcademy, 1, 98, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
          aiEcho("Starting a new war academy build plan.");
        }
      }
      else {
        planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeYPBarracksIndian);
        if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeYPBarracksIndian, cUnitStateAlive) < 2) )
        {     // Start a new one
          createSimpleBuildPlan(cUnitTypeYPBarracksIndian, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
          aiEcho("Starting a new indian barracks build plan.");
        }
      }
   }
	else // every other civ gets two barracks.
	{
		// At least two barracks
		planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeBarracks);
		if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeBarracks, cUnitStateAlive) < 2) )
		{     // Start a new one
			createSimpleBuildPlan(cUnitTypeBarracks, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
			aiEcho("Starting a new barracks build plan.");
		}
	}
   
   // At least 2 stable, corral or caravanserai
   if ( (civIsNative() == true) )
   {  // Natives, at least two corral
      if (cMyCiv != cCivXPAztec)
      {
         planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeCorral);
         if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeCorral, cUnitStateAlive) < 2) )
         {     // Start a new one
            createSimpleBuildPlan(cUnitTypeCorral, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
            aiEcho("Starting a new corral build plan.");
         }  
      }
   }
  else if (civIsAsian() == true) {
    if ( (cMyCiv == cCivJapanese) || (cMyCiv == cCivSPCJapanese) || (cMyCiv == cCivSPCJapaneseEnemy) ) {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypStableJapanese);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypStableJapanese, cUnitStateAlive) < 2) )
      {     // Start a new one
        createSimpleBuildPlan(cUnitTypeypStableJapanese, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        aiEcho("Starting a new dojo build plan.");
      }
    }
    else if ( (cMyCiv == cCivIndians) || (cMyCiv == cCivSPCIndians) ) {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypCaravanserai);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypCaravanserai, cUnitStateAlive) < 2) )
      {     // Start a new one
        createSimpleBuildPlan(cUnitTypeypCaravanserai, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        aiEcho("Starting a new Caravanserai build plan.");
      }
    }
   }
   else 
   {      
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeStable);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeStable, cUnitStateAlive) < 2) && (civIsNative() == false) )
      {     // Start a new one
         createSimpleBuildPlan(cUnitTypeStable, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new stable build plan.");
      }
   }
   
   // Mill construction is handled in updateFoodBreakdown, do not build mills here
   /*
   // Livestock pen if we own critters ( Indians only)
   int livestockMinimum = 10;
   if (kbGetCiv() == cCivIndians)
      livestockMinimum = 20;
   planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, gLivestockPenUnit);
   if ( (planID < 0) && (kbUnitCount(cMyID, gLivestockPenUnit, cUnitStateAlive) < 1) && (kbUnitCount(cMyID, cUnitTypeHerdable, cUnitStateAlive) >= livestockMinimum) )
   {     // Start a new one
      //if (kbGetCiv() == cCivIndians) // Chinese will use villages, Japanese shrines, and natives a farm
      //{
         createSimpleBuildPlan(gLivestockPenUnit, 1, 65, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new livestock pen build plan.");
      //}
   }
*/
   // If Indians, at least 2 sacred fields
   if (cMyCiv == cCivIndians)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypSacredField);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypSacredField, cUnitStateAlive) < 2) )
      { 
         createSimpleBuildPlan(cUnitTypeypSacredField, 1, 65, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new sacred field build plan.");
      }
   }

   // At least one church (not for natives or Asians)
   if ((civIsNative() == false) && (civIsAsian() == false))
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeChurch);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeChurch, cUnitStateAlive) < 1) )
      {     // Start a new one
         createSimpleBuildPlan(cUnitTypeChurch, 1, 60, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new church build plan.");
      }
   }

   
   // That's it for age 2
   if (kbGetAge() < cAge3)
      return;
   // **********************************************************
   

   
   // Plantation construction is handled in updateGoldBreakdown, do not build plantations here

   
   // At least one arsenal (not for natives or Asians)
   if ((civIsNative() == false) && (civIsAsian() == false))
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeArsenal);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeArsenal, cUnitStateAlive) < 1) )
      {     // Start a new one
         createSimpleBuildPlan(cUnitTypeArsenal, 1, 60, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new arsenal build plan.");
      }
   }
   /*
   // At least one church (not for natives or Asians)
   if ((civIsNative() == false) && (civIsAsian() == false))
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeChurch);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeChurch, cUnitStateAlive) < 1) )
      {     // Start a new one
         createSimpleBuildPlan(cUnitTypeChurch, 1, 60, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new church build plan.");
      }
   }
  */
   // At least one artillery depot (not for Aztecs, Sioux or Asians)
   if ( (cMyCiv != cCivXPAztec) && (cMyCiv != cCivXPSioux) && (cMyCiv != cCivFrench) && (civIsAsian() == false) ) 
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeArtilleryDepot);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeArtilleryDepot, cUnitStateAlive) < 1) )
      {     // Start a new one
         createSimpleBuildPlan(cUnitTypeArtilleryDepot, 1, 65, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new artillery depot build plan.");
      }   
   }

   // At least one castle (Asians only)
   if (civIsAsian() == true) {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypCastle);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypCastle, cUnitStateAlive) < 1) )
      {     // Start a new one
        createSimpleBuildPlan(cUnitTypeypCastle, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        aiEcho("Starting a new siege workshop build plan.");
      }
    }

   // If British, at least 20 houses
   if (cMyCiv == cCivBritish)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeManor);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeManor, cUnitStateAlive) < 20) )
      { 
         createSimpleBuildPlan(cUnitTypeManor, 1, 65, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new house build plan.");
      }
   }

   // If Indians, at least 2 sacred fields
   if (cMyCiv == cCivIndians)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypSacredField);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypSacredField, cUnitStateAlive) < 2) )
      { 
         createSimpleBuildPlan(cUnitTypeypSacredField, 1, 65, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new sacred field build plan.");
      }
   }

   // That's it for age 3
   if (kbGetAge() < cAge4)
      return;
   // **********************************************************

  
   // If Russian, at least 4 blockhouses
   if (kbGetCiv() == cCivRussians)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeBlockhouse);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeBlockhouse, cUnitStateAlive) < 4) )
      { 
         createSimpleBuildPlan(cUnitTypeBlockhouse, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new blockhouse build plan.");
      }   
   }
   else if ( civIsNative() == true ) // Natives, at least 4 war huts
   {  
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeWarHut);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateAlive) < 4) )
      {
         createSimpleBuildPlan(cUnitTypeWarHut, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new war hut build plan.");
      }  
   }
   else if (civIsAsian() == true) {
      if ( (cMyCiv == cCivJapanese) || (cMyCiv == cCivSPCJapanese) || (cMyCiv == cCivSPCJapaneseEnemy) ) {
        planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypBarracksJapanese);
        if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypBarracksJapanese, cUnitStateAlive) < 4) )
        {     // Start a new one
          createSimpleBuildPlan(cUnitTypeypBarracksJapanese, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
          aiEcho("Starting a new bansho build plan.");
        }
      }
      else if ( (cMyCiv == cCivChinese) || (cMyCiv == cCivSPCChinese) ) {
        planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypWarAcademy);
        if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypWarAcademy, cUnitStateAlive) < 4) )
        {     // Start a new one
          createSimpleBuildPlan(cUnitTypeypWarAcademy, 1, 98, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
          aiEcho("Starting a new war academy build plan.");
        }
      }
      else {
        planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeYPBarracksIndian);
        if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeYPBarracksIndian, cUnitStateAlive) < 4) )
        {     // Start a new one
          createSimpleBuildPlan(cUnitTypeYPBarracksIndian, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
          aiEcho("Starting a new indian barracks build plan.");
        }
      }
   }
   else // Every other civ, at least 3 barracks.
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeBarracks);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeBarracks, cUnitStateAlive) < 4) )
      {
         createSimpleBuildPlan(cUnitTypeBarracks, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new barracks build plan.");
      }
   }
   
   // At least a few stables, corrals or caravanserais
   if ( (civIsNative() == true) )
   {  // Natives, at least 4 corrals
      if (cMyCiv != cCivXPAztec)
      {
         planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeCorral);
         if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeCorral, cUnitStateAlive) < 3) )
         {
            createSimpleBuildPlan(cUnitTypeCorral, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
            aiEcho("Starting a new corral build plan.");
         }  
      }
   }
    else if (civIsAsian() == true) {
    if ( (cMyCiv == cCivJapanese) || (cMyCiv == cCivSPCJapanese) || (cMyCiv == cCivSPCJapaneseEnemy) ) {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypStableJapanese);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypStableJapanese, cUnitStateAlive) < 4) )
      {     // Start a new one
        createSimpleBuildPlan(cUnitTypeypStableJapanese, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        aiEcho("Starting a new dojo build plan.");
      }
    }
    else if ( (cMyCiv == cCivIndians) || (cMyCiv == cCivSPCIndians) ) {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypCaravanserai);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypCaravanserai, cUnitStateAlive) < 3) )
      {     // Start a new one
        createSimpleBuildPlan(cUnitTypeypCaravanserai, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        aiEcho("Starting a new Caravanserai build plan.");
      }
    }
   }
   else 
   {      
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeStable);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeStable, cUnitStateAlive) < 2) )
      {
         createSimpleBuildPlan(cUnitTypeStable, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new stable build plan.");
      }
   }

   // At least one saloon (for Dutch only) why if there is some good mercenaries
   //if (cMyCiv == cCivDutch)
   //{
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeSaloon);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeSaloon, cUnitStateAlive) < 1) )
      {     // Start a new one
         createSimpleBuildPlan(cUnitTypeSaloon, 1, 60, true, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new saloon build plan.");
      }
   //}

   // 5 additional war huts for Iroquois, for a total of 9 (low priority)
   if (cMyCiv == cCivXPIroquois)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeWarHut);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateAlive) < 9) )
      {
         createSimpleBuildPlan(cUnitTypeWarHut, 1, 50, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new war hut build plan.");
      }   
   }

   // 3 additional war huts for Sioux, for a total of 7 (low priority)
   if (cMyCiv == cCivXPSioux)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeWarHut);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateAlive) < 7) )
      {
         createSimpleBuildPlan(cUnitTypeWarHut, 1, 50, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new war hut build plan.");
      }   
   }

   // 3 additional war huts for Aztec, for a total of 7 (low priority)
   if (cMyCiv == cCivXPAztec)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeWarHut);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateAlive) < 7) )
      {
         createSimpleBuildPlan(cUnitTypeWarHut, 1, 50, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new war hut build plan.");
      }   
   }

   // If Sioux, at least 10 teepees
   if (cMyCiv == cCivXPSioux)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeTeepee);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeTeepee, cUnitStateAlive) < 10) )
      { 
         createSimpleBuildPlan(cUnitTypeTeepee, 1, 65, true, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new teepee build plan.");
      }
   }

   // If Aztecs, at least 7 Nobles Huts
   if (cMyCiv == cCivXPAztec)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeNoblesHut);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeNoblesHut, cUnitStateAlive) < 7) )
      {
         createSimpleBuildPlan(cUnitTypeNoblesHut, 1, 50, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new nobles hut build plan.");
      }   
   }

   // 4 additional castles for Chinese, for a total of 5 (low priority)
   if (cMyCiv == cCivChinese)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypCastle);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypCastle, cUnitStateAlive) < 5) )
      {     // Start a new one
        createSimpleBuildPlan(cUnitTypeypCastle, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        aiEcho("Starting a new siege workshop build plan.");
      }
    }

   // 4 additional castles for Indians, for a total of 5 (low priority)
   if (cMyCiv == cCivIndians)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypCastle);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypCastle, cUnitStateAlive) < 5) )
      {     // Start a new one
        createSimpleBuildPlan(cUnitTypeypCastle, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        aiEcho("Starting a new siege workshop build plan.");
      }
    }

   // If Indians, at least 2 sacred fields
   if (cMyCiv == cCivIndians)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypSacredField);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypSacredField, cUnitStateAlive) < 2) )
      { 
         createSimpleBuildPlan(cUnitTypeypSacredField, 1, 65, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new sacred field build plan.");
      }
   }

   // That's it for age 4
   if (kbGetAge() < cAge5)
      return;
   // **********************************************************

   // At least 3 artillery depots (not for Aztecs, Sioux or Asians)
   if ( (cMyCiv != cCivXPAztec) && (cMyCiv != cCivXPSioux) && (cMyCiv != cCivFrench) && (civIsAsian() == false) ) 
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeArtilleryDepot);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeArtilleryDepot, cUnitStateAlive) < 3) )
      {
         createSimpleBuildPlan(cUnitTypeArtilleryDepot, 1, 65, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new artillery depot build plan.");
      }   
   }

   // At least one saloon (for Dutch only)
   if (cMyCiv == cCivDutch)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeSaloon);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeSaloon, cUnitStateAlive) < 1) )
      {     // Start a new one
         createSimpleBuildPlan(cUnitTypeSaloon, 1, 60, true, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new saloon build plan.");
      }
   }

   

   // At least 5 castles (Asians only)
/*   if (civIsAsian() == true) {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypCastle);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypCastle, cUnitStateAlive) < 5) )
      {     // Start a new one
        createSimpleBuildPlan(cUnitTypeypCastle, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        aiEcho("Starting a new siege workshop build plan.");
      }
    }
*/
   // 4 additional castles for Chinese, for a total of 9 (low priority)
   if (cMyCiv == cCivChinese)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypCastle);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypCastle, cUnitStateAlive) < 9) )
      {     // Start a new one
        createSimpleBuildPlan(cUnitTypeypCastle, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        aiEcho("Starting a new siege workshop build plan.");
      }
   }

   // 4 additional castles for Indians, for a total of 9 (low priority)
   if (cMyCiv == cCivIndians)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypCastle);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypCastle, cUnitStateAlive) < 9) )
      {     // Start a new one
        createSimpleBuildPlan(cUnitTypeypCastle, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
        aiEcho("Starting a new siege workshop build plan.");
      }
   }

   // 3 additional blockhouses for Russian, for a total of 7 (low priority)
   if (kbGetCiv() == cCivRussians)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeBlockhouse);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeBlockhouse, cUnitStateAlive) < 7) )
      { 
         createSimpleBuildPlan(cUnitTypeBlockhouse, 1, 70, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new blockhouse build plan.");
      }   
   }

   // 12 additional war huts for Iroquois, for a total of 16 (low priority)
   if (cMyCiv == cCivXPIroquois)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeWarHut);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateAlive) < 16) )
      {
         createSimpleBuildPlan(cUnitTypeWarHut, 1, 50, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new war hut build plan.");
      }   
   }

   // 9 additional war huts for Sioux, for a total of 13 (low priority)
   if (cMyCiv == cCivXPSioux)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeWarHut);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateAlive) < 13) )
      {
         createSimpleBuildPlan(cUnitTypeWarHut, 1, 50, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new war hut build plan.");
      }   
   }

   // 9 additional war huts for Aztecs, for a total of 13 (low priority)
   if (cMyCiv == cCivXPAztec)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeWarHut);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateAlive) < 13) )
      {
         createSimpleBuildPlan(cUnitTypeWarHut, 1, 50, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new war hut build plan.");
      }   
   }

   // 2 additional War Academy for Chinese, for a total of 6 (low priority)
   if (cMyCiv == cCivChinese)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypWarAcademy);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypWarAcademy, cUnitStateAlive) < 6) )
      {
         createSimpleBuildPlan(cUnitTypeypWarAcademy, 1, 50, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new War Academy build plan.");
      }   
   }

   // If Sioux, at least 20 teepees
   if (cMyCiv == cCivXPSioux)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeTeepee);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeTeepee, cUnitStateAlive) < 20) )
      { 
         createSimpleBuildPlan(cUnitTypeTeepee, 1, 65, true, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new teepee build plan.");
      }
   }

   // If Sioux, at least 6 corrals
   if (cMyCiv == cCivXPSioux)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeCorral);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeCorral, cUnitStateAlive) < 6) )
      { 
         createSimpleBuildPlan(cUnitTypeCorral, 1, 65, true, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new corral build plan.");
      }
   }

   // If Aztecs, at least 13 Nobles Huts
   if (cMyCiv == cCivXPAztec)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeNoblesHut);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeNoblesHut, cUnitStateAlive) < 13) )
      {
         createSimpleBuildPlan(cUnitTypeNoblesHut, 1, 50, false, cMilitaryEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new nobles hut build plan.");
      }   
   }


   // If Indians, at least 2 sacred fields
   if (cMyCiv == cCivIndians)
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypSacredField);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeypSacredField, cUnitStateAlive) < 2) )
      { 
         createSimpleBuildPlan(cUnitTypeypSacredField, 1, 65, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new sacred field build plan.");
      }
   }

   // And how 'bout a capitol, as long as we're here (not for natives or Asians)
   if ( (civIsNative() == false) && (civIsAsian() == false) )
   {
      planID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeCapitol);
      if ( (planID < 0) && (kbUnitCount(cMyID, cUnitTypeCapitol, cUnitStateAlive) < 1) )
      {     // Start a new one
         createSimpleBuildPlan(cUnitTypeCapitol, 1, 60, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
         aiEcho("Starting a new capitol build plan.");
      }
   }
}


//==============================================================================
/* xpBuilder monitor

   Use an idle xpBuilder to build as needed.

*/	
//==============================================================================
rule xpBuilderMonitor
inactive
group tcComplete
minInterval 1
{
   if (civIsNative() == false)
   { //europeans have wagons....:artheru
      xsDisableSelf();
      return;
   }
   
   static int activePlan = -1;
   
   if (activePlan != -1)   // We already have something active?
   {
      if ( (aiPlanGetState(activePlan) < 0) || (aiPlanGetState(activePlan) == cPlanStateNone) ) 
      {
         aiPlanDestroy(activePlan);
         activePlan = -1;  // Plan is bad, but didn't die.  It's dead now, so continue below.
      }
      else
      {
         return;  // Something is active, let it run.
      }
   }
   
   // If we get this far, there is no active plan.  See if we have a xpBuilder to use.
   int xpBuilderID = -1;
   int buildingToMake = -1;
   int buildertype = -1;
   if (kbUnitCount(cMyID, cUnitTypexpBuilderStart, cUnitStateAlive) > 0) 
   {
      xpBuilderID = getUnit(cUnitTypexpBuilderStart);
      buildingToMake = gHouseUnit;  // If all else fails, make a house since we can't make warhuts.
      buildertype = cUnitTypexpBuilderStart;
   }
   else 
   {
      xpBuilderID = getUnit(cUnitTypexpBuilder);
      buildingToMake = cUnitTypeWarHut;  // If all else fails, make a war hut.
      buildertype = cUnitTypexpBuilder;
   }

   if (xpBuilderID < 0)
      return;
   
   // We have a xpBuilder, and no plan to use it.  Find something to do with it.  
   // Simple logic.  Farm if less than 2.  War hut if less than 2.  Corral if < 2.
   // Plantations if less than 2 in Age 3 and above.   House if below build limit.
   // Siege Workshop if less than 2 in Age 3 and above.
   // One override....avoid farms in age 1, they're too slow.
   // Avoid war huts and corrals in Age 1 as starting travois cannot build them.
   if (kbUnitCount(cMyID, cUnitTypeFirePit, cUnitStateABQ) < 1)
      buildingToMake = cUnitTypeFirePit;   
   else if ( (kbUnitCount(cMyID, gFarmUnit, cUnitStateABQ) < 2) && (gTimeToFarm == true) ) //BHG: Econ building first
      buildingToMake = gFarmUnit;
   else if ( (kbUnitCount(cMyID, gPlantationUnit, cUnitStateABQ) < 2) && (gTimeForPlantations == true) ) //BHG: Econ building first
      buildingToMake = gPlantationUnit;
   else if ( (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateABQ) < 2) && (kbGetAge() > cAge1) )
      buildingToMake = cUnitTypeWarHut;
   else if ( (kbUnitCount(cMyID, cUnitTypeCorral, cUnitStateABQ) < 2) && (kbGetAge() > cAge1) )
      buildingToMake = cUnitTypeCorral;
   else if (kbUnitCount(cMyID, gHouseUnit, cUnitStateABQ) < kbGetBuildLimit(cMyID, gHouseUnit))
      buildingToMake = gHouseUnit;
   else if ( (kbUnitCount(cMyID, cUnitTypeArtilleryDepot, cUnitStateABQ) < 2) && (kbGetAge() > cAge2) )
      buildingToMake = cUnitTypeArtilleryDepot;

   if (buildingToMake >= 0)
   {
      activePlan = aiPlanCreate("Use an xpBuilder", cPlanBuild);
      // What to build
      aiPlanSetVariableInt(activePlan, cBuildPlanBuildingTypeID, 0, buildingToMake);

      // 1 meter separation for farms and plantations, 6 meter for everything else
      aiPlanSetVariableFloat(activePlan, cBuildPlanBuildingBufferSpace, 0, 6.0);
      if ((buildingToMake == gFarmUnit) || (buildingToMake == gPlantationUnit))
         aiPlanSetVariableFloat(activePlan, cBuildPlanBuildingBufferSpace, 0, 1.0);       
      
      //Priority.
      aiPlanSetDesiredPriority(activePlan, 95);
      //Mil vs. Econ.
      if ( (buildingToMake == cUnitTypeWarHut) || 
           (buildingToMake == cUnitTypeCorral) || 
           (buildingToMake == cUnitTypeArtilleryDepot) )

      {
         aiPlanSetMilitary(activePlan, true);
         aiPlanSetEconomy(activePlan, false);
      }
      else
      {
         aiPlanSetMilitary(activePlan, false);
         aiPlanSetEconomy(activePlan, true);
      }
      aiPlanSetEscrowID(activePlan, cEconomyEscrowID);
      aiPlanAddUnitType(activePlan, buildertype, 1, 1, 1);
      aiPlanSetBaseID(activePlan, kbBaseGetMainID(cMyID));

      //Go.
      aiPlanSetActive(activePlan);
   }
}


//==============================================================================
/* Native Dance Monitor

   Manage the number of natives dancing, and the 'tactic' they're dancing for.

const int cTacticFertilityDance=12;   Faster training
const int cTacticGiftDance=13;         Faster XP trickle
const int cTacticCityDance=14;
const int cTacticWaterDance=15;       Increases navy HP/attack
const int cTacticAlarmDance=16;        Town defense...
const int cTacticFounderDance=17;      xpBuilder units - Iroquois
const int cTacticMorningWarsDance=18;
const int cTacticEarthMotherDance=19;
const int cTacticHealingDance=20;
const int cTacticFireDance=21;
const int cTacticWarDanceSong=22;
const int cTacticGarlandWarDance=23;
const int cTacticWarChiefDance=24;    new war chief (Iroquois)
const int cTacticHolyDance=25;
const int cTacticWarChiefDanceSioux=28;    new war chief (Sioux)
const int cTacticWarChiefDanceAztec=29;    new war chief (Aztec)

*/
//==============================================================================
rule danceMonitor
inactive
group tcComplete
minInterval 20
{
    if (civIsNative() == false)
    {
       xsDisableSelf();
       return;
    }

    if (kbUnitCount(cMyID, cUnitTypeFirePit, cUnitStateAlive) < 1)  
	return;

    int numWarPriests = kbUnitCount(cMyID, cUnitTypexpMedicineManAztec, cUnitStateAlive);
    int tempDancers = 0;
    int popThreshold = 0;
    // healer maintain.
    int surgeonCount = kbUnitCount(cMyID, cUnitTypeSurgeon, cUnitStateAlive);
    int natMedicineManCount = kbUnitCount(cMyID, cUnitTypeNatMedicineMan, cUnitStateAlive);
    int xpMedicineManCount = kbUnitCount(cMyID, cUnitTypexpMedicineMan, cUnitStateAlive);
    static int lastTactic = -1;
    static int lastTacticTime = -1;
    static int lastWarChiefTime = -1;
    static int warChiefCount = 0;
   
    if (gNativeDancePlan < 0)
    {
       gNativeDancePlan = createNativeResearchPlan(cTacticNormal, 85, 1, 1, 1);
       aiPlanAddUnitType(gNativeDancePlan, cUnitTypexpMedicineManAztec, numWarPriests, numWarPriests, numWarPriests);
       aiPlanSetUnitStance(gNativeDancePlan, cUnitStanceDefensive);
       aiPlanSetDesiredPriority(gNativeDancePlan, 100);
       aiPlanSetActive(gNativeDancePlan); 
       lastTactic = cTacticNormal;
       lastTacticTime = xsGetTime();
    }

    // Use all available warrior priests as dancers
    aiPlanAddUnitType(gNativeDancePlan, cUnitTypexpMedicineManAztec, numWarPriests, numWarPriests, numWarPriests);
    aiPlanSetUnitStance(gNativeDancePlan, cUnitStanceDefensive);
    aiPlanSetDesiredPriority(gNativeDancePlan, 100);
  
   // at most 1/6 pop used, at most 10 dancers.
   int want = -1;
   want = kbUnitCount(cMyID, gEconUnit, cUnitStateAlive) / 6;
   int maximum=kbGetAge()*3;
	if (numWarPriests>maximum) maximum=numWarPriests;
	
   if (want>10-numWarPriests)
   {
      //aiPlanAddUnitType(gNativeDancePlan, gEconUnit, 0, maximum-numWarPriests, maximum-numWarPriests);
   }
   else
   {
      //aiPlanAddUnitType(gNativeDancePlan, gEconUnit, 0, want, maximum-numWarPriests);
   }

}

//==============================================================================
/* Rice Paddy Monitor

   Switch from Food to Coin.

cTacticPaddyFood
cTacticPaddyCoin

*/
//==============================================================================
rule ricepaddyMonitor
inactive
group tcComplete
minInterval 60
{
   if (civIsAsian() == false)
   {
      xsDisableSelf();
      return;
   }
	selectRicePaddyTactics();
}


//==============================================================================
/* Shrine Monitor

   Uses shrine wagons to build shrines. In Age 3 and above shrine production
   is cycled through the resource options once per minute.

*/
//==============================================================================
rule shrineMonitor
inactive
group tcComplete
minInterval 10
{
   // Disable for anybody but Japanese
   if (kbGetCiv() != cCivJapanese)
   {
      xsDisableSelf();
      return;
   }

	//echoMessage("Shrine enabled");
   // Use shrine wagons
   /*
   if ((kbUnitCount(cMyID, cUnitTypeypShrineWagon, cUnitStateAlive) > 0) && (aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeypShrineJapanese) < 0))
   {  createSimpleBuildPlan(cUnitTypeypShrineJapanese, 1, 100, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);  }

   if ( (kbUnitCount(cMyID, cUnitTypeypShrineJapanese, cUnitStateAlive) < kbGetBuildLimit(cMyID, cUnitTypeypShrineJapanese)) )  // If I'm not building one and I could be, do it.
   {  // Start a new one       
      createSimpleBuildPlan(cUnitTypeypShrineJapanese, 1, 93, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
      aiEcho("Starting a new shrine build plan.");       
   }
*/
   // Cycle through resource generation options
   static int shrineTactic = -1;
   
   // Define a query to get all matching units
   int shrineQueryID=-1;
   shrineQueryID=kbUnitQueryCreate("shrineGetUnitQuery");
   kbUnitQuerySetIgnoreKnockedOutUnits(shrineQueryID, true);
   if (shrineQueryID != -1)
   {
      kbUnitQuerySetPlayerRelation(shrineQueryID, -1);
      kbUnitQuerySetPlayerID(shrineQueryID, cMyID);
      kbUnitQuerySetUnitType(shrineQueryID, cUnitTypeypShrineJapanese);
      kbUnitQuerySetState(shrineQueryID, cUnitStateAlive);
      kbUnitQueryResetResults(shrineQueryID);
      int numberFound=kbUnitQueryExecute(shrineQueryID);
      if (numberFound > 0)
      {
         shrineTactic = shrineTactic + 1;
         if (shrineTactic > 8)
            shrineTactic = 0;
         switch(shrineTactic)
         {
            case 0:
            {
               aiUnitSetTactic(kbUnitQueryGetResult(shrineQueryID, 0), cTacticShrineFood);
               break;
            }
            case 3:
            {
               aiUnitSetTactic(kbUnitQueryGetResult(shrineQueryID, 0), cTacticShrineWood);
               break;
            }
            case 6:
            {
               aiUnitSetTactic(kbUnitQueryGetResult(shrineQueryID, 0), cTacticShrineCoin);
               break;
            }
            default:
            {
               aiUnitSetTactic(kbUnitQueryGetResult(shrineQueryID, 0), cTacticShrineXP);
               break;
            }
         }
      }
   }   
}


//==============================================================================
/* rule defenseReflex

   Monitor each VP site that we own, plus our main base.  Move and reconfigure 
   the defense and reserve plans as needed.

   At rest, the defend plan has only one unit, is centered on the main base, and
   is used to send one unit after trivial invasions, typically a scouting unit. 
   The reserve plan has a much larger MAX number, so it gets all the remaining units.
   It is centered on the military gather point with a conservative radius, to avoid
   engaging units far in front of the main base.

   When defending a base in a defense reflex, the defend plan gets a high MAX number
   so that it takes units from the reserve plan.  The low unit count in reserve 
   acts as a signal to not launch new attacks, as troops aren't available.  The 
   defend plan and reserve plan are relocated to the endangered base, with an aggressive
   engage radius.

   The search, active engage and passive engage radii are set by global 
   control variables, cvDefenseReflexRadiusActive, cvDefenseReflexRadiusPassive, and
   cvDefenseReflexSearchRadius.
   
   Once in a defense reflex, the AI stays in it until that base is cleared, unless
   it's defending a non-main base, and the main base requires defense.  In that case,
   the defense reflex moves back to the main base.
   
   pauseDefenseReflex() can only be used when already in a defense reflex.  So valid 
   state transitions are:

   none to defending       // start reflex with moveDefenseReflex(), sets all the base/location globals.
   defending to paused     // use pauseDefenseReflex(), takes no parms, uses vars set in prior moveDefenseReflex call.
   defending to end        // use endDefenseReflex(), clears global vars
   paused to end           // use endDefenseReflex(), clears global vars
   paused to defending     // use moveDefenseReflex(), set global vars again.

*/
//==============================================================================
// 

rule defenseReflex
inactive
minInterval 10
group startup
{

   int armySize = aiPlanGetNumberUnits(gLandDefendPlan0, cUnitTypeLogicalTypeLandMilitary) + aiPlanGetNumberUnits(gLandReservePlan, cUnitTypeLogicalTypeLandMilitary);
   int enemyArmySize = -1;
   static int lastHelpTime = -60000;
   static int lastHelpBaseID = -1;
   int i = 1;
   int unitID = -1;
   int protoUnitID = -1;
   bool panic = false;  // Indicates need for call for help
   
   static int enemyArmyQuery = -1;
   if (enemyArmyQuery < 0)
   {  // Initialize the queryID
      enemyArmyQuery = kbUnitQueryCreate("Enemy army query");
      kbUnitQuerySetIgnoreKnockedOutUnits(enemyArmyQuery, true);
      kbUnitQuerySetPlayerRelation(enemyArmyQuery, cPlayerRelationEnemyNotGaia);
      kbUnitQuerySetUnitType(enemyArmyQuery, cUnitTypeLogicalTypeLandMilitary);
      kbUnitQuerySetState(enemyArmyQuery, cUnitStateAlive);
      kbUnitQuerySetSeeableOnly(enemyArmyQuery, true);   // Ignore units we think are under fog
   }
   
   // Check main base first
   kbUnitQuerySetPosition(enemyArmyQuery,  kbBaseGetLocation(cMyID,  kbBaseGetMainID(cMyID)));
   kbUnitQuerySetMaximumDistance(enemyArmyQuery, cvDefenseReflexSearchRadius);   
   kbUnitQuerySetSeeableOnly(enemyArmyQuery, true);
   kbUnitQuerySetState(enemyArmyQuery, cUnitStateAlive);
   kbUnitQueryResetResults(enemyArmyQuery);
   enemyArmySize = kbUnitQueryExecute(enemyArmyQuery);
   if (enemyArmySize >= 3)
   {  // Main base is under attack
      //echoMessage("M("+kbBaseGetMainID(cMyID)+")ua, eSize:"+enemyArmySize+", mSize "+armySize);
	  gStopToLogging =true;
	  gTimeToFarm=true;
	  gTimeForPlantations=true;
	  
      if (gDefenseReflexBaseID == kbBaseGetMainID(cMyID))
      {  // We're already in a defense reflex for the main base
         if (  ((armySize * 3.0) < enemyArmySize)  && (enemyArmySize > 6.0) )  // Army at least 3x my size and more than 6 units total.
         {  // Too big to handle(comment: since ai doesn't build any other base, should fight:artheru.
            if (gDefenseReflexPaused == false)
            {  // We weren't paused, do it
               //pauseDefenseReflex();
            }
            // Consider a call for help
            panic = true;
            if ( ((xsGetTime() - lastHelpTime) < 30000) && (lastHelpBaseID != gDefenseReflexBaseID) )  // We called for help anywhere in the last minute
               panic = false;
            
            if (panic == true)
            {
               sendStatement(cPlayerRelationAlly, cAICommPromptToAllyINeedHelpMyBase, kbBaseGetLocation(cMyID,  gDefenseReflexBaseID));
               aiEcho("     I'm calling for help.");
               lastHelpTime = xsGetTime();
            }
         } 
         else
         {  // Size is OK to handle, shouldn't be in paused mode.
            if (gDefenseReflexPaused == true)   // Need to turn it active
            {
               moveDefenseReflex( kbBaseGetLocation(cMyID,  kbBaseGetMainID(cMyID)), cvDefenseReflexRadiusActive, kbBaseGetMainID(cMyID));
            }
         }
      }
      else  // Defense reflex wasn't set to main base.
      {  // Need to set the defense reflex to home base...doesn't matter if it was inactive or guarding another base, home base trumps all.
          moveDefenseReflex( kbBaseGetLocation(cMyID,  kbBaseGetMainID(cMyID)), cvDefenseReflexRadiusActive, kbBaseGetMainID(cMyID));
         // This is a new defense reflex in the main base.  Consider making a chat about it.
         int enemyPlayerID = kbUnitGetPlayerID(kbUnitQueryGetResult(enemyArmyQuery, 0));
         if ( (enemyPlayerID > 0) && (kbGetAge() > cAge1) ) 
         {  // Consider sending a chat as long as we're out of age 1.
            int enemyPlayerUnitCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, enemyPlayerID, cUnitStateAlive, kbBaseGetLocation(cMyID,  gDefenseReflexBaseID), 50.0);
            if ( (enemyPlayerUnitCount > (2 * gGoodArmyPop)) && (enemyPlayerUnitCount > (3* armySize)) )
            {  // Enemy army is big, and we're badly outnumbered
               sendStatement(enemyPlayerID, cAICommPromptToEnemyISpotHisArmyMyBaseOverrun, kbBaseGetLocation(cMyID,  gDefenseReflexBaseID));
               aiEcho("Sending OVERRUN prompt to player "+enemyPlayerID+", he has "+enemyPlayerUnitCount+" units.");
               aiEcho("I have "+armySize+" units, and "+gGoodArmyPop+" is a good army size.");
               return;
            }
            if (enemyPlayerUnitCount > (2 * gGoodArmyPop))
            {  // Big army, but I'm still in the fight
               sendStatement(enemyPlayerID, cAICommPromptToEnemyISpotHisArmyMyBaseLarge, kbBaseGetLocation(cMyID,  gDefenseReflexBaseID));
               aiEcho("Sending LARGE ARMY prompt to player "+enemyPlayerID+", he has "+enemyPlayerUnitCount+" units.");
               aiEcho("I have "+armySize+" units, and "+gGoodArmyPop+" is a good army size.");
               return;
            }
            if (enemyPlayerUnitCount > gGoodArmyPop)
            {
               // Moderate size
               sendStatement(enemyPlayerID, cAICommPromptToEnemyISpotHisArmyMyBaseMedium, kbBaseGetLocation(cMyID,  gDefenseReflexBaseID));
               aiEcho("Sending MEDIUM ARMY prompt to player "+enemyPlayerID+", he has "+enemyPlayerUnitCount+" units.");
               aiEcho("I have "+armySize+" units, and "+gGoodArmyPop+" is a good army size.");
               return;
            }
            if ( (enemyPlayerUnitCount < gGoodArmyPop) && (enemyPlayerUnitCount < armySize) )
            {  // Small, and under control
               sendStatement(enemyPlayerID, cAICommPromptToEnemyISpotHisArmyMyBaseSmall, kbBaseGetLocation(cMyID,  gDefenseReflexBaseID));
               aiEcho("Sending SMALL ARMY prompt to player "+enemyPlayerID+", he has "+enemyPlayerUnitCount+" units.");
               aiEcho("I have "+armySize+" units, and "+gGoodArmyPop+" is a good army size.");
               return;
            }
         }
      }
      return;  // Do not check other bases
   }
   
   
   //AntiHarassment code:artheru
   int tmpI=0;
   int tmpJ=0;
   int tmpUnitID=-1;
   int enemyUID=-1;
   int mySize=-1;
   int antiHarass=0;
   vector enemyVec=cInvalidVector;
   if (enemyArmySize!=0){
	  for(tmpI=0;<enemyArmySize){
		
		enemyUID=getUnitByLocation(cUnitTypeLogicalTypeLandMilitary,
			cPlayerRelationEnemyNotGaia,cUnitStateAlive,
			kbBaseGetLocation(cMyID,  kbBaseGetMainID(cMyID)),
			cvDefenseReflexSearchRadius,tmpI);
		enemyVec=kbUnitGetPosition(enemyUID);
		mySize=getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary,
			cMyID,
			cUnitStateAlive,
			enemyVec,
			45);
		if (mySize>5) mySize=5;
		for(tmpJ=0;<mySize){
			tmpUnitID=getUnitByLocation(cUnitTypeLogicalTypeLandMilitary,cMyID,cUnitStateAlive,
				enemyVec,
				45,tmpJ);
			if (tmpUnitID!=-1 && enemyUID!=-1){
				aiTaskUnitWork(tmpUnitID,enemyUID);
				antiHarass=antiHarass+1;
			}
		}
	  }
	  //echoMessage("under harassment, sent:"+antiHarass);
   }
   
   // If we're this far, the main base is OK.  If we're in a defense reflex, see if we should stay in it, or change from passive to active.
   
   if (gDefenseReflex == true) // Currently in a defense mode, let's see if it should remain
   {
      kbUnitQuerySetPosition(enemyArmyQuery, gDefenseReflexLocation);
      kbUnitQuerySetMaximumDistance(enemyArmyQuery, cvDefenseReflexSearchRadius);  
      kbUnitQuerySetSeeableOnly(enemyArmyQuery, true);
      kbUnitQuerySetState(enemyArmyQuery, cUnitStateAlive);
      kbUnitQueryResetResults(enemyArmyQuery);
      enemyArmySize = kbUnitQueryExecute(enemyArmyQuery);
      aiEcho("******** Defense reflex in base "+gDefenseReflexBaseID+" at "+gDefenseReflexLocation);
      aiEcho("******** Enemy unit count: "+enemyArmySize+", my unit count (defend+reserve) = "+armySize);
      for (i=0; < enemyArmySize)
      {
         unitID = kbUnitQueryGetResult(enemyArmyQuery, i);
         protoUnitID = kbUnitGetProtoUnitID(unitID);
         if (i < 2)
            aiEcho("    "+unitID+" "+kbGetProtoUnitName(protoUnitID)+" "+kbUnitGetPosition(unitID));
      }

      if (enemyArmySize < 2)
      {  // Abort, no enemies, or just one scouting unit
         aiEcho("******** Ending defense reflex, no enemies remain.");
         endDefenseReflex();
         return;
      }
      

      if (baseBuildingCount(gDefenseReflexBaseID) <= 0)
      {  // Abort, no buildings
         aiEcho("******** Ending defense reflex, base "+gDefenseReflexBaseID+" has no buildings.");
         endDefenseReflex();
         return;
      }
      
      if ( kbBaseGetOwner(gDefenseReflexBaseID) <= 0)
      {  // Abort, base doesn't exist
         aiEcho("******** Ending defense reflex, base "+gDefenseReflexBaseID+" doesn't exist.");
         endDefenseReflex();
         return;
      }
      
      // The defense reflex for this base should remain in effect.
      // Check whether to start/end paused mode.
      int unitsNeeded = gGoodArmyPop;        // At least a credible army to fight them
      if (unitsNeeded > (enemyArmySize/2))   // Or half their force, whichever is less.
         unitsNeeded = enemyArmySize/2;
      bool shouldPause = false;
      if ( (armySize < unitsNeeded) && ( (armySize * 3.0) < enemyArmySize) )
         shouldPause = true;  // We should pause if not paused, or stay paused if we are
      
      if (gDefenseReflexPaused == false)
      {  // Not currently paused, do it
         if (shouldPause == true)
         {
            pauseDefenseReflex();
            aiEcho("******** Enemy count "+enemyArmySize+", my army count "+armySize);
         }
      }
      else
      {  // Currently paused...should we remain paused, or go active?
         if ( shouldPause == false )
         {
            moveDefenseReflex(gDefenseReflexLocation, cvDefenseReflexRadiusActive, gDefenseReflexBaseID);   // Activate it 
            aiEcho("******** Enemy count "+enemyArmySize+", my army count "+armySize);
         }
      }
      if (shouldPause == true)
      {  // Consider a call for help
         panic = true;
         //artheru:why...if ( ((xsGetTime() - lastHelpTime) < 300000) && (lastHelpBaseID == gDefenseReflexBaseID) )  // We called for help in the last five minutes, and it was this base
            panic = false;
         if ( ((xsGetTime() - lastHelpTime) < 60000) && (lastHelpBaseID != gDefenseReflexBaseID) )  // We called for help anywhere in the last minute
            panic = false;
         
         if (panic == true)
         {
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyINeedHelpMyBase, kbBaseGetLocation(cMyID,  gDefenseReflexBaseID));
            aiEcho("     I'm calling for help.");
            lastHelpTime = xsGetTime();
         }         
      }
      return;  // Done...we're staying in defense mode for this base, and have paused or gone active as needed.
   }

   
   // Not in a defense reflex, see if one is needed
 
   // Check other bases
   int baseCount = -1;
   int baseIndex = -1;
   int baseID = -1;

   baseCount = kbBaseGetNumber(cMyID);
   unitsNeeded = gGoodArmyPop/2;
   if (baseCount > 0)
   {
      for(baseIndex=0; < baseCount) 
      {
         baseID = kbBaseGetIDByIndex(cMyID, baseIndex);         
         if (baseID == kbBaseGetMainID(cMyID))
            continue;   // Already checked main at top of function
         
         if (baseBuildingCount(baseID) <= 0)
         {
            aiEcho("Base "+baseID+" has no buildings.");
            continue;   // Skip bases that have no buildings
         }

         // Check for overrun base
         kbUnitQuerySetPosition(enemyArmyQuery,  kbBaseGetLocation(cMyID, baseID));
         kbUnitQuerySetMaximumDistance(enemyArmyQuery, cvDefenseReflexSearchRadius); 
         kbUnitQuerySetSeeableOnly(enemyArmyQuery, true);
         kbUnitQuerySetState(enemyArmyQuery, cUnitStateAlive);
         kbUnitQueryResetResults(enemyArmyQuery);
         enemyArmySize = kbUnitQueryExecute(enemyArmyQuery);
         // Do I need to call for help?

         if ( (enemyArmySize >= 2)  )
         {  // More than just a scout...set defense reflex for this base
            moveDefenseReflex(kbBaseGetLocation(cMyID, baseID), cvDefenseReflexRadiusActive, baseID);
            aiEcho("******** Enemy count is "+enemyArmySize+", my army size is "+armySize);                  

            if ( (enemyArmySize > (armySize * 2.0)) && (enemyArmySize > 6))   // Double my size, get help...
            {
               panic = true;
               //if ( ((xsGetTime() - lastHelpTime) < 300000) && (lastHelpBaseID == baseID) )  // We called for help in the last five minutes, and it was this base
                  panic = false;
               if ( ((xsGetTime() - lastHelpTime) < 60000) && (lastHelpBaseID != baseID) )  // We called for help anywhere in the last minute
                  panic = false;
               
               if (panic == true)
               {
                  // Don't kill other missions, this isn't the main base.  Just call for help.
                  sendStatement(cPlayerRelationAlly, cAICommPromptToAllyINeedHelpMyBase, kbBaseGetLocation(cMyID, baseID));
                  aiEcho("     I'm calling for help.");
                  lastHelpTime = xsGetTime();
               }
                  
            }
            return;     // If we're in trouble in any base, ignore the others.
         } 
      }  // For baseIndex...
   }

   if (getAllyCount() > 0)
   {      
      for(i=0; < cNumberPlayers)
      {
         int numEnemyMilitary = 0;
	 int numAllyMilitary = 0;
	 int numSelfMilitary = 0;
         vector allyBaseLocation = cInvalidVector;
	 vector allyFortLocation = cInvalidVector;
         vector targetLocation = cInvalidVector;
	 vector selfBaseLocation = kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));
	 float distanceBetween = 0.0;
 
         //Do I need to send help?
         allyBaseLocation = kbBaseGetLocation(i, kbBaseGetMainID(i));
	 targetLocation = allyBaseLocation;
	 distanceBetween = distance(selfBaseLocation, targetLocation);
	 numEnemyMilitary = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationEnemyNotGaia, cUnitStateAlive, targetLocation, 100.0);
	 numAllyMilitary = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationAlly, cUnitStateAlive, targetLocation, distanceBetween) - getUnitCountByLocation(cUnitTypexpMedicineManAztec, cPlayerRelationAlly, cUnitStateAlive, targetLocation, distanceBetween);
	 numSelfMilitary = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cMyID, cUnitStateAlive, targetLocation, distanceBetween) - kbUnitCount(cMyID, cUnitTypexpMedicineManAztec, cUnitStateAlive);
	 if (numEnemyMilitary > 1.2 * numAllyMilitary)
	 {
            // More than just a scout...set defense reflex for this base
            moveDefenseReflex(kbBaseGetLocation(i, kbBaseGetMainID(i)), 100.0, kbBaseGetMainID(i));            
         }
      }
   } 
}

rule shouldIMigrate
inactive
minInterval 17
group startup
{
   int armySize = aiPlanGetNumberUnits(gLandDefendPlan0, cUnitTypeLogicalTypeLandMilitary) + aiPlanGetNumberUnits(gLandReservePlan, cUnitTypeLogicalTypeLandMilitary);
   int enemyArmySize = -1;   
   bool migrate = false;
   static int enemyArmyQuery = -1;
   if (enemyArmyQuery < 0)
   {  // Initialize the queryID
      enemyArmyQuery = kbUnitQueryCreate("Enemy army query");
      kbUnitQuerySetIgnoreKnockedOutUnits(enemyArmyQuery, true);
      kbUnitQuerySetPlayerRelation(enemyArmyQuery, cPlayerRelationEnemyNotGaia);
      kbUnitQuerySetUnitType(enemyArmyQuery, cUnitTypeLogicalTypeLandMilitary);
      kbUnitQuerySetState(enemyArmyQuery, cUnitStateAlive);
      kbUnitQuerySetSeeableOnly(enemyArmyQuery, true);   // Ignore units we think are under fog
   }
   
   // Check main base first
   kbUnitQuerySetPosition(enemyArmyQuery,  kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
   kbUnitQuerySetMaximumDistance(enemyArmyQuery, cvDefenseReflexSearchRadius);   
   kbUnitQuerySetSeeableOnly(enemyArmyQuery, true);
   kbUnitQuerySetState(enemyArmyQuery, cUnitStateAlive);
   kbUnitQueryResetResults(enemyArmyQuery);
   enemyArmySize = kbUnitQueryExecute(enemyArmyQuery);
   if (enemyArmySize >= 2)
   {  
      // Enemy army size at least 3x my size and more than 30 units total. Thus, we migrate
      if ( ((armySize * 3.0) < enemyArmySize) && (enemyArmySize > 30) )
      {  // Too big to handle                      
         xsEnableRule("createNewBase");         
      }                     
   } 
}

//==============================================================================
/*
   createHomeBase

   If there is a completed town center, use it.  Failing that, Wait until the 
   town center is complete, then build other stuff next to it.

*/
//==============================================================================
rule createNewBase
inactive
minInterval 2
{
   // First, create a query if needed, then use it to look for a completed town center
   static int townCenterQuery = -1;
   if (townCenterQuery < 0)
   {
      townCenterQuery=kbUnitQueryCreate("Completed Town Center Query");
      kbUnitQuerySetIgnoreKnockedOutUnits(townCenterQuery, true);
   }  
   //Define the query
   if (townCenterQuery != -1)
   {
      kbUnitQuerySetPlayerRelation(townCenterQuery, -1);
      kbUnitQuerySetPlayerID(townCenterQuery, cMyID);
      kbUnitQuerySetUnitType(townCenterQuery, cUnitTypeTownCenter);
      kbUnitQuerySetState(townCenterQuery, cUnitStateAlive);	  
   }  
   
   // Run the query
   kbUnitQueryResetResults(townCenterQuery);
   int count = kbUnitQueryExecute(townCenterQuery);
       
   if (count < 1) 
      return;  

   for (i=0; < count)
   {
      int tcID = kbUnitQueryGetResult(townCenterQuery, i);
      aiEcho("New TC is "+tcID+" at "+kbUnitGetPosition(tcID));
   }

   if (findACompletedTownCenter() == true)  
   {
      int tcBase = kbUnitGetBaseID(tcID);
      gMainBase = kbBaseGetMainID(cMyID);
      aiEcho(" TC base is "+tcBase+", main base is "+gMainBase);
      // We have a TC.  Make sure that the main base exists, and it includes the TC
      if ( gMainBase < 0 )
      {  // We have no main base, create one
         gMainBase = createMainBase(kbUnitGetPosition(tcID));
         aiEcho(" We had no main base, so we created one: "+gMainBase);
      }
      tcBase = kbUnitGetBaseID(tcID);  // in case base ID just changed
      if ( tcBase != gMainBase ) 
      {
         aiEcho(" TC "+tcID+" is not in the main base ("+gMainBase+".");
         aiEcho(" Setting base "+gMainBase+" to non-main, setting base "+tcBase+" to main.");
         kbBaseSetMain(cMyID, gMainBase, false);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeEasy, gMainBase);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeHunt, gMainBase);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeHerdable, gMainBase);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeHuntAggressive, gMainBase);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeFish, gMainBase);
         aiRemoveResourceBreakdown(cResourceFood, cAIResourceSubTypeFarm, gMainBase);
         aiRemoveResourceBreakdown(cResourceWood, cAIResourceSubTypeEasy, gMainBase);
         aiRemoveResourceBreakdown(cResourceGold, cAIResourceSubTypeEasy, gMainBase);
         kbBaseSetMain(cMyID, tcBase, true);
         gMainBase = tcBase;
      }               
   }
   else
   {
      aiEcho(" Wait until the town center is complete ");
      return; 
   }

   // Town center found, start building the other buildings
   xsDisableSelf();
}

//==============================================================================
/*
   selectCaptain

   Updates the global gIAmCaptain bool.  Also sets the gCaptainPlayerNumber int.
   Algorithm is brain-dead simple.
   I am captain if I am the lowest-numbered AI player on a team with no 
   human players.  Otherwise, I am not captain.

*/
//==============================================================================
rule selectCaptain
active
minInterval 30
{
   int player = -1;
   bool amCaptain = false;  // Unless proven otherwise
   bool humanTeammate = false;   // Set true if/when a human teammate is found
   int captainsNumber = -1;   // Set when we find a captain


   for (player = 1; < cNumberPlayers)
   {
      if (kbHasPlayerLost(player) == false)
      {
         if (kbIsPlayerAlly(player) == true)
         {
            // if this player is human, that's the captainsNumber
            if ( (kbIsPlayerHuman(player) == true) && (kbHasPlayerLost(player) == false) && (humanTeammate == false) )
            {
               amCaptain = false;         // AI player is definitely not human
               captainsNumber = player;
               humanTeammate = true;
            }
            else
            {  // This is an AI player or a human player other than the first.  If it's not me and has a lower number and there's no human yet, he's captain.
               if( (kbIsPlayerHuman(player) == false) && (kbHasPlayerLost(player) == false)  && (humanTeammate == false) )
               {
                  if ( (player <= cMyID) && (captainsNumber < 0) )   // He's <= me and there's no captain yet
                  {
                     captainsNumber = player;
                     if (player == cMyID)
                        amCaptain = true;    // I'm the captain...unless human player is found later.
                  }
               }
            }
         }
      }
   }  // End for(player) loop.
   if ( (captainsNumber != gCaptainPlayerNumber) || (gIAmCaptain != amCaptain) )
   {  // Something changed
      aiEcho("***  Old captain was "+gCaptainPlayerNumber+", new captain is "+captainsNumber);
      gCaptainPlayerNumber = captainsNumber;
      gIAmCaptain = amCaptain;
   }
}




int getMapID(void)
{
   int mapIndex = 0;
   for (mapIndex = 0; < xsArrayGetSize(gMapNames))
   {
      if ( xsArrayGetString(gMapNames, mapIndex) == cRandomMapName )
      {
         return(mapIndex);
      }
   }
   return(-1);
}


//Awesome Patch for shitty api missing explorer knockout check.... I USED IGNOREKNOCKOUT!
int arrDeadExplorer=-1;
int arrDeadExplorerVec=-1;
int nDeadExplorer=0;

void dieExplorer(int targetID=-1){
	if (kbUnitIsType(targetID,cUnitTypeHero)){
		xsArraySetInt(arrDeadExplorer,nDeadExplorer,targetID);
		xsArraySetVector(arrDeadExplorer,nDeadExplorer,kbUnitGetPosition(targetID));
		nDeadExplorer=nDeadExplorer+1;
	}
}
bool isDeadExplorer(int ID=-1){//for engage judgement.
	int i=0;
	for(i=0;<nDeadExplorer)
		if (xsArrayGetInt(arrDeadExplorer,i)==ID)
			return (true);
	return (false);
}
bool isExplorerDead(int ID=-1,int ref=-1){//Don't know if dead...
	int i=0;
	for(i=0;<nDeadExplorer)
		if (xsArrayGetInt(arrDeadExplorer,i)==ID)
			return (true);
	if (distance(kbUnitGetPosition(ID),kbUnitGetPosition(ref))<1 && 
		kbUnitGetTargetUnitID(ref)==-1 &&
		kbUnitGetTargetUnitID(ID)==-1
	){
		xsArraySetInt(arrDeadExplorer,nDeadExplorer,ID);
		xsArraySetVector(arrDeadExplorer,nDeadExplorer,kbUnitGetPosition(ID));
		nDeadExplorer=nDeadExplorer+1;
		return (true);
	}
	return(false);
}

rule CheckExplorerDead
active
minInterval 1
{
	//if explorer has moved it's position more then 3(in case of height change...), then he's revived... or he has a target.
	int i=0;
	while(i<nDeadExplorer){
		vector vec=xsArrayGetVector(arrDeadExplorer,i);
		int ID=xsArrayGetInt(arrDeadExplorer,i);
		if (distance(vec,kbUnitGetPosition(ID))>3 || kbUnitGetTargetUnitID(ID)!=-1){
			xsArraySetInt(arrDeadExplorer,i,xsArrayGetInt(arrDeadExplorer,nDeadExplorer));
			xsArraySetVector(arrDeadExplorer,i,xsArrayGetVector(arrDeadExplorer,nDeadExplorer));
			nDeadExplorer=nDeadExplorer-1;
		}
		i=i+1;
	}
}

bool isUnitDead(int targetID=-1,int ref=-1){
	return 
		(
			(kbUnitGetHealth(targetID)==0) ||
			(kbUnitIsType(targetID,cUnitTypeHero) && isExplorerDead(targetID,ref))
		);
}

void updateMicroOps(void){
	int i=0;
	string tmp="";
	while(i<nEngaged){
		int unitID=xsArrayGetInt(arrEngaged,i);
		int targetID=xsArrayGetInt(arrEngagedTarget,i);
		
		if (kbUnitGetHealth(unitID)==0) {
			dengage(i);
			dieExplorer(targetID);
			tmp=tmp+"Dead"+unitID+",";
			continue;
		}
		
		vector vecUnit=kbUnitGetPosition(unitID);
		vector vecTarget=kbUnitGetPosition(targetID);
		
		
		if (kbUnitIsType(unitID,cUnitTypeAbstractVillager)){
			if (isUnitDead(targetID,unitID)){ //fuck... the... explorer...
				dengage(i);
				tmp=tmp+"Done\n";
				continue;
			}
			if (kbUnitGetPlanID(unitID)>0) {
				tmp=tmp+"Planed\n";
				dengage(i);
				continue; //Damn there is a building to build...
			}
			if (distance(vecUnit,vecTarget)>18){
				tmp=tmp+"WentFar\n";
				dengage(i);
				continue;
			}
			int tmpEID=getClosestUnitByLocation(cUnitTypeLogicalTypeLandMilitary,cPlayerRelationEnemyNotGaia,cUnitStateAlive,vecUnit);
			if (tmpEID!=targetID && distance(vecUnit,kbUnitGetPosition(tmpEID))<2){
				aiTaskUnitWork(unitID,tmpEID);
				xsArraySetInt(arrEngagedTarget,i,tmpEID);
				tmp=tmp+"ChangeTarget\n";
			}
			else if (distance(vecUnit,vecTarget)<=1.8){
				tmp=tmp+"Melee"+vecTarget+","+vecUnit+",";
				aiTaskUnitWork(unitID,targetID);
				updateAux(i,xsGetTime());
			}
			else if (kbUnitGetHealth(unitID)<0.3){
				tmp=tmp+"RunAway";
				vector run=getFleeVec(vecUnit);
				if (run==cInvalidVector){
					dengage(i);
				}else
				aiTaskUnitMove(unitID,);
			}
			else if (xsGetTime()-getAux(i)<3000){ //not recharged, go on for melee.
				tmp=tmp+"Closeup"+(xsGetTime()-getAux(i))+",";
				aiTaskUnitMove(unitID,vecTarget);
			}
			else {
				tmp=tmp+"Shot";
				aiTaskUnitWork(unitID,targetID);
				updateAux(i,xsGetTime());
			}
		}
		
		tmp=tmp+"("+unitID+","+kbGetUnitTypeName(kbGetUnitBaseTypeID(targetID))+":"+distance(vecUnit,vecTarget)+","+")\n";
		i=i+1;
	}
	echoMessage(tmp);
}

//Engage a sophisticated combat.
rule microOperation
active
minInterval 1
{
	updateMicroOps();
}

//==============================================================================
/* initPersonality()
   
   A function to set defaults that need to be in place before the loader file's
   preInit() function is called.  
*/
//==============================================================================
void initPersonality(void)
{   
   int civ = kbGetCiv();
   if (civ == cCivTheCircle)
      civ = cCivBritish;
   if (civ == cCivPirate)
      civ = cCivBritish;
   if (civ == cCivSPCAct3)
      civ = cCivBritish;
   // Set behavior traits
   aiEcho("My civ is "+civ);
   
   switch(civ)
   {
      case cCivBritish:    // Elizabeth:  Infantry oriented boomer, favors natives
      {
         btRushBoom = -1.0;
         btOffenseDefense = 0.0;
         btBiasCav = 0.0;
         btBiasInf = 0.5;
         btBiasArt = 0.0;
         btBiasNative = 1.0;
         btBiasTrade = 1.0;
         break;
      }
      case cCivFrench:     // Napoleon:  Cav oriented, balanced, favors natives
      {
         btRushBoom = 0.0;
         btOffenseDefense = 0.0;
         btBiasCav = 0.5;
         btBiasInf = 0.0;
         btBiasArt = 0.0;
         btBiasNative = 1.0;
         btBiasTrade = 1.0;
         break;
      }
      case cCivSpanish:    // Isabella:  Rusher, disdains trading posts
      {
         btRushBoom = 1.0;
         btOffenseDefense = 1.0;
         btBiasCav = 0.0;
         btBiasInf = 0.0;
         btBiasArt = 0.0;
         btBiasNative = -1.0;
         btBiasTrade = -1.0;
         break;
      }
      case cCivRussians:   // Ivan:  Infantry oriented turtler
      {
         btRushBoom = -0.5;   // Slight boomer, he needs the econ in age 2 to keep settlers training.
         btOffenseDefense = -1.0;
         btBiasCav = 0.0;
         btBiasInf = 0.5;
         btBiasArt = 0.0;
         btBiasNative = 0.8;
         btBiasTrade = 0.8;
         break;
      }
      case cCivGermans:    // Cavalry oriented rusher
      {
         btRushBoom = 1.0;
         btOffenseDefense = 0.5;
         btBiasCav = 0.5;
         btBiasInf = 0.0;
         btBiasArt = 0.0;
         btBiasNative = -0.5;
         btBiasTrade = -0.5;
         break;
      }
      case cCivDutch:      // Turtler, boomish, huge emphasis on trade
      {
         btRushBoom = -0.5;
         btOffenseDefense = -1.0;
         btBiasCav = 0.0;
         btBiasInf = 0.0;
         btBiasArt = 0.0;
         btBiasNative = 0.5;
         btBiasTrade = 1.0;
         break;
      }
      case cCivPortuguese: // Artillery oriented boomer, favors trade   
      {
         btRushBoom = -1.0;
         btOffenseDefense = 0.5;
         btBiasCav = 0.0;
         btBiasInf = 0.0;
         btBiasArt = 0.0;  // TODO - boost artillery
         btBiasNative = 0.5;
         btBiasTrade = 1.0;
         break;
      }
      case cCivOttomans:   // Artillery oriented, balanced
      {
         btRushBoom = 0.0;
         btOffenseDefense = 0.0;
         btBiasCav = 0.0;
         btBiasInf = 0.0;
         btBiasArt = 0.0;  // TODO - boost artillery 
         btBiasNative = 0.8;
         btBiasTrade = 0.8;
         break;
      }
      case cCivXPSioux:   // Extreme rush, ignores trade routes
      {
         btRushBoom = 0.8;
         btOffenseDefense = 0.0;
         btBiasCav = 0.0;
         btBiasInf = 0.0;
         btBiasArt = 0.0;  
         btBiasNative = 0.8;
         btBiasTrade = -1.0;
         break;
      }
      case cCivXPIroquois:   // Balanced, trade and native bias.
      {
         btRushBoom = 0.0;
         btOffenseDefense = 0.0;
         btBiasCav = 0.0;
         btBiasInf = 0.0;
         btBiasArt = 0.0;   
         btBiasNative = 1.0;
         btBiasTrade = 1.0;
         break;
      }
      case cCivXPAztec:   // Chaotic, but usually light boom, defensive.
      {
         btRushBoom = -0.5;
         if (aiRandInt(10) < 3)
            btRushBoom = 1.0;
         btOffenseDefense = -1.0;
         if (aiRandInt(10) < 3)
            btOffenseDefense = 1.0;
         btBiasCav = 0.0;
         btBiasInf = 1.0;
         btBiasArt = 0.0;  
         btBiasNative = 0.0;
         if (aiRandInt(10) < 3)
            btBiasNative = 1.0;
         btBiasTrade = 0.0;
         if (aiRandInt(10) < 3)
            btBiasTrade = 1.0;
         break;
      }
      case cCivChinese:   // Kangxi:  Infantry oriented turtler
      {
         btRushBoom = -0.5;   // Slight boomer, he needs the econ in age 2 to keep settlers training.
         btOffenseDefense = 0;
         btBiasCav = 0.0;
         btBiasInf = 0.5;
         btBiasArt = 0.0;
         btBiasNative = 1.0;
         btBiasTrade = 0.2;
         break;
      }
      case cCivJapanese:   // Extreme rush, ignores trade routes
      {
         btRushBoom = 1.0;
         btOffenseDefense = 1.0;
         btBiasCav = 0.0;
         btBiasInf = 0.0;
         btBiasArt = 0.0;  
         btBiasNative = 0.5;
         btBiasTrade = -1.0;
         break;
      }
      case cCivIndians:    // Cavalry oriented rusher
      {
         btRushBoom = 0.1;
         btOffenseDefense = -0.1;
         btBiasCav = 0.5;
         btBiasInf = 0.0;
         btBiasArt = 0.0;
         btBiasNative = 0.5;
         btBiasTrade = 0.5;
         break;
      }
   }
   
   // randomize AI personalities for non-SPC/campaign games
   if (gSPC == false)
   {
      // Randomizing basic game strategy
      // About two thirds of the time the AI will play a "normal" game as defined above
      // The rest of the time it will choose a different overall strategy
      int strategyRandomizer = aiRandInt(2); // 0-1
      switch(civ)
      {
         case cCivBritish:
         {
            if (strategyRandomizer == 0)
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;              
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivDutch:
         {
            if (strategyRandomizer == 0)
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivFrench:
         {
            if (strategyRandomizer == 0)
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivGermans:
         {
            if (strategyRandomizer == 0)
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else 
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivOttomans:
         {
            if (strategyRandomizer == 0)
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivPortuguese:
         {
            if (strategyRandomizer == 0)
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivRussians:
         {
            if (strategyRandomizer == 0) 
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivSpanish:
         {
            if (strategyRandomizer == 0)
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivXPAztec:
         {
            if (strategyRandomizer == 0) 
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else 
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivXPIroquois:
         {
            if (strategyRandomizer == 0) 
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivXPSioux:
         {
            if (strategyRandomizer == 0) 
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else 
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivChinese:
         {
            if (strategyRandomizer == 0) 
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else 
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivIndians:
         {
            if (strategyRandomizer == 0) 
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else 
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         case cCivJapanese:
         {
            if (strategyRandomizer == 0)
            {
               btRushBoom = -1.0;
               btOffenseDefense = 1.0;
               aiEcho("Chosen strategy: Booming");
            }
            else 
            {
               btRushBoom = 1.0;
               btOffenseDefense = -1.0;
               aiEcho("Chosen strategy: Rushing");
            }
            break;
         }
         default:
         {
            // do nothing and go with defaults (this should never happen)
            break;
         }
      }

      // Randomizing native bias
      // Native bias can be changed randomly, but will remain in the 0.0 - 1.0 area
      // Basic values of 0.0 or 1.0 won't be changed in two out of three cases
      // A basic value of 0.5 becomes almost completely random
      int nativeBiasRandomizer = aiRandInt(10);
      if (nativeBiasRandomizer < 1) // 10 % probability
      {
         btBiasNative = btBiasNative - 1.0;
         aiEcho("Native bias reduced by 1.0");
      }
      else if (nativeBiasRandomizer < 3) // 20 % probability
      {
         btBiasNative = btBiasNative - 0.5;
         aiEcho("Native bias reduced by 0.5");
      }
      else if (nativeBiasRandomizer < 7) // 40 % probability
      {
         aiEcho("Native bias unchanged");
      }
      else if (nativeBiasRandomizer < 9) // 20 % probability
      {
         btBiasNative = btBiasNative + 0.5;
         aiEcho("Native bias increased by 0.5");
      }
      else // 10 % probability
      {
         btBiasNative = btBiasNative + 1.0;
         aiEcho("Native bias increased by 1.0");
      }

      // Keep native bias in the 0.0 - 1.0 area
      if (btBiasNative > 1.0)
         btBiasNative = 1.0;
      if (btBiasNative < 0.0)
         btBiasNative = 0.0;
      aiEcho("Native bias set to "+btBiasNative);
   }

	// Set default politician choices
   aiSetPoliticianChoice(cAge2, aiGetPoliticianListByIndex(cAge2, 0));  // Just grab the first available
   aiSetPoliticianChoice(cAge3, aiGetPoliticianListByIndex(cAge3, 0));
   aiSetPoliticianChoice(cAge4, aiGetPoliticianListByIndex(cAge4, 0));
   aiSetPoliticianChoice(cAge5, aiGetPoliticianListByIndex(cAge5, 0));



	//-- See who we are playing against.  If we have played against these players before, seed out unitpicker data, and then chat some.
	//XS_HELP("float aiPersonalityGetGameResource(int playerHistoryIndex, int gameIndex, int resourceID): Returns the given resource from the gameIndex game. If gameIndex is -1, this will return the avg of all games played.")
	//XS_HELP("int aiPersonalityGetGameUnitCount(int playerHistoryIndex, int gameIndex, int unitType): Returns the unit count from the gameIndex game. If gameIndex is -1, this will return the avg of all games played.")
   // To understand my opponent's unit biases, I'll have to do the following:
   //          1)  Store the opponents civ each game
   //          2)  On game start, look up his civ from last game
   //          3)  Based on his civ, look up how many units he made of each class (inf, cav, art), compare to 'normal'.
   //          4)  Set unitPicker biases to counter what he's likely to send.  
   
	int numPlayerHistories = aiPersonalityGetNumberPlayerHistories();
	aiEcho("PlayerHistories: "+numPlayerHistories);
	for (pid = 1; < cNumberPlayers)
	{
		//-- Skip ourself.
		if (pid == cMyID)
			continue;

		//-- get player name
		string playerName = kbGetPlayerName(pid);
		aiEcho("PlayerName: "+playerName);

		//-- have we played against them before.
		int playerHistoryID = aiPersonalityGetPlayerHistoryIndex(playerName);
		if(playerHistoryID == -1)
		{
			aiEcho("PlayerName: Never played against");
			//-- Lets make a new player history.
			playerHistoryID = aiPersonalityCreatePlayerHistory(playerName);
         if (kbIsPlayerAlly(pid) == true)
            sendStatement(pid, cAICommPromptToAllyIntro); 
         else
            sendStatement(pid, cAICommPromptToEnemyIntro);
			if(playerHistoryID == -1)
			{
				aiEcho("PlayerName: Failed to create player history for "+playerName);
				continue;
			}
			aiEcho("PlayerName: Created new history for "+playerName);
		}
		else
		{
			//-- get how many times we have played against them.
			float totalGames = aiPersonalityGetPlayerGamesPlayed(playerHistoryID, cPlayerRelationAny);
			float numberGamePlayedAgainst = aiPersonalityGetPlayerGamesPlayed(playerHistoryID, cPlayerRelationEnemy);
			float numberGamesTheyWon = aiPersonalityGetTotalGameWins(playerHistoryID, cPlayerRelationEnemy);
			float myWinLossRatio = 1.0 - (numberGamesTheyWon/numberGamePlayedAgainst);
			aiEcho("PlayedAgainst: "+numberGamePlayedAgainst);
			aiEcho("TimesTheyWon: "+numberGamesTheyWon);
			aiEcho("MyWinLossRatio: "+myWinLossRatio);

			bool iWonOurLastGameAgainstEachOther = aiPersonalityGetDidIWinLastGameVS(playerHistoryID);
			//bool weWonOurLastGameTogether; <-- cant do yet.
         

			//-- get how fast they like to attack
         // Minus one game index gives an average.
			int avgFirstAttackTime = aiPersonalityGetGameFirstAttackTime(playerHistoryID, -1);
			aiEcho("Player's Avg first Attack time: "+avgFirstAttackTime);

			int lastFirstAttackTime = aiPersonalityGetGameFirstAttackTime(playerHistoryID, totalGames-1);
			aiEcho("Player's Last game first Attack time: "+lastFirstAttackTime);

			//-- save some info.
			aiPersonalitySetPlayerUserVar(playerHistoryID, "myWinLossPercentage", myWinLossRatio);
			//-- test, get the value back out
			float tempFloat = aiPersonalityGetPlayerUserVar(playerHistoryID, "myWinLossPercentage");
         
         // Consider chats based on player history...
         // First, combinations of "was ally last time" and "am ally this time"
         bool wasAllyLastTime = true;
         bool isAllyThisTime = true;
         if (aiPersonalityGetPlayerUserVar(playerHistoryID, "wasMyAllyLastGame") == 0.0)
            wasAllyLastTime = false;
         if (kbIsPlayerAlly(pid) == false)
            isAllyThisTime = false;
         bool difficultyIsHigher = false;
         bool difficultyIsLower = false;
         float lastDifficulty = aiPersonalityGetPlayerUserVar(playerHistoryID, "lastGameDifficulty");
         if (lastDifficulty >= 0.0)
         {
            if (lastDifficulty > aiGetWorldDifficulty())
               difficultyIsLower = true;
            if (lastDifficulty < aiGetWorldDifficulty())
               difficultyIsHigher = true;
         }
         bool iBeatHimLastTime = false;
         bool heBeatMeLastTime = false;
         bool iCarriedHimLastTime = false;
         bool heCarriedMeLastTime = false;
  
         if (aiPersonalityGetPlayerUserVar(playerHistoryID, "heBeatMeLastTime") == 1.0) // STORE ME
            heBeatMeLastTime = true;         
         if (aiPersonalityGetPlayerUserVar(playerHistoryID, "iBeatHimLastTime") == 1.0) // STORE ME
            iBeatHimLastTime = true;
         if (aiPersonalityGetPlayerUserVar(playerHistoryID, "iCarriedHimLastTime") == 1.0) // STORE ME
            iCarriedHimLastTime = true;
         if (aiPersonalityGetPlayerUserVar(playerHistoryID, "heCarriedMeLastTime") == 1.0) // STORE ME
            heCarriedMeLastTime = true;
         
        
         if (wasAllyLastTime == false)
         {
            if (aiPersonalityGetPlayerUserVar(playerHistoryID, "iBeatHimLastTime") == 1.0) // STORE ME
               iBeatHimLastTime = true;
            if (aiPersonalityGetPlayerUserVar(playerHistoryID, "heBeatMeLastTime") == 1.0) // STORE ME
               heBeatMeLastTime = true;
         }
         
         bool iWonLastGame = false;
         if (aiPersonalityGetPlayerUserVar(playerHistoryID, "iWonLastGame") == 1.0) // STORE ME
            iWonLastGame = true;
         
        
         if (isAllyThisTime)
         {  // We are allies
            if (difficultyIsHigher == true)
               sendStatement(pid, cAICommPromptToAllyIntroWhenDifficultyHigher);
            if (difficultyIsLower == true)
               sendStatement(pid, cAICommPromptToAllyIntroWhenDifficultyLower);
            if (iCarriedHimLastTime == true)
               sendStatement(pid, cAICommPromptToAllyIntroWhenICarriedHimLastGame);
            if (heCarriedMeLastTime == true)
               sendStatement(pid, cAICommPromptToAllyIntroWhenHeCarriedMeLastGame);
            if (iBeatHimLastTime == true)
               sendStatement(pid, cAICommPromptToAllyIntroWhenIBeatHimLastGame);
            if (heBeatMeLastTime == true)
               sendStatement(pid, cAICommPromptToAllyIntroWhenHeBeatMeLastGame);

            aiEcho("Last map ID was "+aiPersonalityGetPlayerUserVar(playerHistoryID, "lastMapID"));
            if ( (getMapID() >= 0) && (getMapID() == aiPersonalityGetPlayerUserVar(playerHistoryID, "lastMapID")) )
            {
               sendStatement(pid, cAICommPromptToAllyIntroWhenMapRepeats);
               aiEcho("Last map ID was "+aiPersonalityGetPlayerUserVar(playerHistoryID, "lastMapID"));
            }
            if (wasAllyLastTime)
            {               
               aiEcho(playerName + " was my ally last game and is my ally this game.");
               if (iWonLastGame == false)
                  sendStatement(pid, cAICommPromptToAllyIntroWhenWeLostLastGame);
               else
                  sendStatement(pid, cAICommPromptToAllyIntroWhenWeWonLastGame);
            }
            else
            {
               aiEcho(playerName + " was my enemy last game and is my ally this game.");
            }
         }
         else
         {  // We are enemies
            if (difficultyIsHigher == true)
               sendStatement(pid, cAICommPromptToEnemyIntroWhenDifficultyHigher);
            if (difficultyIsLower == true)
               sendStatement(pid, cAICommPromptToEnemyIntroWhenDifficultyLower);
            if ( (getMapID() >= 0) && (getMapID() == aiPersonalityGetPlayerUserVar(playerHistoryID, "lastMapID")) )
               sendStatement(pid, cAICommPromptToEnemyIntroWhenMapRepeats);
            if (wasAllyLastTime)
            {
               aiEcho(playerName + " was my ally last game and is my enemy this game.");
            }
            else
            {
               aiEcho(playerName + " was my enemy last game and is my enemy this game.");
               // Check if he changed the odds
               // First, see if enemyCount is the same, but ally count is down
               int enemyCount = aiPersonalityGetPlayerUserVar(playerHistoryID, "myEnemyCount");
               int allyCount = aiPersonalityGetPlayerUserVar(playerHistoryID, "myAllyCount");
               if (enemyCount == getEnemyCount())
               {
                  if (allyCount > getAllyCount())  // I have fewer allies now
                     sendStatement(pid, cAICommPromptToEnemyIntroWhenTeamOddsEasier);  // He wimped out
                  if (allyCount < getAllyCount()) // I have more allies now
                     sendStatement(pid, cAICommPromptToEnemyIntroWhenTeamOddsHarder);  // He upped the difficulty
               }
               // Next, see if allyCount is the same, but enemyCount is smaller
               if (allyCount == getAllyCount())
               {
                  if (enemyCount > getEnemyCount())  // I have fewer enemies now
                     sendStatement(pid, cAICommPromptToEnemyIntroWhenTeamOddsHarder);  // He upped the difficulty
                  if (enemyCount < getEnemyCount()) // I have more enemies now
                     sendStatement(pid, cAICommPromptToEnemyIntroWhenTeamOddsEasier);  // He wimped out
               }               
            }
         }         
		}
      
      // Save info about this game
      aiPersonalitySetPlayerUserVar(playerHistoryID, "lastGameDifficulty", aiGetWorldDifficulty());
      int wasAlly = 0;
      if (kbIsPlayerAlly(pid)==true)
         wasAlly = 1;
      else
      {  // He is an enemy, remember the odds (i.e. 1v3, 2v2, etc.)
         aiPersonalitySetPlayerUserVar(playerHistoryID, "myAllyCount", getAllyCount());
         aiPersonalitySetPlayerUserVar(playerHistoryID, "myEnemyCount", getEnemyCount());         
      }
      aiPersonalitySetPlayerUserVar(playerHistoryID, "wasMyAllyLastGame", wasAlly);
      aiPersonalitySetPlayerUserVar(playerHistoryID, "lastMapID", getMapID());
     
	}
}

void gameOverHandler(int nothing = 0)
{
   bool iWon = false;
	if(kbHasPlayerLost(cMyID) == false)
		iWon = true;

	aiEcho("Game is over.");
   aiEcho("Have I lost returns "+kbHasPlayerLost(cMyID));
   if(iWon == false)
      aiEcho("I lost.");
   else
      aiEcho("I won.");
   
	for (pid = 1; < cNumberPlayers)
	{
		//-- Skip ourself.
		if (pid == cMyID)
			continue;

		//-- get player name
		string playerName = kbGetPlayerName(pid);
		aiEcho("PlayerName: "+playerName);

		//-- Does a record exist?
		int playerHistoryID = aiPersonalityGetPlayerHistoryIndex(playerName);
		if(playerHistoryID == -1)
		{
			aiEcho("PlayerName: Never played against");
			//-- Lets make a new player history.
			playerHistoryID = aiPersonalityCreatePlayerHistory(playerName);
      }
      
      
/* Store the following user vars:
      heBeatMeLastTime
      iBeatHimLastTime
      iCarriedHimLastTime
      heCarriedMeLastTime
      iWonLastGame
*/            
      if (iWon == true)
      {  // I won
         aiPersonalitySetPlayerUserVar(playerHistoryID, "iWonLastGame", 1.0);
         if (kbIsPlayerEnemy(pid) == true)
         {
            aiPersonalitySetPlayerUserVar(playerHistoryID, "iBeatHimLastTime", 1.0);
            aiPersonalitySetPlayerUserVar(playerHistoryID, "heBeatMeLastTime", 0.0);
            aiEcho("This player was my enemy.");
         }
      }
      else
      {  // I lost
         aiPersonalitySetPlayerUserVar(playerHistoryID, "iWonLastGame", 0.0);
         if (kbIsPlayerEnemy(pid) == true)
         {
            aiPersonalitySetPlayerUserVar(playerHistoryID, "iBeatHimLastTime", 0.0);
            aiPersonalitySetPlayerUserVar(playerHistoryID, "heBeatMeLastTime", 1.0);
            aiEcho("This player was my enemy.");
         }
      }
      if (kbIsPlayerAlly(pid) == true)
      {  // Was my ally
         if ( aiGetScore(cMyID) > (2 * aiGetScore(pid)) )   
         {  // I outscored him badly
            aiPersonalitySetPlayerUserVar(playerHistoryID, "iCarriedHimLastTime", 1.0);
            aiEcho("I carried my ally.");
         }
         else
            aiPersonalitySetPlayerUserVar(playerHistoryID, "iCarriedHimLastTime", 0.0);
         if ( aiGetScore(pid) > (2 * aiGetScore(cMyID) ) )
         {  // My ally carried me.
            aiEcho("My ally carried me.");
            aiPersonalitySetPlayerUserVar(playerHistoryID, "heCarriedMeLastTime", 1.0);
         }
         else
            aiPersonalitySetPlayerUserVar(playerHistoryID, "heCarriedMeLastTime", 0.0);
      }
      else
      {
         aiPersonalitySetPlayerUserVar(playerHistoryID, "iCarriedHimLastTime", 0.0);
         aiPersonalitySetPlayerUserVar(playerHistoryID, "heCarriedMeLastTime", 0.0);
      }
      
   }
   
}


//==============================================================================
/* SPCInit()
   
   A function to set defaults that need to be in place before the loader file's
   preInit() function is called.  
*/
//==============================================================================
void SPCInit(void)
{
   // Taunt defaults to true, but needs to be false in scenario games.
   if (gSPC == true)
      cvOkToTaunt = false;

   if (kbGetCiv() == cCivFrench)
   {
      int i = 0;
      for (i=0; <=cAge5)
      {  // Need fewer coureurs
         xsArraySetInt(gTargetSettlerCounts, i, xsArrayGetInt(gTargetSettlerCounts, i) * 0.9);
      }
   }

   if ( (cRandomMapName == "amazonia") || 
        (cRandomMapName == "caribbean") || 
        (cRandomMapName == "Ceylon") || 
        (cRandomMapName == "Borneo") || 
        (cRandomMapName == "Honshu") )
   {
      aiSetWaterMap(true);
      gWaterMap = true;
   }
}



int gCardNames = -1;       // Array of strings, handy name for this card.
int gCardStates = -1;      // Array of chars (strings), A = avail, N = Not avail, P = Purchased, D = in deck (and purchased)
int gCardPriorities = -1;  // Array of ints, used for selecting cards into deck.  

const int maxCards = 150;
const int deckSize = 20;
const int pointsForLevel2 = 5;   // First five cards must be level 1
const int pointsForLevel3 = 25;  // Cards 6..25 must be levels 1 or 2

rule buyCards
inactive
minInterval 1
{
   static int pass = 0; // Pass 0, init arrays.  Pass 1, buy cards.  Pass 2, create deck.
	static int startingSP = -1;
   if (startingSP < 0)
      startingSP = kbResourceGet(cResourceSkillPoints) - 15;   // XS won't allow float initialization of const ints, also subtract first 15 free cards.
   int remainingSP = kbResourceGet(cResourceSkillPoints) - 15;  
   int SPSpent = startingSP - remainingSP;
   int myLevel = 0;
   if (SPSpent >= 10)
      myLevel = 10;
   if (SPSpent >= 25)
      myLevel = 25;
   int totalCardCount = aiHCCardsGetTotal();
   aiEcho("My starting level is "+myLevel+", my SP remaining is "+remainingSP);
      
   switch(pass)      // Break processing load into 3 passes:  init, buy, deck.
   {
      case 0:  // Init arrays
      {
         gCardNames = xsArrayCreateString(maxCards, " ", "Card names");
         gCardStates = xsArrayCreateString(maxCards, "P", "Card states");  
         gCardPriorities = xsArrayCreateInt(maxCards, 0, "Card priorities");
         
         for (i=0; < totalCardCount)
         {  // First, set maximum priority for the "best" cards 
            // 'Advanced Trading Post', 'Royal Decree', 'Advanced Arsenal', 'New Ways' & 'Advanced Balloon',
            // plus '2 Grove Rickshaws' & 'Shogun Tokugawa'
            if ((kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCAdvancedTradingPost") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCRoyalDecreeBritish") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCRoyalDecreeDutch") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCRoyalDecreeFrench") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCRoyalDecreeGerman") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCRoyalDecreeOttoman") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCRoyalDecreePortuguese") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCRoyalDecreeRussian") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCRoyalDecreeSpanish") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCAdvancedArsenal") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCAdvancedArsenalGerman") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPNewWaysIroquois") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPNewWaysSioux") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPAdvancedBalloon") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipGroveWagonIndians2") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipShogunate"))
                    xsArraySetInt(gCardPriorities, i, 10);  // "Best" cards, pri 10

            // List of "best" cards also includes 'Agrarianism' for Indians
            // (A bug in aiHCDeckAddCardToDeck() keeps 'Foreign Logging' from being added.)
            if (kbGetCiv() == cCivIndians)
            {
               if (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCAgrarianism")
                       xsArraySetInt(gCardPriorities, i, 10);  // "Best" cards, pri 10
            }

            // Now, set priorities for the prerequisite cards for the "best" ones.
            // These will be ignored later on.
            if (kbResourceGet(cResourceSkillPoints) >= 5)
            {  // Prerequisites for '2 Grove Rickshaws', only for HC level >= 5.
               if (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipGroveWagonIndians2")
                       xsArraySetInt(gCardPriorities, i, 10);  // Prerequisite cards, pri 10
            }
            if (kbResourceGet(cResourceSkillPoints) >= 15)
            {  // Prerequisites for 'Royal Decree', 'Advanced Arsenal', 'New Ways' and 'Shogun Tokugawa', only for HC level >= 15.
               if (((kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCColonialMilitia") && (kbGetCiv() != cCivPortuguese)) ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCMosqueConstruction") ||
                   ((kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPTownDance") && (kbGetCiv() != cCivXPAztec)) ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipDaimyoAizu") ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipDaimyoSatsuma"))
                       xsArraySetInt(gCardPriorities, i, 10);  // Prerequisite cards, pri 10
            }
            if (kbResourceGet(cResourceSkillPoints) >= 25)
            {  // Prerequisites for 'Advanced Trading Post' and Indian 'Agrarism', only for HC level >= 25.
               if ((kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCNativeLore") ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCNativeLoreGerman") ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCNativeTreaties") ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCNativeTreatiesGerman") ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCNativeWarriors") ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCNativeWarriorsGerman") ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCNativeChampionsDutchTeam") ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCSawmillsIndians"))
                       xsArraySetInt(gCardPriorities, i, 10);  // Prerequisite cards, pri 10
            }
            if (kbResourceGet(cResourceSkillPoints) >= 40)
            {  // Prerequisites for 'Advanced Balloon', only for HC level >= 40.
               if (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCShipBalloons")
                       xsArraySetInt(gCardPriorities, i, 10);  // Prerequisite card, pri 10
            }

            // For all other cards, set priorities based on unit type.
            string tempString = "";
            int unit = aiHCCardsGetCardUnitType(i);
            int tech = aiHCCardsGetCardTechID(i);
            if ( (unit == cUnitTypeSettler) || 
                 (unit == cUnitTypeCoureur) || 
                 (unit == cUnitTypeSettlerWagon) || 
                 (unit == cUnitTypeSettlerNative) || 
                 (unit == cUnitTypeypSettlerAsian) || 
                 (unit == cUnitTypeypSettlerJapanese) )
               xsArraySetInt(gCardPriorities, i, 9);  // Settler card, pri 9

            if ( (xsArrayGetInt(gCardPriorities, i) == 0) && (aiHCCardsGetCardCount(i) > 2) )
               xsArraySetInt(gCardPriorities, i, 8);  // Infinite cards, pri 8

            if (xsArrayGetInt(gCardPriorities, i) == 0)
            {
               if ( (unit == cUnitTypeFortWagon) ||
                    (unit == cUnitTypeFactoryWagon) ||
                    (unit == gCoveredWagonUnit) ||
                    (unit == cUnitTypeYPDojoWagon) )
                     xsArraySetInt(gCardPriorities, i, 7);  // Fort, Factory, Dojo and Covered Wagons, pri 7
               if ( (unit == cUnitTypeOutpostWagon) || (unit == cUnitTypeYPCastleWagon) )
               {
                  if (btRushBoom <= 0)  // Outpost and castle wagon, pri 0 for rushers, pri 7 otherwise
                  {  xsArraySetInt(gCardPriorities, i, 7);  }
                  else
                  {  xsArraySetInt(gCardPriorities, i, 0);  }
               }
            }
            if ( (xsArrayGetInt(gCardPriorities, i) == 0) && (unit >= 0) )
            {  // Some type of unit, pri 6 for resources, 5 for others
               if (kbProtoUnitIsType(cMyID, unit, cUnitTypeAbstractResourceCrate) == true)
                  xsArraySetInt(gCardPriorities, i, 6);  // Resource
               else
                  xsArraySetInt(gCardPriorities, i, 5);  // Generic unit
            }            
            if ( (xsArrayGetInt(gCardPriorities, i) == 5) && (unit >= 0) )
            {  // Demote cows, sheep and surgeons to 0, non-mil units to 4, ships to 0 on land maps.
               if ((kbProtoUnitIsType(cMyID, unit, cUnitTypeLogicalTypeLandMilitary) == false) || (aiHCCardsGetCardUnitCount(i) < 3))
                  xsArraySetInt(gCardPriorities, i, 4);  // Non-military unit (including explorer dogs and uhlan pairs)
               if ((kbProtoUnitIsType(cMyID, unit, cUnitTypeHerdable) == true) || (kbProtoUnitIsType(cMyID, unit, cUnitTypeMissionary) == true) || (kbProtoUnitIsType(cMyID, unit, cUnitTypeSurgeon) == true))
                  xsArraySetInt(gCardPriorities, i, 0);  // Herdables, missionaries or surgeons.              
               if ( (gNavyMap == false) && ( (kbProtoUnitIsType(cMyID, unit, cUnitTypeAbstractWarShip) == true) || (kbProtoUnitIsType(cMyID, unit, cUnitTypeAbstractFishingBoat) == true) ) )
                  xsArraySetInt(gCardPriorities, i, 0);  // Navy units on land?  Not good.              
            }

            // Set priority to 0 for cards to be avoided if possible
            if ((kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCFrontierDefenses2") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCShipCoveredWagons2") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCConestogaWagonsTeam") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCBastionsTeam") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCUnlockFortVauban") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPUnlockFort2") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPUnlockFort2German") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCShipFalconets1German") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCShipMortars1") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCShipMortars2") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCShipMortars1German") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCShipMortars2German") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCShipMortarsTeam") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipPetards1") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipDemolitionSquadGerman") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipRams1") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPIroquoisMohawkSupport") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipSiege") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipSpies1") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipSpies2") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipSpies3") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipSpies1German") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipSpiesTeam") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPGreatTempleTezcatlipoca") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipBears") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipBearsTeam") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipCougars") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipCoyotes") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipCoyotesTeam") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipGrizzlies") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipJaguars1") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipJaguars2") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipJaguars3") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipJaguarsTeam") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipWolves") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPCoinCratesAztec4") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPCoinCratesAztec5") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPShipMixedCrates4") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipWoodCratesInf1Indians") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipWoodCratesInf2Indians") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipWoodCratesInf3Indians") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipWoodCratesInf4Indians") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCExpandedTradingPost") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCExpandedTradingPostIndians") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipCoveredWagonsChina") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipCoveredWagons2Indians") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCSacredFieldHealing") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCBazaar") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCExpandedMarket") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCCommoditiesMarket") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCAdvancedMonastery") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCAdvancedMonasteryIndians") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipBerryWagon1") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipBerryWagon2") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipRicePaddyWagon1") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipRicePaddyWagon2") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipRicePaddyWagon3") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipMorutaru1") ||
                (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipMorutaru2"))
                    xsArraySetInt(gCardPriorities, i, 0);  // Cards to be avoided, pri 0

            // Set priority to 0 for castle wagon cards to be specifically avoided for Japanese,
            // depending on whether this is a team game or not (only for HC level >= 30)
            if ((kbGetCiv() == cCivJapanese) && (kbResourceGet(cResourceSkillPoints) >= 30))
            {
               if (getAllyCount() > 0)
               {
                  if ((kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipCastleWagons1") ||
                      (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipCastleWagons3"))
                          xsArraySetInt(gCardPriorities, i, 10);  // Re-evaluated as prerequisite cards, pri 10 (ignored later)
               }
               else
               {
                  if ((kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipCastleWagonsTeam") ||
                      (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipCastleWagonsTeam2") ||
                      (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipCastleWagons3"))
                          xsArraySetInt(gCardPriorities, i, 0);  // Cards to be avoided, pri 0
               }
            }

            // Set priority to 0 for cards to be specifically avoided for Russians, as a bug
            // in aiHCDeckAddCardToDeck() keeps 'Advanced Balloon' from being added
            if (kbGetCiv() == cCivRussians)
            {
               if ((kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCXPAdvancedBalloon") ||
                   (kbGetTechName(aiHCCardsGetCardTechID(i)) == "HCShipBalloons"))
                       xsArraySetInt(gCardPriorities, i, 0);  // Cards to be avoided, pri 0
            }

            // Set priority to 0 for card to be specifically avoided for Indians, as a bug
            // in aiHCDeckAddCardToDeck() keeps 'Foreign Logging' from being added
            if (kbGetCiv() == cCivIndians)
            {
               if (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCForeignLogging") 
                      xsArraySetInt(gCardPriorities, i, 0);  // Card to be avoided, pri 0
            }

            // Set priority to 0 for card to be specifically avoided for Japanese, as a bug
            // in aiHCDeckAddCardToDeck() keeps '2 Team Castle Wagons' from being added
            if (kbGetCiv() == cCivJapanese)
            {
               if (kbGetTechName(aiHCCardsGetCardTechID(i)) == "YPHCShipCastleWagonsTeam2") 
                      xsArraySetInt(gCardPriorities, i, 0);  // Card to be avoided, pri 0
            }

            // Set priority to 0 for archaic soldier cards in ages 3 and 4
            if ((aiHCCardsGetCardAgePrereq(i) == cAge3) || (aiHCCardsGetCardAgePrereq(i) == cAge4))
            {
               if ((aiHCCardsGetCardUnitType(i) == cUnitTypePikeman) ||
                   (aiHCCardsGetCardUnitType(i) == cUnitTypeCrossbowman) ||
                   (aiHCCardsGetCardUnitType(i) == cUnitTypeLongbowman) ||
                   (aiHCCardsGetCardUnitType(i) == cUnitTypeStrelet) ||
                   (aiHCCardsGetCardUnitType(i) == cUnitTypeypYumi) ||
                   (aiHCCardsGetCardUnitType(i) == cUnitTypeypQiangPikeman) ||
                   (aiHCCardsGetCardUnitType(i) == cUnitTypeypChuKoNu))
                       xsArraySetInt(gCardPriorities, i, 0);  // Units to be to be avoided, pri 0
            }

            if ( (xsArrayGetInt(gCardPriorities, i) == 0) && (xsArrayGetString(gCardStates, i)=="P") )
            {  // We own this card, but it's not in the categories above, and won't be flagged when we do our purchases.
               // So, give it a P1 just to distinguish it from others.
               xsArraySetInt(gCardPriorities, i, 1);
            }
            if ((kbGetCiv() == cCivSPCJapanese) || (kbGetCiv() == cCivSPCJapaneseEnemy))
            {  
               if ( (tech == cTechYPHCShipDaimyoAizu) || (tech == cTechYPHCShipDaimyoSatsuma) || (tech == cTechYPHCShipDaimyoTokushima) || (tech == cTechYPHCShipShogunate)
                    || (tech == cTechYPSPCHCShipDaimyoKiyomasa) || (tech == cTechYPSPCHCShipDaimyoMasamune) || (tech == cTechYPSPCHCShipDaimyoTadaoki) ) {
                  xsArraySetInt(gCardPriorities, i, 0);  // BHG: don't want spcjapanese sending in unapproved daimyos
                }
            }
            if (kbGetCiv() == cCivSPCIndians)
            {  
               if ( (tech == cTechYPHCShipSepoy1) || (tech == cTechYPHCShipSepoy2) || (tech == cTechYPHCShipSepoy3) || (tech == cTechYPHCShipSepoy4) ) {
                  xsArraySetInt(gCardPriorities, i, 0);  // BHG: don't want spcindians sending in unapproved sepoys
                }
            }
            // Priorities 2-4 will be set when the card is purchased, based on "find best" category that gets them.
            
            if (aiHCCardsIsCardBought(i) == true)
               xsArraySetString(gCardStates, i, "P"); // Purchased
            else
            {
               if (aiHCCardsCanIBuyThisCard(-1, i) == true)
                  xsArraySetString(gCardStates, i, "A"); // Available
               else
                  xsArraySetString(gCardStates, i, "N"); // Not available
            }
            if (kbGetCiv() == cCivSPCIndians)
            {  
               if ( (tech == cTechYPHCShipSepoy1) || (tech == cTechYPHCShipSepoy2) || (tech == cTechYPHCShipSepoy3) || (tech == cTechYPHCShipSepoy4) ) {
                  xsArraySetString(gCardStates, i, "N");  // BHG: don't want spcindians sending in unapproved sepoys
                }
            }

            if (aiHCCardsGetCardCount(i) < 0)
               tempString = " Infinite";
            else
               tempString = "   "+aiHCCardsGetCardCount(i)+" use";
            tempString = tempString + " Pri "+xsArrayGetInt(gCardPriorities, i)+" ";
            tempString = tempString + " "+xsArrayGetString(gCardStates, i);
            tempString = tempString + "  L"+aiHCCardsGetCardLevel(i);
            tempString = tempString + "  A"+aiHCCardsGetCardAgePrereq(i);
            tempString = tempString + " ("+tech+") "+kbGetTechName(tech);
            if (unit >= 0)
            {
               tempString = tempString + " "+aiHCCardsGetCardUnitCount(i)+" "+kbGetProtoUnitName(unit);
            }
            
            xsArraySetString(gCardNames, i, tempString);
            aiEcho(i+" "+tempString);
         }
         pass = 1;   // Buy cards next time
         break;
      }
      case 1:  // Buy cards
      {
         for (attempt = 0; < 5)
         {
            aiEcho("Purchase attempt "+attempt);
            if (remainingSP <= 0) // Have no points to spend...
               break;
            
            bool result = false;

            int boughtCardIndex = -1;
            int highestPriority = 0;   // Priority higher than this will be bought.
            // First, scan for the high-priority cards.
            for (index=0; <totalCardCount)  
            {  // Scan the list, looking for the highest-priority card still available
               if ( (aiHCCardsGetCardLevel(index) > myLevel) || (aiHCCardsCanIBuyThisCard(-1, index) == false) || (xsArrayGetString(gCardStates, index) == "P"))
                  continue;   // Skip it.  Note...I use the "P" (purchased) flag to indicate ones that are purchased, AND ones that have failed in a buy attempt.                  
               // It is legal and available
               if (xsArrayGetInt(gCardPriorities, index) > highestPriority)
               {
                  boughtCardIndex = index;
                  highestPriority = xsArrayGetInt(gCardPriorities, index);
               }
            }
            if (boughtCardIndex >= 0)
            {
               result = aiHCCardsBuyCard(boughtCardIndex);
               aiEcho("Buying priority "+highestPriority+" card "+xsArrayGetString(gCardNames, boughtCardIndex));
            }
          
            int cardIndex = -1;
            if (boughtCardIndex < 0)
            {  // No special cards remain, look for best one in each category.          
               cardIndex = aiHCCardsFindBestCard(cHCCardTypeEcon, myLevel);
               if ( cardIndex >= 0 )
               {  // Any econ card
                  result = aiHCCardsBuyCard(cardIndex);
                  aiEcho("Buying econ card "+xsArrayGetString(gCardNames, cardIndex));
                  boughtCardIndex = index;
                  xsArraySetInt(gCardPriorities, cardIndex, 3);   // Pri 3, econ card
                  break;
               }           
               cardIndex = aiHCCardsFindBestCard(cHCCardTypeMilitary, myLevel);
               if ( cardIndex >= 0 )
               {  // Any military card
                  result = aiHCCardsBuyCard(cardIndex);
                  aiEcho("Buying military card "+xsArrayGetString(gCardNames, cardIndex));
                  boughtCardIndex = cardIndex;
                  xsArraySetInt(gCardPriorities, cardIndex, 2);   // Pri 2, military card
                  break;                   
               }
               cardIndex = aiHCCardsFindBestCard(cHCCardTypeWagon, myLevel);
               if ( cardIndex >= 0 )
               {  // Any wagon card
                  result = aiHCCardsBuyCard(cardIndex);
                  aiEcho("Buying wagon card "+xsArrayGetString(gCardNames, cardIndex));
                  boughtCardIndex = cardIndex;
                  xsArraySetInt(gCardPriorities, cardIndex, 7);   // Pri 7, wagon card...shouldn't get any hits here.
                  break;                   
               }
               cardIndex = aiHCCardsFindBestCard(cHCCardTypeTeam, myLevel);
               if ( cardIndex >= 0 )
               {  // Any team card
                  result = aiHCCardsBuyCard(cardIndex);
                  aiEcho("Buying team card "+xsArrayGetString(gCardNames, cardIndex));
                  boughtCardIndex = cardIndex;
                  xsArraySetInt(gCardPriorities, cardIndex, 1);   // Pri 1, team card
                  break;                   
               }    
            }

            // If we're here, we've either selected a card, or exhausted the list.
            if (boughtCardIndex < 0)
            {  // Nothing to buy?!
               aiEcho("  ERROR!  We have points to spend, but no cards to buy.");
               pass = 2;   // go on to deck picking
               return;
            }
            // We've selected a card.  Did the purchase work?
            if (result == false)
            {  // It failed, blacklist this card by marking it owned in the array.
               aiEcho("  ERROR!  Failed to buy card "+xsArrayGetString(gCardNames, boughtCardIndex));
            }
            xsArraySetString(gCardStates, boughtCardIndex, "P");  // Even if purchase failed, mark it purchased so we don't get stuck on it.
            remainingSP = remainingSP - 1;
            SPSpent = SPSpent + 1;
            if (SPSpent >= 10)
               myLevel = 10;
            if (SPSpent >= 25)
               myLevel = 25;
         }  // For attempt 0..4
         
         if (remainingSP <= 0)
            pass = 2;
      }  // case 1
      case 2:  // Make deck
      {  
         aiEcho("Making deck");
         if (gSPC == true)
	 {
	   if (gDefaultDeck < 0)
	      gDefaultDeck = aiHCDeckCreate("The AI Deck");
	 }
	 else
	 {
	   //-- In non spc games, the game will make an empty deck for AI's at index 0.
           gDefaultDeck = 0;
	 }
         
         aiEcho("Building Deck");
         int cardsRemaining = 25;
         int toPick = 2;
         // First, "best" cards (if available).
         for (card=0; < maxCards)
         { 
            if ( (aiGetGameMode() == cGameModeDeathmatch) && (aiGetWorldDifficulty() > cDifficultyModerate) )
            {
             if (((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCherokeeAlliesRepeat") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBarons") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
	        ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
		(((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRumDistilleryTeam") && (getAllyCount() > 0)) ) ||
		(((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMedicine") && (gNavyMap == false)) ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHouseEstates") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMusketeerGrenadierCombatBritish") ) ||
		(((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMusketeerGrenadierHitpointsBritishTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMusketeerGrenadierDamageBritish") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryDamageBritish") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryHitpointsBritish") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatBritish") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCImprovedLongbows") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||
		((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
                (((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
                
                (((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRangedInfantryDamageFrenchTeam") && (getAllyCount() > 0)) ) ||
		//(((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRangedInfantryHitpointsFrench") && (gNavyMap == false)) ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandCavalryDamageFrenchTeam") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandCavalryHitpointsFrench") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatFrench") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPThoroughbreds") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeCombat") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPGribeauvalSystem") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPColbertism") ) ||
		(((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPDistributivism") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCWildernessWarfare") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalDecreeFrench") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBarons") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
		((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPDistributivism") ) ||
                (((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeCombatTeam") && (getAllyCount() > 0) && (gNavyMap == false)) ) ||
                (((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCEarlySkirmishersTeam") && (getAllyCount() > 0) && (gNavyMap == false)) ) ||

                (((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRangedInfantryHitpointsGerman") && (getAllyCount() == 0)) ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandInfantryDamageGerman") ) ||
	        ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandInfantryHitpointsGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandInfantryCombatGerman") ) ||
		(((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryDamageGermanTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryHitpointsGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUhlanCombatGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchoolGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchoolGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCGermantownFarmers") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalDecreeGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBaronsGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactoryGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCGuildArtisans") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMintGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigerationGerman") ) ||
		(((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilosTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMillsGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRollerGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriorsGerman") ) ||
		((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCapitalism") ) ||
                (((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmiralityGerman") && (gNavyMap == true)) ) ||
                
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPUnction") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCArchaicTrainingTeam") ) ||
		(((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandInfantryDamageSpanishTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandInfantryHitpointsSpanish") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandInfantryCombatSpanish") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandCavalryCombatSpanish") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandCavalryDamageSpanish") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandCavalryHitpointsSpanish") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCaballeros") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPIndustrialRevolution") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMayanAlliesRepeat") ) ||
		(((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
		((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRumDistillery") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||

                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBarons") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRangedInfantryCombatPortuguese") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRangedInfantryDamagePortuguese") ) ||
	        ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRangedInfantryHitpointsPortugueseTeam") ) ||
	        ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCDragoonCombatPortuguese") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMedicine") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCEngineeringSchool") ) ||
		(((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCDonatarios") && (gNavyMap == false)) ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPGenitours") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRumDistillery") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTupiAlliesRepeat") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdvancedArsenal") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCImprovedWallsTeam") ) ||
		((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
                (((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
                (((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNavigationSchool") && (gNavyMap == true)) ) ||
               
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExplorerDutch") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCInfantryDamageDutch") ) ||
		(((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCInfantryHitpointsDutchTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCInfantryCombatDutch") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatDutch") ) ||
		(((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMortarsDamageDutchTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPDanceHall") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCBetterBanks") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalDecreeDutch") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCBanks2") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCBanks1") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBarons") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
		((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeChampionsDutchTeam") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||
		(((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCPrivateersRepeat") && (gNavyMap == true)) ) ||
                (((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
               
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPNootkaAlliesRepeat") ) ||
		(((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCColdWaterPortTeam") && (gNavyMap == true)) ) ||
		(((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatRussian") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRansack") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCStreletsCombatRussian") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSpawnStrelet") ) ||
		(((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCDuelingSchoolTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPIndustrialRevolution") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRumDistillery") ) ||
		((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
		(((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryLOSTeam") && (getAllyCount() > 0)) ) ||
		//((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPShipCavArchersRepeat") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||
                //(((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPNationalRedoubt") && (gNavyMap == false)) ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSevastopol") ) ||

                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPIrregulars") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatOttoman") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCJanissaryCost") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCJanissaryCombatOttoman") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCLightArtilleryHitpointsOttoman") ) ||
		(((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCArtilleryHitpointsOttomanTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCArtilleryDamageOttoman") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCEngineeringSchool") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBarons") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||
		(((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPShipGalleysRepeat") && (gNavyMap == true)) ) ||
		(((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCapitalism") ) ||
		((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdvancedArsenal") ) ||

                ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPAdvancedBalloon") && (kbGetCiv() != cCivRussians)) ||

                ((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPInfantryDamageIroquois") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPInfantryHitpointsIroquois") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPInfantryCombatIroquois") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPInfantryLOSTeam") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCavalryHitpointsIroquois") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCavalryDamageIroquois") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSiegeHitpoints") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSiegeDamage") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSiegeCombat") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCEngineeringSchool") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPConservativeTactics") ) ||
		(((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeChampionsDutchTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHeavyFortifications") ) ||
		(((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMedicineTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilosTeam") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRumDistillery") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCherokeeAlliesRepeat") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPHuronAlliesRepeat") ) ||
		//((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPShipMixedCratesRepeat") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPShipMixedCrates1") ) ||

                ((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCavalryDamageSioux") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCavalryHitpointsSioux") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCavalryCombatSioux") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMustangs") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPWindRunner") ) ||
		(((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCommandSkill") ) ||
		(((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeChampionsDutchTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPShipWarHutTravois1") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExtensiveFortifications") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHeavyFortifications") ) ||
                ((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPFriendlyTerritory") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPAdoption") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSawmills") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPShipAxeRidersRepeat") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPBanditGangRepeat") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMedicine") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPWoodcrafting") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPBlackArrow") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPWarChiefSioux1") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEarthBounty") ) ||
                ((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSiouxSanteeSupport") ) ||
                ((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSiouxYanktonSupport") ) ||

                ((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPWarHutTraining") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCoyoteCombat") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPScorchedEarth") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPKnightHitpoints") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPKnightDamage") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPKnightCombat") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPRuthlessness") ) ||
		(((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPExoticHardwoodsTeam") && (getAllyCount() > 0)) ) ||
		(((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") && (getAllyCount() == 0)) ) ||
		(((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMedicineTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPChinampa2") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPChinampa1") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCGrainMarket") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMayanAlliesRepeat") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPZapotecAlliesRepeat") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPGreatTempleHuitzilopochtli") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTempleCoatlicue") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTempleCenteotl") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTempleXipeTotec") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTempleXochipilli") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTempleTlaloc") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPGreatTempleQuetzalcoatl") ) ||
		(((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
                (((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeChampionsDutchTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||

                ((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCStandardArmyHitpoints") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAccupuncture") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCBannerSchool") ) ||
		(((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCEngineeringSchoolTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCConfusciousGift") ) ||
		(((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCCheapWarAcademyTeam") && (getAllyCount() > 0)) ) ||
		(((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCTerritorialArmyCombat") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCHanAntiCavalryBonus") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCMongolianScourge") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCWesternReforms") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCForbiddenArmyArmor") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCManchuCombat") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCArtilleryHitpointsChinese") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCArtilleryDamageChinese") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCArtilleryCombatChinese") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNativeLearning") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
                ((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNativeDamage") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRainbowTrickle") ) ||

                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCYumiDamage") ) ||
	        ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAshigaruDamage") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCSamuraiDamage") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNaginataHitpoints") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCYabusameDamage") ) ||
		//((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCYabusameAntiArtilleryDamage") ) ||
		//((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNaginataAntiInfantryDamage") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipDaimyoAizu") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCYumiRange") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAshigaruAntiCavalryDamage") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCIncreasedTribute") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShrineLearning") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		(((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCChonindoTeam") && (getAllyCount() > 0)) ) ||
                //((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
		(((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		(((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCCheapUnitUpgradesTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipDaimyoSatsuma") ) ||
		(((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCPioneersTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNativeLearning") ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNativeIncorporation") ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCBakufu") ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNobleCombat") ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipRicePaddyWagon1") ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipRicePaddyWagon2") ) ||

                ((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCGurkhaAid") ) ||
                (((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAdmiralityIndians") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCInfantrySpeedHitpointsTeam") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCMeleeDamageIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCCamelFrightening") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCGrazing") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCCamelDamageIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipUrumi2") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCFencingSchoolIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRidingSchoolIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCEastIndiaCompany") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCExoticHardwoodsIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCSawmillsIndians") ) ||
		(((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMedicineTeam") && (getAllyCount() > 0)) ) ||
               // (((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCImprovedBuildingsTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCGoraksha") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRoyalMintIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAgrarianism") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRumDistilleryIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAdvancedConsulateIndians") ) ||
		(((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRainbowTrickleTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipWoodCratesInf4Indians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAdvancedRicePaddyIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCSustainableAgricultureIndians") ) ||
                ((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCTheRaj") ) ||
                ((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNativeLearningIndians") ) ||
                ((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNativeIncorporationIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCFoodSilosIndians") ))
            {
               aiHCDeckAddCardToDeck(gDefaultDeck, card);
               cardsRemaining = cardsRemaining - 1;
               xsArraySetString(gCardStates, card, "D");
               aiEcho("  Adding card "+xsArrayGetString(gCardNames, card));
            }            
         }
         else if ( (btRushBoom < 0.0) && (aiGetWorldDifficulty() > cDifficultyModerate) )
         {                
            if (((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFastHousesTeam") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
               (((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRumDistilleryTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHouseEstates") ) ||
                //((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBarons") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPFlorenceNightingale") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCImprovedLongbows") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatBritish") ) ||
               (((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMusketeerGrenadierHitpointsBritishTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMusketeerGrenadierCombatBritish") ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMedicine") ) ||
               (((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
                ((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPDistributivism") ) ||
               (((kbGetCiv() == cCivBritish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") && (gNavyMap == true)) ) ||
       
              //((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriors") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPDistributivism") ) ||
               (((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSawmillsTeam") && (getAllyCount() > 0)) ) ||
              // (((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") && (getAllyCount() == 0)) ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalDecreeFrench") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBarons") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandCavalryHitpointsFrench") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatFrench") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandCavalryDamageFrenchTeam") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCWildernessWarfare") ) ||
               (((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3") && (gNavyMap == false)) ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates4") ) ||
                (((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
               (((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRangedInfantryDamageFrenchTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPThoroughbreds") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRumDistillery") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
                ((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
                (((kbGetCiv() == cCivFrench) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCEarlySkirmishersTeam") && (getAllyCount() > 0)) ) ||

                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipFoodCrates1") ) ||
               (((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCArchaicTrainingTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCapitalism") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
                (((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3") && (gNavyMap == false)) ) ||
               (((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
               (((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandInfantryDamageSpanishTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
                (((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates4") && (gNavyMap == false)) ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandCavalryCombatSpanish") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCaballeros") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandInfantryCombatSpanish") ) ||
                (((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCArmada") && (gNavyMap == true)) ) ||
                (((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSpanishGalleons") && (gNavyMap == true)) ) ||
                (((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSpanishGold") && (gNavyMap == true)) ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCapitalism") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPIndustrialRevolution") ) ||
                ((kbGetCiv() == cCivSpanish) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPUnction") ) ||

               // ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipFoodCrates1") ) ||
               (((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMedicine") && (gNavyMap == false)) ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdvancedArsenal") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBarons") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRangedInfantryCombatPortuguese") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCDragoonCombatPortuguese") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRangedInfantryDamagePortuguese") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCDonatarios") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPRangefinding") ) ||
                (((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3") && (gNavyMap == false)) ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates4") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCEngineeringSchool") ) ||
               (((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") && (gNavyMap == true)) ) ||
               (((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
               (((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCArtilleryHitpointsPortugueseTeam") && (getAllyCount() > 0)) ) ||
               (((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNavigationSchool") && (gNavyMap == true)) ) ||
               (((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFishMarketTeam") && (gNavyMap == true)) ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPGenitours") ) ||
                ((kbGetCiv() == cCivPortuguese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||

              //  ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCBanks1") ) ||
               (((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMortarsDamageDutchTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatDutch") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCInfantryDamageDutch") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCInfantryCombatDutch") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCBanks2") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPDanceHall") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalDecreeDutch") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCBetterBanks") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBarons") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCDutchEastIndiaCompany") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
               (((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCInfantryHitpointsDutchTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdvancedArsenal") ) ||
               (((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
               (((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPAdmiralTromp") && (gNavyMap == true)) ) ||
                ((kbGetCiv() == cCivDutch) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPColbertism") ) ||
                
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPDistributivism") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates3") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUniqueCombatRussian") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRansack") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatRussian") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCStreletsCombatRussian") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
               (((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalDecreeRussian") && (getAllyCount() == 0)) ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates4") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnicorne") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCDuelingSchoolTeam") ) ||
               (((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates4") && (gNavyMap == false)) ) || 
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
               (((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
               (((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCColdWaterPortTeam") && (gNavyMap == true)) ) ||
               (((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") && (gNavyMap == true)) ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSpawnStrelet") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPIndustrialRevolution") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPDistributivism") ) ||
                //(((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPNationalRedoubt") && (gNavyMap == false)) ) ||
                ((kbGetCiv() == cCivRussians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSevastopol") ) ||

              //  ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
              //  ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipFoodCrates1") ) ||
              //  ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates3") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
               (((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPOffshoreSupport") && (gNavyMap == true)) ) ||
               (((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipFoodCrates3") && (gNavyMap == true)) ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPIrregulars") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||             
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCapitalism") ) ||
               (((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") && (gNavyMap == true)) ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactory") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBarons") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatOttoman") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates4") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates4") ) ||
               (((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTeamCoinCrates2") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCJanissaryCost") ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCJanissaryCombatOttoman") ) ||
               (((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdvancedArsenal") ) ||
               (((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3") && (gNavyMap == false)) ) ||
               (((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates1") && (getAllyCount() == 0)) ) ||
                ((kbGetCiv() == cCivOttomans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCEngineeringSchool") ) ||
               
              //  ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipSettlerWagons1") ) ||
                (((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilosTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeWarriorsGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEconomicTheory") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCapitalism") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates4German") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRobberBaronsGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUnlockFactoryGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalDecreeGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCGermantownFarmers") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchoolGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchoolGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCGuildArtisans") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMintGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigerationGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRollerGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMillsGerman") ) ||
               (((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryDamageGermanTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCavalryCombatGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHandInfantryDamageGerman") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates3German") ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3German") ) ||
               (((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmiralityGerman") && (gNavyMap == true)) ) ||
                ((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCUhlanCombatGerman") ) ||
               (((kbGetCiv() == cCivGermans) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates4German") && (getAllyCount() == 0))) ||

                ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPAdvancedBalloon") && (kbGetCiv() != cCivRussians)) ||

                ((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPInfantryDamageIroquois") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPInfantryHitpointsIroquois") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPInfantryCombatIroquois") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPInfantryLOSTeam") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCavalryHitpointsIroquois") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCavalryDamageIroquois") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSiegeHitpoints") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSiegeDamage") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPSiegeCombat") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCEngineeringSchool") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPConservativeTactics") ) ||
		(((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeChampionsDutchTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHeavyFortifications") ) ||
		(((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMedicineTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilosTeam") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRumDistillery") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCherokeeAlliesRepeat") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPHuronAlliesRepeat") ) ||
		//((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPShipMixedCratesRepeat") ) ||
		((kbGetCiv() == cCivXPIroquois) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPShipMixedCrates1") ) ||

                ((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCavalryDamageSioux") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCavalryHitpointsSioux") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCavalryCombatSioux") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMustangs") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPWindRunner") ) ||
		(((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCommandSkill") ) ||
		(((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeChampionsDutchTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPShipWarHutTravois1") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExtensiveFortifications") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCHeavyFortifications") ) ||
                ((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPFriendlyTerritory") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPAdoption") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSawmills") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPShipAxeRidersRepeat") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPBanditGangRepeat") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCMedicine") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPWoodcrafting") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPBlackArrow") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPWarChiefSioux1") ) ||
		((kbGetCiv() == cCivXPSioux) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPEarthBounty") ) ||
                
                ((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPWarHutTraining") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPCoyoteCombat") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPScorchedEarth") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPKnightHitpoints") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPKnightDamage") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPKnightCombat") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPRuthlessness") ) ||
                (((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCNativeChampionsDutchTeam") && (getAllyCount() > 0)) ) ||
		(((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPExoticHardwoodsTeam") && (getAllyCount() > 0)) ) ||
		(((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") && (getAllyCount() == 0)) ) ||
		(((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMedicineTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPChinampa2") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPChinampa1") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCGrainMarket") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMayanAlliesRepeat") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPZapotecAlliesRepeat") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPGreatTempleHuitzilopochtli") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTempleCoatlicue") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTempleCenteotl") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTempleXipeTotec") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTempleXochipilli") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPTempleXolotl") ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPGreatTempleQuetzalcoatl") ) ||
		(((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivXPAztec) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||

                ((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCStandardArmyHitpoints") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAccupuncture") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCBannerSchool") ) ||
		(((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCEngineeringSchoolTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCConfusciousGift") ) ||
		(((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCCheapWarAcademyTeam") && (getAllyCount() > 0)) ) ||
		(((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCTerritorialArmyCombat") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCHanAntiCavalryBonus") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCMongolianScourge") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCWesternReforms") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCForbiddenArmyArmor") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCManchuCombat") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCArtilleryHitpointsChinese") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCArtilleryDamageChinese") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCArtilleryCombatChinese") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates1") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPLandGrab") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCTextileMills") ) ||
		((kbGetCiv() == cCivChinese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRainbowTrickle") ) ||

                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCYumiDamage") ) ||
	        ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAshigaruDamage") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCSamuraiDamage") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNaginataHitpoints") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCYabusameDamage") ) ||
		//((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCYabusameAntiArtilleryDamage") ) ||
		//((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNaginataAntiInfantryDamage") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCBakufu") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCYumiRange") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAshigaruAntiCavalryDamage") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCIncreasedTribute") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShrineLearning") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalMint") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCSustainableAgriculture") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRefrigeration") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCExoticHardwoods") ) ||
		(((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCChonindoTeam") && (getAllyCount() > 0)) ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNobleCombat") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFoodSilos") ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCCigarRoller") ) ||
		(((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCAdmirality") && (gNavyMap == true)) ) ||
		(((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCCheapUnitUpgradesTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipDaimyoSatsuma") ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipDaimyoAizu") ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipShogunate") ) ||
		(((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCPioneersTeam") && (getAllyCount() > 0)) ) ||
		(((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNativeLearning") && (kbGetHCLevel(cMyID) < 60)) ) ||
                (((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCNativeIncorporation") && (kbGetHCLevel(cMyID) < 60)) ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipRicePaddyWagon1") ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipRicePaddyWagon2") ) ||
                ((kbGetCiv() == cCivJapanese) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipRicePaddyWagon3") ) ||

                (((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAdmiralityIndians") && (gNavyMap == true)) ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCInfantrySpeedHitpointsTeam") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCMeleeDamageIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCCamelFrightening") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCGrazing") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCTheRaj") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCGurkhaAid") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCCamelDamageIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipUrumi2") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCFencingSchoolIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRidingSchoolIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCEastIndiaCompany") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCExoticHardwoodsIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCSawmillsIndians") ) ||
		(((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPMedicineTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCGoraksha") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRoyalMintIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAgrarianism") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRumDistilleryIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAdvancedConsulateIndians") ) ||
		(((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRainbowTrickleTeam") && (getAllyCount() > 0)) ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipWoodCratesInf4Indians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAdvancedRicePaddyIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCSustainableAgricultureIndians") ) ||
		((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCFoodSilosIndians") ))
               {
                   aiHCDeckAddCardToDeck(gDefaultDeck, card);
                   cardsRemaining = cardsRemaining - 1;
                   xsArraySetString(gCardStates, card, "D");
                   aiEcho("  Adding card "+xsArrayGetString(gCardNames, card));
               }   
            }   
            else if ( (btRushBoom > 0.0) && (aiGetWorldDifficulty() > cDifficultyModerate) )    
            {   
               if ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalDecreeDutch") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalDecreeFrench") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRoyalDecreeGerman") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPNewWaysIroquois") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCXPNewWaysSioux") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAccupuncture") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchool") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchool") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCRidingSchoolGerman") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCFencingSchoolGerman") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCBannerSchool") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCRidingSchoolIndians") ||
                (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCFencingSchoolIndians") ||
                ((kbGetCiv() == cCivIndians) && (kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCAgrarianism") ))
                {
                   aiHCDeckAddCardToDeck(gDefaultDeck, card);
                   cardsRemaining = cardsRemaining - 1;
                   xsArraySetString(gCardStates, card, "D");
                   aiEcho("  Adding card "+xsArrayGetString(gCardNames, card));
                }   
             }                                  
         }  // All done, no cards remaining.
         
         // Next, 3 econ-biased age 1 cards.
         toPick = 3;
         for (i=0; < toPick) 
         {  // 3 age 1 cards
            int bestCard = -1;
            int bestCardPri = -1;
            for (card=0; < maxCards)
            {
               if (xsArrayGetString(gCardStates, card) != "P")
                  continue;   // Only consider purchased cards not already in deck.
               if (xsArrayGetInt(gCardPriorities, card) == 10)
                  continue;   // Ignore so-called "prerequisite cards"
               if (aiHCCardsGetCardAgePrereq(card) != cAge1)
                  continue;
               if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;
               }
            }
            if (bestCard >= 0)
            {
               aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
               cardsRemaining = cardsRemaining - 1;
               xsArraySetString(gCardStates, bestCard, "D");
               aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
            }
         }  // 19-22 remaining.
         

         // Next, econ-biased age 2 cards. 2 for rusher, 3 for others.
         toPick = 3;
         if (btRushBoom > 0)
            toPick = 2;
         for (i=0; < toPick) 
         {  
            bestCard = -1;
            bestCardPri = -1;
            for (card=0; < maxCards)
            {
               if (xsArrayGetString(gCardStates, card) != "P")
                  continue;   // Only consider purchased cards not already in deck.
               if (xsArrayGetInt(gCardPriorities, card) == 10)
                  continue;   // Ignore so-called "prerequisite cards"
               if (aiHCCardsGetCardAgePrereq(card) != cAge2)
                  continue;
               if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;
               }
               else if (((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipFoodCrates3") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipFoodCrates2")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates3") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipWoodCrates2")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipCoinCrates2")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipFoodCrates3German") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipFoodCrates2German")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates3German") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipWoodCrates2German")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3German") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipCoinCrates2German")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipFoodCrates3Indians") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "YPHCShipFoodCrates2Indians")))
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;  // make sure 700 resource cards win over 600 resource cards
               }
               else if (((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates2") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipFoodCrates2")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates3") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipFoodCrates2")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates3") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipFoodCrates3")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates2") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipWoodCrates2")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipWoodCrates2")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipWoodCrates3")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates2German") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipFoodCrates2German")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates3German") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipFoodCrates2German")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipWoodCrates3German") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipFoodCrates3German")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates2German") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipWoodCrates2German")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3German") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipWoodCrates2German")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "HCShipCoinCrates3German") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "HCShipWoodCrates3German")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipWoodCrates2Indians") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "YPHCShipFoodCrates2Indians")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipWoodCrates2Indians") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "YPHCShipFoodCrates3Indians")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "YPHCShipCoinCrates2Indians") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "YPHCShipWoodCrates2Indians")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "ypHCShipWoodCrates2") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "ypHCShipFoodCrates2")) ||
                        ((kbGetTechName(aiHCCardsGetCardTechID(card)) == "ypHCShipCoinCrates2") && (kbGetTechName(aiHCCardsGetCardTechID(bestCard)) == "ypHCShipWoodCrates2")))
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;  // make sure wood wins over food and coin wins over wood in Age 2 (for India, even 600 wood/coin wins over 700 food)
               }
            }
            if (bestCard >= 0)
            {
               aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
               cardsRemaining = cardsRemaining - 1;
               xsArraySetString(gCardStates, bestCard, "D");
               aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
            }
         }  // 16-20 remaining


         // Next, age 2 military cards.  2 for a boomer, 5 for a rusher.
         toPick = 2 + ((btRushBoom+1.0) * 1.51); // Boomer 2, rusher 5
         for (i=0; < toPick) 
         {  
            bestCard = -1;
            bestCardPri = -1;
            for (card=0; < maxCards)
            {
               if (xsArrayGetString(gCardStates, card) != "P")
                  continue;   // Only consider purchased cards not already in deck.
               if (aiHCCardsGetCardAgePrereq(card) != cAge2)
                  continue;
               if (xsArrayGetInt(gCardPriorities, card) != 5)
                  continue;   // Ignore everything except military card
               if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercenary) == true)
                  continue;   // Ignore any mercenary cards
               if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeypMercArsonist) == true)
                  continue;   // Ignore any arsonist cards (wrongly not classified as mercenary)
               if (((civIsNative() == true) || (civIsAsian() == true)) && (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercType1) == true))
                  continue;   // For natives and Asians, ignore any native allies cards (to be added later)
               if ((civIsNative() == true) && ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeRodelero) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeCuirassier) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeHalberdier) == true)))
                  continue;   // For natives, ignore any renegade cards (to be added later)
               if ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawPistol) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawRider) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawRifleman) == true))
                  continue;   // Ignore any outlaw cards (to be added later)
               if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;
               }
               else if ((xsArrayGetInt(gCardPriorities, card) == bestCardPri) && 
                        ( (kbGetProtoUnitAICost(aiHCCardsGetCardUnitType(card))*aiHCCardsGetCardUnitCount(card)) > (kbGetProtoUnitAICost(aiHCCardsGetCardUnitType(bestCard))*aiHCCardsGetCardUnitCount(bestCard)) )) 
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;
               }
            }
            if (bestCard >= 0)
            {
               aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
               cardsRemaining = cardsRemaining - 1;
               xsArraySetString(gCardStates, bestCard, "D");
               aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
            }
         } // 12-17 remaining


         // Next, 5 age 3 cards (more may be added later), but no mercenaries or allies.
         toPick = 5;
         for (i=0; < toPick) 
         {  
            bestCard = -1;
            bestCardPri = -1;
            for (card=0; < maxCards)
            {
               if (xsArrayGetString(gCardStates, card) != "P")
                  continue;   // Only consider purchased cards not already in deck.
               if (xsArrayGetInt(gCardPriorities, card) == 10)
                  continue;   // Ignore so-called "prerequisite cards"
               if (xsArrayGetInt(gCardPriorities, card) == 6)
                  continue;   // Ignore resource cards
               if (aiHCCardsGetCardAgePrereq(card) != cAge3)
                  continue;
               if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercenary) == true)
                  continue;   // Ignore any mercenary cards
               if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeypMercArsonist) == true)
                  continue;   // Ignore any arsonist cards (wrongly not classified as mercenary)
               if (((civIsNative() == true) || (civIsAsian() == true)) && (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercType1) == true))
                  continue;   // For natives and Asians, ignore any native allies cards (to be added later)
               if ((civIsNative() == true) && ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeRodelero) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeCuirassier) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeHalberdier) == true)))
                  continue;   // For natives, ignore any renegade cards (to be added later)
               if ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawPistol) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawRider) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawRifleman) == true))
                  continue;   // Ignore any outlaw cards (to be added later)
               if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;
               }
               else if ((xsArrayGetInt(gCardPriorities, card) == bestCardPri) && 
                        ( (kbGetProtoUnitAICost(aiHCCardsGetCardUnitType(card))*aiHCCardsGetCardUnitCount(card)) > (kbGetProtoUnitAICost(aiHCCardsGetCardUnitType(bestCard))*aiHCCardsGetCardUnitCount(bestCard)) )) 
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;
               }
            }
            if (bestCard >= 0)
            {
               aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
               cardsRemaining = cardsRemaining - 1;
               xsArraySetString(gCardStates, bestCard, "D");
               aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
            }
         }  // 7-12 remaining.


         // Next, 3 age 4 cards (more may be added later), but no mercenaries or allies.
         toPick = 3;
         for (i=0; < toPick) 
         {
            bestCard = -1;
            bestCardPri = -1;
            for (card=0; < maxCards)
            {
               if (xsArrayGetString(gCardStates, card) != "P")
                  continue;   // Only consider purchased cards not already in deck.
               if (xsArrayGetInt(gCardPriorities, card) == 10)
                  continue;   // Ignore so-called "prerequisite cards"
               if (xsArrayGetInt(gCardPriorities, card) == 6)
                  continue;   // Ignore resource cards
               if (aiHCCardsGetCardAgePrereq(card) != cAge4)
                  continue;
               if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercenary) == true)
                  continue;   // Ignore any mercenary cards
               if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeypMercArsonist) == true)
                  continue;   // Ignore any arsonist cards (wrongly not classified as mercenary)
               if (((civIsNative() == true) || (civIsAsian() == true)) && (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercType1) == true))
                  continue;   // For natives and Asians, ignore any native allies cards (to be added later)
               if ((civIsNative() == true) && ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeRodelero) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeCuirassier) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeHalberdier) == true)))
                  continue;   // For natives, ignore any renegade cards (to be added later)
               if ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawPistol) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawRider) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawRifleman) == true))
                  continue;   // Ignore any outlaw cards (to be added later)
               if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;
               }
               else if ((xsArrayGetInt(gCardPriorities, card) == bestCardPri) && 
                        ( (kbGetProtoUnitAICost(aiHCCardsGetCardUnitType(card))*aiHCCardsGetCardUnitCount(card)) > (kbGetProtoUnitAICost(aiHCCardsGetCardUnitType(bestCard))*aiHCCardsGetCardUnitCount(bestCard)) )) 
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;
               }
            }
            if (bestCard >= 0)
            {
               aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
               cardsRemaining = cardsRemaining - 1;
               xsArraySetString(gCardStates, bestCard, "D");
               aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
            }
         } // 4-9 remaining.


         // Next, mercenaries for Europeans and Asians, renegades and native allies for natives
         if (civIsNative() == false)
         {
            // First, two age 3 mercenary cards (if available).
            toPick = 2;
            for (i=0; < toPick) 
            {  
               bestCard = -1;
               bestCardPri = -1;
               for (card=0; < maxCards)
               {
                  if (xsArrayGetString(gCardStates, card) != "P")
                     continue;   // Only consider purchased cards not already in deck.
                  if (aiHCCardsGetCardAgePrereq(card) != cAge3)
                     continue;
                  if ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercenary) == false) &&
                      (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeypMercArsonist) == false))
                     continue;   // Ignore any non-mercenary (including arsonist) cards
                  if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
                  {
                     bestCardPri = xsArrayGetInt(gCardPriorities, card);
                     bestCard = card;
                  }
                  else if ((xsArrayGetInt(gCardPriorities, card) == bestCardPri) && (aiRandInt(10) < 3))
                  {
                     bestCardPri = xsArrayGetInt(gCardPriorities, card);
                     bestCard = card;
                  }
               }
               if (bestCard >= 0)
               {
                  aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
                  cardsRemaining = cardsRemaining - 1;
                  xsArraySetString(gCardStates, bestCard, "D");
                  aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
               }
            } // 2-9 remaining.

            // Next, one age 4 mercenary card (if available).
            toPick = 1;
            for (i=0; < toPick) 
            {  
               bestCard = -1;
               bestCardPri = -1;
               for (card=0; < maxCards)
               {
                  if (xsArrayGetString(gCardStates, card) != "P")
                     continue;   // Only consider purchased cards not already in deck.
                  if (aiHCCardsGetCardAgePrereq(card) != cAge4)
                     continue;
                  if ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercenary) == false) &&
                      (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeypMercArsonist) == false))
                     continue;   // Ignore any non-mercenary (including arsonist) cards
                  if ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercJaeger) == true) && (kbGetCiv() == cCivBritish))
                     continue;   // Ignore Holy Roman Army for British - a bug in aiHCDeckAddCardToDeck() tries to add this unavailable card
                  if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
                  {
                     bestCardPri = xsArrayGetInt(gCardPriorities, card);
                     bestCard = card;
                  }
                  else if ((xsArrayGetInt(gCardPriorities, card) == bestCardPri) && (aiRandInt(10) < 2))
                  {
                     bestCardPri = xsArrayGetInt(gCardPriorities, card);
                     bestCard = card;
                  }
               }
               if (bestCard >= 0)
               {
                  aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
                  cardsRemaining = cardsRemaining - 1;
                  xsArraySetString(gCardStates, bestCard, "D");
                  aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
               }
            } // 1-9 remaining.
         }
         else
         {
            // First, two "renegade" cards (if available).
            toPick = 2;
            for (i=0; < toPick) 
            {  
               bestCard = -1;
               bestCardPri = -1;
               for (card=0; < maxCards)
               {
                  if (xsArrayGetString(gCardStates, card) != "P")
                     continue;   // Only consider purchased cards not already in deck.
                  if ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeRodelero) == false) &&
                      (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeCuirassier) == false) &&
                      (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeHalberdier) == false) &&
                      (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawPistol) == false) &&
                      (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawRider) == false) &&
                      (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawRifleman) == false))
                     continue;   // Ignore any non-renegade cards
                  if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
                  {
                     bestCardPri = xsArrayGetInt(gCardPriorities, card);
                     bestCard = card;
                  }
                  else if ((xsArrayGetInt(gCardPriorities, card) == bestCardPri) && (aiRandInt(10) < 3))
                  {
                     bestCardPri = xsArrayGetInt(gCardPriorities, card);
                     bestCard = card;
                  }
               }
               if (bestCard >= 0)
               {
                  aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
                  cardsRemaining = cardsRemaining - 1;
                  xsArraySetString(gCardStates, bestCard, "D");
                  aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
               }
            } // 2-9 remaining.

            // Next, three native allies cards (if available).
            toPick = 3;
            for (i=0; < toPick) 
            {  
               bestCard = -1;
               bestCardPri = -1;
               for (card=0; < maxCards)
               {
                  if (xsArrayGetString(gCardStates, card) != "P")
                     continue;   // Only consider purchased cards not already in deck.
                  if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercType1) == false)
                     continue;   // Ignore any non-allies cards
                  if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypexpSkullKnight) == true)
                     continue;   // Ignore all Aztec skull knight cards (also classified as 'MercType1')
                  if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypexpDogSoldier) == true)
                     continue;   // Ignore all Sioux dog soldier cards (also classified as 'MercType1')
                  if ((aiHCCardsGetCardAgePrereq(card) == cAge2) && (btRushBoom > 0.0))
                     continue;   // Don't add Age 2 allies to a rush deck, as tier 2 will become blocked
                  if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
                  {
                     bestCardPri = xsArrayGetInt(gCardPriorities, card);
                     bestCard = card;
                  }
                  else if ((xsArrayGetInt(gCardPriorities, card) == bestCardPri) && (aiRandInt(10) < 3))
                  {
                     bestCardPri = xsArrayGetInt(gCardPriorities, card);
                     bestCard = card;
                  }
               }
               if (bestCard >= 0)
               {
                  aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
                  cardsRemaining = cardsRemaining - 1;
                  xsArraySetString(gCardStates, bestCard, "D");
                  aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
               }
            } // 0-9 remaining.
         }

         // Next, two additional native allies cards for Asians (if available).
         if (civIsAsian() == true)
         {
            toPick = 2;
            for (i=0; < toPick) 
            {  
               bestCard = -1;
               bestCardPri = -1;
               for (card=0; < maxCards)
               {
                  if (xsArrayGetString(gCardStates, card) != "P")
                     continue;   // Only consider purchased cards not already in deck.
                  if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercType1) == false)
                     continue;   // Ignore any non-allies cards
                  if ((aiHCCardsGetCardAgePrereq(card) == cAge2) && (btRushBoom > 0.0))
                     continue;   // Don't add Age 2 allies to a rush deck, as tier 2 will become blocked
                  if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
                  {
                     bestCardPri = xsArrayGetInt(gCardPriorities, card);
                     bestCard = card;
                  }
                  else if ((xsArrayGetInt(gCardPriorities, card) == bestCardPri) && (aiRandInt(10) < 3))
                  {
                     bestCardPri = xsArrayGetInt(gCardPriorities, card);
                     bestCard = card;
                  }
               }
               if (bestCard >= 0)
               {
                  aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
                  cardsRemaining = cardsRemaining - 1;
                  xsArraySetString(gCardStates, bestCard, "D");
                  aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
               }
            } // 0-9 remaining.
         }
          
         // Finally, remaining cards from any age, usually military units
         // Mercenaries and allies will be ignored here
         for (i=0; < cardsRemaining) 
         {
            bestCard = -1;
            bestCardPri = -1;
            for (card=0; < maxCards)
            {
               if (xsArrayGetString(gCardStates, card) != "P")
                  continue;   // Only consider purchased cards not already in deck.
               if (xsArrayGetInt(gCardPriorities, card) == 10)
                  continue;   // Ignore so-called "prerequisite cards"
               if ((xsArrayGetInt(gCardPriorities, card) == 6) || (xsArrayGetInt(gCardPriorities, card) == 8))
                  continue;   // Ignore resource cards
               if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercenary) == true)
                  continue;   // Ignore any mercenary cards
               if (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeypMercArsonist) == true)
                  continue;   // Ignore any arsonist cards (wrongly not classified as mercenary)
               if (((civIsNative() == true) || (civIsAsian() == true)) && (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeMercType1) == true) &&
                  (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypexpSkullKnight) == false) &&
                  (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypexpDogSoldier) == false))
                  continue;   // For natives and Asians, ignore any native allies cards (excluding skull knights and dog soldiers, both wrongly classified as MercType1)
               if ((civIsNative() == true) && ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeRodelero) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeCuirassier) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeHalberdier) == true)))
                  continue;   // For natives, ignore any renegade cards
               if ((kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawPistol) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawRider) == true) ||
                   (kbProtoUnitIsType(cMyID, aiHCCardsGetCardUnitType(card), cUnitTypeSaloonOutlawRifleman) == true))
                  continue;   // Ignore any outlaw cards
               if (xsArrayGetInt(gCardPriorities, card) > bestCardPri)
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;
               }
               else if ((xsArrayGetInt(gCardPriorities, card) == bestCardPri) && 
                        ( (kbGetProtoUnitAICost(aiHCCardsGetCardUnitType(card))*aiHCCardsGetCardUnitCount(card)) > (kbGetProtoUnitAICost(aiHCCardsGetCardUnitType(bestCard))*aiHCCardsGetCardUnitCount(bestCard)) )) 
               {
                  bestCardPri = xsArrayGetInt(gCardPriorities, card);
                  bestCard = card;
               }
            }
            if (bestCard >= 0)
            {
               aiHCDeckAddCardToDeck(gDefaultDeck, bestCard);
               //cardsRemaining = cardsRemaining - 1;
               xsArraySetString(gCardStates, bestCard, "D");
               aiEcho("  Adding card "+xsArrayGetString(gCardNames, bestCard));
            }
         }  // All done, no cards remaining. 
         

         aiHCDeckActivate(gDefaultDeck);
         
         xsDisableSelf();
         break;
      }
   }
         
}

//==============================================================================
// init...Called once we have units in the new world.
//==============================================================================
void init(void)
{
	arrEngaged=xsArrayCreateInt(300,-2,"EngagedUnit");
	arrEngagedTarget=xsArrayCreateInt(300,-7,"EngagedUnitTarget");
	arrEngagedAux=xsArrayCreateFloat(300,-9,"EngagedUnitAux");
	arrDeadExplorer=xsArrayCreateInt(20,-9,"DeadExplorer");
	arrDeadExplorerVec=xsArrayCreateVector(20,cInvalidVector,"DeadExplorerPos");
	nEngaged=0;
	
   //Set the Explore Danger Threshold.
   aiSetExploreDangerThreshold(110.0);

   
   // Set the gIAmCaptain bool and gCaptainPlayerNumber vars.
   selectCaptain();  

   
   
   //Setup the resign handler
   aiSetHandler("resignHandler", cXSResignHandler);

   //Setup the nugget handler
   aiSetHandler("nuggetHandler", cXSNuggetHandler);
   
   // Set up the age-up chat handler
   aiSetHandler("ageUpHandler", cXSPlayerAgeHandler);

   //-- set the ScoreOppHandler
   aiSetHandler("scoreOpportunity", cXSScoreOppHandler);
   
   //Set up the communication handler
   aiCommsSetEventHandler("commHandler");
   
   // This handler runs when you have a shipment available in the home city
   aiSetHandler("shipGrantedHandler", cXSShipResourceGranted);
   
   // Handlers for mission start/end
   aiSetHandler("missionStartHandler",cXSMissionStartHandler);
   aiSetHandler("missionEndHandler",cXSMissionEndHandler);
   
   // Game ending handler, to save game-to-game data before game ends
   aiSetHandler("gameOverHandler",cXSGameOverHandler);
   
   // Handler when a player starts the monopoly victory timer
   aiSetHandler("monopolyStartHandler",cXSMonopolyStartHandler);
   
   // And when a monopoly timer prematurely ends
   aiSetHandler("monopolyEndHandler",cXSMonopolyEndHandler);
   
   // Handler when a player starts the KOTH victory timer
   aiSetHandler("KOTHVictoryStartHandler",cXSKOTHVictoryStartHandler);
   
   // And when a KOTH timer prematurely ends
   aiSetHandler("KOTHVictoryEndHandler",cXSKOTHVictoryEndHandler);

   //-- init Econ and Military stuff.
   initEcon();
   initMil();
  
   if ( (aiGetGameType() == cGameTypeScenario) || (aiGetGameType() == cGameTypeScenario) )
      cvOkToResign = false;   // Default is to not allow resignation in scenarios.  Can override in postInit().

   // Fishing always viable on these maps
   if ( (cRandomMapName=="carolina") ||  
	(cRandomMapName=="carolinalarge") || 
	(cRandomMapName=="new england") || 
	(cRandomMapName=="caribbean") || 
	(cRandomMapName=="patagonia") || 
	(cRandomMapName=="yucatan") ||
	(cRandomMapName=="caribbean") ||
        (cRandomMapName=="hispaniola") ||
        (cRandomMapName=="araucania") ||
        (cRandomMapName=="california") ||
        (cRandomMapName=="northwest territory") ||
        (cRandomMapName=="saguenay") ||
        (cRandomMapName=="saguenaylarge") ||
        (cRandomMapName=="unknown") ||
        (cRandomMapName=="Ceylon") ||
        (cRandomMapName=="Borneo") ||
        (cRandomMapName=="Honshu") ||
        (cRandomMapName=="HonshuRegicide") ||
        (cRandomMapName=="Yellow riverWet") )
   {  gGoodFishingMap = true;  }

   if (gSPC == false)
   {
      if (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0)   // We have a flag, there must be water...
         gGoodFishingMap = true;
   }     
   if (gSPC == true) 
   {
      if (aiIsMapType("AIFishingUseful") == true)
         gGoodFishingMap = true;
      else
         gGoodFishingMap = false;
   }
   
   if ( (cRandomMapName == "amazonia") || (cRandomMapName == "caribbean") || (cRandomMapName == "Ceylon") )
      gNavyMap = true;
   if (gSPC == false)
   {
      if (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0)   // We have a flag, there must be water...
         gNavyMap = true;     
      else
      {
         gNavyMap = false;
         aiEcho("No water flag found, turning off navy.");
      }
   }
   if (gSPC == true)
   {
      if (kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag) > 0)   // We have a flag, there must be water...
         gNavyMap = true;    
      else
         gNavyMap = false;
   }
   
   // natives aim for slightly more villagers (fire pit dancers!)
   if (civIsNative() == true)
   {
      int i = 0;
      for (i=0; <=cAge5)
      {
         xsArraySetInt(gTargetSettlerCounts, i, xsArrayGetInt(gTargetSettlerCounts, i) * 1.1);
      }
   }

      
   // Create a temporary main base so the plans have something to deal with.
   // If there is a scenarioStart object, use it.  If not, use the TC, if any.
   // Failing that, use an explorer, a war chief, a monk, a settlerWagon, or a Settler.  
   // Failing that, select any freakin' unit and use it.
   //vector tempBaseVec = cInvalidVector;
   int unitID = -1;
   unitID = getUnit(cUnitTypeAIStart, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(gCoveredWagonUnit, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeExplorer, cMyID, cUnitStateAlive); 
   if (unitID < 0)
      unitID = getUnit(cUnitTypexpAztecWarchief, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypexpIroquoisWarChief, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypexpLakotaWarchief, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeypMonkChinese, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeypMonkIndian, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeypMonkIndian2, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeypMonkJapanese, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeypMonkJapanese2, cMyID, cUnitStateAlive);  
   if (unitID < 0)
      unitID = getUnit(cUnitTypeSettlerNative, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeypSettlerAsian, cMyID, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeypSettlerJapanese, cUnitStateAlive);
   if (unitID < 0)
      unitID = getUnit(cUnitTypeypSettlerIndian, cUnitStateAlive);  
      
   // If we have a covered wagon, let's pick a spot for the TC search to begin, and a TC start time to activate the build plan.
   //int coveredWagon = getUnit(gCoveredWagonUnit, cMyID, cUnitStateAlive);
   if (unitID >= 0)
   {
      vector unitIDPos = kbUnitGetPosition(unitID);
      vector normalVec = xsVectorNormalize(kbGetMapCenter()-unitIDPos);
      int offset = 30;
      gTCSearchVector = unitIDPos + (normalVec * offset);
      
      while (kbAreaGroupGetIDByPosition(gTCSearchVector) != kbAreaGroupGetIDByPosition(unitIDPos) )
      {  
	 // Try for a goto point 100 meters toward center.  Fall back 5m at a time if that's on another continent/ocean.  
	 // If under 5, we'll take it.
         offset = offset - 5;
         gTCSearchVector = unitIDPos + (normalVec * offset);
         if (offset < 5)
            break;  
      }
      
      // Note...if this is a scenario, we should use the AIStart object's position, NOT the covered wagon position.  Override...
      int aiStart = getUnit(cUnitTypeAIStart, cMyID, cUnitStateAny);
      if (aiStart >= 0)
      {
         gTCSearchVector = kbUnitGetPosition(aiStart);
         aiEcho("Using aiStart object at "+gTCSearchVector+" to start TC placement search");
      }
   }
   
   // Keep Dutch envoy busy
   xsEnableRule("envoyMonitor");

   // Keep native scouts busy
   xsEnableRule("nativeScoutMonitor");

   // Keep mongol scouts busy
   xsEnableRule("mongolScoutMonitor");

   // Enable european upgrade plan
   xsEnableRule("europeanUpgradeMonitor");

   // Enable native upgrade plan
   xsEnableRule("nativeUpgradeMonitor");

   // Enable asian upgrade plan
   xsEnableRule("asianUpgradeMonitor");

   // Enable priest plan
   //xsEnableRule("priestMonitor");

   // Enable missionary plan
   xsEnableRule("missionaryMonitor");

   // Enable imam plan
   //xsEnableRule("imamMonitor");

   // Enable grenadier plan
   //xsEnableRule("grenadierMonitor");

   // Enable organgun plan
   //xsEnableRule("organgunMonitor");

   // Enable oprichnik plan
   //xsEnableRule("oprichnikMonitor");

   // Enable musketeer plan
   //xsEnableRule("musketeerMonitor");

   // Enable flamethrower plan
   //xsEnableRule("flamethrowerMonitor");

   // Enable daimyo plan
   xsEnableRule("daimyoMonitor");

   // Enable shogun plan
   //xsEnableRule("shogunMonitor");

   // Enable arrowknight plan
   //xsEnableRule("arrowknightMonitor");

   
   //Artheru: i think only explorer is kill should these rule enable.
   // Enable explorer rescue plan
   xsEnableRule("rescueExplorer");

   // Enable explorer ransoming
   xsEnableRule("ransomExplorer");

   // Disables early groups, starts nugget hunting, moves explorer later.
   xsEnableRule("exploreMonitor"); 
   
   if ( (gStartMode == cStartModeScenarioWagon) || 
	(gStartMode == cStartModeLandWagon) || 
	(gStartMode == cStartModeBoat) )
   {
      aiEcho("Creating a TC build plan.");
      // Make a town center, pri 100, econ, main base, 1 builder.
      int buildPlan=aiPlanCreate("TC Build plan ", cPlanBuild);
      // What to build
      aiPlanSetVariableInt(buildPlan, cBuildPlanBuildingTypeID, 0, cUnitTypeTownCenter);
      // Priority.
      aiPlanSetDesiredPriority(buildPlan, 100);
      // Mil vs. Econ.
      aiPlanSetMilitary(buildPlan, false);
      aiPlanSetEconomy(buildPlan, true);
      // Escrow.
      aiPlanSetEscrowID(buildPlan, cEconomyEscrowID);
      // Builders.
      switch(kbGetCiv()) // Explorers, war chiefs, monks and econ unit build town centers
      {
         case cCivXPAztec:
         {
            if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
            { 
              aiPlanAddUnitType(buildPlan, cUnitTypexpAztecWarchief, 1, 1, 1);
              aiPlanAddUnitType(buildPlan, cUnitTypeSettlerNative, 1, 3, 6);
            }
            else
            { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
            break;
         }
         case cCivXPIroquois:
         {
            if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
            {
              aiPlanAddUnitType(buildPlan, cUnitTypexpIroquoisWarChief, 1, 1, 1);
              aiPlanAddUnitType(buildPlan, cUnitTypeSettlerNative, 1, 3, 6);
            }
            else
            { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
            break;
         }
         case cCivXPSioux:
         {
            if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
            {
              aiPlanAddUnitType(buildPlan, cUnitTypexpLakotaWarchief, 1, 1, 1);
              aiPlanAddUnitType(buildPlan, cUnitTypeSettlerNative, 1, 3, 6);
            }
            else
            { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
            break;
         }
         case cCivChinese:
         {
            if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
            {
              aiPlanAddUnitType(buildPlan, cUnitTypeAbstractChineseMonk, 0, 1, 2);
              aiPlanAddUnitType(buildPlan, cUnitTypeypSettlerAsian, 1, 3, 6);
            }
            else
            { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
            break;
         }
         case cCivIndians:
         {
            if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
            {
              aiPlanAddUnitType(buildPlan, cUnitTypeAbstractIndianMonk, 0, 1, 2);              
              aiPlanAddUnitType(buildPlan, cUnitTypeypSettlerIndian, 1, 3, 6);
            }
            else
            { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
            break;
         }
         case cCivJapanese:
         {
            if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
            {
              aiPlanAddUnitType(buildPlan, cUnitTypeAbstractJapaneseMonk, 0, 1, 2);
              aiPlanAddUnitType(buildPlan, cUnitTypeypSettlerJapanese, 1, 3, 6);
            }
            else
            { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
            break;
         }
         default:
         {
            if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) == 0)
            { aiPlanAddUnitType(buildPlan, cUnitTypeExplorer, 1, 1, 1); }
            else
            { aiPlanAddUnitType(buildPlan, gCoveredWagonUnit, 1, 1, 1); }
            break;
         }
      }
   
      // Instead of base ID or areas, use a center position and falloff.
      aiPlanSetVariableVector(buildPlan, cBuildPlanCenterPosition, 0, unitIDPos);
      aiPlanSetVariableFloat(buildPlan, cBuildPlanCenterPositionDistance, 0, 60.00);

      // Add position influences for trees, gold
      aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitTypeID, 3, true);
      aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitDistance, 3, true);
      aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitValue, 3, true);
      aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitFalloff, 3, true);
      aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 0, cUnitTypeWood);
      aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 0, 30.0);     // 30m range.
      aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 0, 10.0);        // 10 points per tree
      aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 0, cBPIFalloffLinear);  // Linear slope falloff
      aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 1, cUnitTypeMine);
      aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 1, 50.0);              // 50 meter range for gold
      aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 1, 300.0);                // 300 points each
      aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 1, cBPIFalloffLinear);  // Linear slope falloff
      aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 2, cUnitTypeMine);
      aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 2, 20.0);              // 20 meter inhibition to keep some space
      aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 2, -300.0);                // -300 points each
      aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 2, cBPIFalloffNone);      // Cliff falloff
      
      // Two position weights
      aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluencePosition, 2, true);
      aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluencePositionDistance, 2, true);
      aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluencePositionValue, 2, true);
      aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluencePositionFalloff, 2, true);
      
      // Give it a positive but wide-range prefernce for the search area, and a more intense but smaller negative to avoid the landing area.
      // Weight it to prefer the general starting neighborhood
      aiPlanSetVariableVector(buildPlan, cBuildPlanInfluencePosition, 0, gTCSearchVector);    // Position influence for search position
      aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluencePositionDistance, 0, 200.0);     // 200m range.
      aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluencePositionValue, 0, 300.0);        // 300 points max
      aiPlanSetVariableInt(buildPlan, cBuildPlanInfluencePositionFalloff, 0, cBPIFalloffLinear);  // Linear slope falloff
      
      // Add negative weight to avoid initial drop-off beach area
      aiPlanSetVariableVector(buildPlan, cBuildPlanInfluencePosition, 1, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));    // Position influence for landing position
      aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluencePositionDistance, 1, 50.0);     // Smaller, 50m range.
      aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluencePositionValue, 1, -400.0);      // -400 points max
      aiPlanSetVariableInt(buildPlan, cBuildPlanInfluencePositionFalloff, 1, cBPIFalloffLinear);  // Linear slope falloff
      // This combo will make it dislike the immediate landing (-100), score +25 at 50m, score +150 at 100m, then gradually fade to +0 at 200m.
   
   
      // Wait to activate TC build plan, to allow adequate exploration
      gTCBuildPlanID = buildPlan;   // Save in a global var so the rule can access it.
      aiPlanSetEventHandler(buildPlan, cPlanEventStateChange, "tcPlacedEventHandler");    
      
      xsEnableRule("tcBuildPlanDelay");
   }

   if (cvOkToBuildDeck == true)
   {  xsEnableRule("buyCards");  }
   
   //xsEnableRule("useCoveredWagons");
   xsEnableRule("townCenterComplete");  // Rule to build other buildings after TC completion
   xsEnableRule("useAIStart");   
   xsEnableRule("useFactoryWagons");   
   //xsEnableRule("tcMonitor");    // Has explorer, war chief, Asian monks or settlers build a TC if there is none
   xsEnableRule("ageUpgradeMonitor");  // Make sure we freeze spending to allow age-ups at certain villie pop levels
   xsEnableRule("sendChatToMyAllies");
   
   postInit();		// All normal initialization is done, let loader file clean up what it needs to.
   
   // Store the initial settings for later retrieval (to handle 'cancel' after a train bias command.
   gInitRushBoom = btRushBoom;
   gInitOffenseDefense = btOffenseDefense;
   gInitBiasCav = btBiasCav;
   gInitBiasInf = btBiasInf;
   gInitBiasArt = btBiasArt;
   gInitBiasNative = btBiasNative;
   gInitBiasTrade = btBiasTrade;
   aiEcho("INITIAL BEHAVIOR SETTINGS");
   aiEcho("Rush "+btRushBoom);
   aiEcho("Offense "+btOffenseDefense);
   aiEcho("Cav "+btBiasCav);
   aiEcho("Inf "+btBiasInf);
   aiEcho("Art "+btBiasArt);
   aiEcho("Natives "+btBiasNative);
   aiEcho("Trade "+btBiasTrade);
   
   // Re-do politician choices now that postInit() is complete...
   int poliScores = xsArrayCreateFloat(6, 0.0, "Politician scores");
   int numChoices = -1;
   int politician = -1;
   float bonus = 0.0;
   
   for (age = cAge2; <= cAge5)
   {
      for (p=0; <6)
         xsArraySetFloat(poliScores, p, 0.0);   // Reset scores
      numChoices = aiGetPoliticianListCount(age);
      for (p=0; <numChoices)
      {  // Score each of these choices based on the strength of our behavior settings.
         politician = aiGetPoliticianListByIndex(age, p);
         // Rusher bonuses
         if (btRushBoom > 0.0)
            bonus = btRushBoom;
         else
            bonus = 0.0;
         if (  (politician == cTechPoliticianQuartermaster) || 
               (politician == cTechPoliticianScout) ||
               (politician == cTechPoliticianScoutRussian) ||
               (politician == cTechPoliticianSergeantDutch) || 
               (politician == cTechPoliticianSergeantGerman) ||
               (politician == cTechPoliticianSergeantSpanish) || 
               (politician == cTechPoliticianMohawk) || 
               (politician == cTechPoliticianMarksman) ||
               (politician == cTechPoliticianMarksmanOttoman) ||
               (politician == cTechPoliticianMarksmanPortuguese) ||
               (politician == cTechPoliticianAdventurerBritish) ||
               (politician == cTechPoliticianAdventurerRussian) ||
               (politician == cTechPoliticianAdventurerSpanish) )
         {
            xsArraySetFloat(poliScores, p, xsArrayGetFloat(poliScores, p) + bonus); // Add in a bonus based on our rusher trait.
         }
         // Boomer bonuses
         if (btRushBoom < 0.0)
            bonus = -1.0 * btRushBoom;
         else
            bonus = 0.0;
         if (  (politician == cTechPoliticianBishop) ||
               (politician == cTechPoliticianBishopGerman) ||
               (politician == cTechPoliticianTycoon) ||
               (politician == cTechPoliticianExiledPrince) ||
               (politician == cTechPoliticianPresidente) )
         {
            xsArraySetFloat(poliScores, p, xsArrayGetFloat(poliScores, p) + bonus); // Add in a bonus based on our boomer trait.
         }
         // Defense bonuses
         if (btOffenseDefense < 0.0)
            bonus = -1.0 * btOffenseDefense; // Defense rating
         else
            bonus = 0.0;
         if (politician == cTechPoliticianGovernor)
         {
            xsArraySetFloat(poliScores, p, xsArrayGetFloat(poliScores, p) + bonus); // Add in a bonus based on our defense trait.
         }
         // Offense bonuses
         if (btOffenseDefense > 0.0)
            bonus = btOffenseDefense;
         else
            bonus = 0.0;
         if (  (politician == cTechPoliticianScout) ||
               (politician == cTechPoliticianScoutRussian) ||
               (politician == cTechPoliticianSergeantDutch) || 
               (politician == cTechPoliticianSergeantGerman) ||
               (politician == cTechPoliticianSergeantSpanish) || 
               (politician == cTechPoliticianMohawk) || 
               (politician == cTechPoliticianMarksman) ||
               (politician == cTechPoliticianMarksmanOttoman) ||
               (politician == cTechPoliticianMarksmanPortuguese) ||
               (politician == cTechPoliticianAdventurerBritish) ||
               (politician == cTechPoliticianAdventurerRussian) ||
               (politician == cTechPoliticianAdventurerSpanish) ||
               (politician == cTechPoliticianGeneral) ||
               (politician == cTechPoliticianGeneralBritish) ||
               (politician == cTechPoliticianGeneralOttoman) )
         {
            xsArraySetFloat(poliScores, p, xsArrayGetFloat(poliScores, p) + bonus); // Add in a bonus based on our offense trait.
         }
         if (gNavyMap == false)
         {
            bonus = -10.0; // Essentially disqualify any navy polis
            if (  (politician == cTechPoliticianAdmiral) ||
                  (politician == cTechPoliticianAdmiralOttoman) ||
                  (politician == cTechPoliticianPirate) )
            {
               xsArraySetFloat(poliScores, p, xsArrayGetFloat(poliScores, p) + bonus); // Disqualify naval polis on land maps
            }
         }         
      }  // for (p=0; <numChoices)
      
      // The scores are set, find the high score
      int bestChoice = 0;        // Select 0th item if all else fails
      float bestScore = -100.0;  // Impossibly low
      for (p=0; <numChoices)
      {
         if (xsArrayGetFloat(poliScores, p) > bestScore)
         {
            bestScore = xsArrayGetFloat(poliScores, p);
            bestChoice = p;
         }
      }
      politician = aiGetPoliticianListByIndex(age, bestChoice);
      aiSetPoliticianChoice(age, politician);
      aiEcho("Politician for age "+age+" is #"+politician+", "+kbGetTechName(politician));
   } //for (age = cAge2; <= cAge5)
}
   
//==============================================================================
// initRule
// Add a brief delay to make sure the covered wagon (if any) has time to unload
//==============================================================================
rule initRule
inactive
minInterval 3
{
   if (cvInactiveAI == true) 
      return;  // Wait forever unless this changes
   init();
   xsDisableSelf();
}






//==============================================================================
// ottomanMonitor
// Make sure they always have a church, get techs as available
//==============================================================================
rule ottomanMonitor
inactive
minInterval 1
{  
   int speedPlanID = -1;   // Plan for improving vill training speed.
   int capPlanID = -1;     // Plan for raising settler pop limit.
   int churchPlanID = -1;

   // Disable rule once all techs have been researched
   if ((kbTechGetStatus(cTechChurchMilletSystem) == cTechStatusActive) && 
       (kbTechGetStatus(cTechChurchKopruluViziers) == cTechStatusActive) && 
       (kbTechGetStatus(cTechChurchAbbassidMarket) == cTechStatusActive) &&  
       (kbTechGetStatus(cTechChurchGalataTowerDistrict) == cTechStatusActive) &&  
       (kbTechGetStatus(cTechChurchTopkapi) == cTechStatusActive))
   {
      xsDisableSelf();
   }
   
   // If no mosque and no build plan, build one, exit.
   if (kbUnitCount(cMyID, cUnitTypeChurch, cUnitStateAlive) < 1)
   {  // No mosque, check for build plan, add one if needed
      churchPlanID = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeChurch);  
      if (churchPlanID < 0)
      {      
         aiEcho("Creating church build plan");        
         createSimpleBuildPlan(cUnitTypeChurch, 1, 93, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
      }
      return;
   }
  
   // We have a church, continue...
   // Check for each of their techs.  If it's obtainable and there's 
   // no plan, get it.
   

   if (kbTechGetStatus(cTechChurchMilletSystem) == cTechStatusObtainable) 
   {
      speedPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchMilletSystem);
      if (speedPlanID < 0)
         createSimpleResearchPlan(cTechChurchMilletSystem, getUnit(cUnitTypeChurch),cEconomyEscrowID, 91);
   }

   if ((kbTechGetStatus(cTechChurchKopruluViziers) == cTechStatusObtainable) && (kbUnitCount(cMyID, gEconUnit, cUnitStateAlive) >= 35))
   {
      speedPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchKopruluViziers);
      if (speedPlanID < 0)
         createSimpleResearchPlan(cTechChurchKopruluViziers, getUnit(cUnitTypeChurch),cEconomyEscrowID, 91);
   }     
   
   if ((kbTechGetStatus(cTechChurchAbbassidMarket) == cTechStatusObtainable) && (kbUnitCount(cMyID, gEconUnit, cUnitStateAlive) >= 45))
   {
      speedPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchAbbassidMarket);
      if (speedPlanID < 0)
         createSimpleResearchPlan(cTechChurchAbbassidMarket, getUnit(cUnitTypeChurch),cEconomyEscrowID, 91);
   }
   
   if ((kbTechGetStatus(cTechChurchGalataTowerDistrict) == cTechStatusObtainable) && (kbUnitCount(cMyID, gEconUnit, cUnitStateAlive) >= 20))
   {
      capPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchGalataTowerDistrict);
      if (capPlanID < 0)
         createSimpleResearchPlan(cTechChurchGalataTowerDistrict, getUnit(cUnitTypeChurch),cEconomyEscrowID, 91);
   }     
 
   if ((kbTechGetStatus(cTechChurchTopkapi) == cTechStatusObtainable) && (kbUnitCount(cMyID, gEconUnit, cUnitStateAlive) >= 40))
   {
      capPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchTopkapi);
      if (capPlanID < 0)
         createSimpleResearchPlan(cTechChurchTopkapi, getUnit(cUnitTypeChurch),cEconomyEscrowID, 91);
   }
}

//==============================================================================
// tcBuildPlanDelay
/*
   Allows delayed activation of the TC build plan, so that the explorer has 
   uncovered a good bit of the map before a placement is selected.

   The int gTCBuildPlanID is used to simplify passing of the build plan ID from
   init().
*/
//==============================================================================

rule tcBuildPlanDelay
inactive
minInterval 1
{
  if (xsGetTime() < gTCStartTime)
      return;     // Do nothing until game time is beyond 10 seconds
   
   aiPlanSetActive(gTCBuildPlanID);
   aiEcho("Activating TC build plan "+gTCBuildPlanID+".");
   xsDisableSelf();
}





//==============================================================================
/* tcMonitor
   
   Look for a TC, or a build plan for a TC.  If neither, start a new plan
   and have explorer, war chief or monk(s) build one.
*/
//==============================================================================
rule tcMonitor
inactive
minInterval 10
{
   if (cvOkToBuild == false)
      return;  // Quit if AI is not allowed to build

   if (xsGetTime() < 60000)
      return;  // Give first plan 60 sec to get going
   
   static float nextRadius = 50.0;
   
   int count = kbUnitCount(cMyID, cUnitTypeTownCenter, cUnitStateABQ);
   int plan = -1;
   if (count < 1)
      plan = aiPlanGetIDByTypeAndVariableType(cPlanBuild, cBuildPlanBuildingTypeID, cUnitTypeTownCenter, true);

   if ((count > 0) || (plan >= 0))
      return;     // We have a TC or a TC build plan, no more work to do.

   if ((count == 0) && (plan >= 0))
      aiPlanDestroy(plan);  // Destroy old plan to keep it from blocking the rule(artheru:how can this happen?)

   aiEcho("Starting a new TC build plan.");
   // Make a town center, pri 100, econ, main base, 1 builder (explorer).
	int buildPlan=aiPlanCreate("TC Build plan explorer", cPlanBuild);
   // What to build
   aiPlanSetVariableInt(buildPlan, cBuildPlanBuildingTypeID, 0, cUnitTypeTownCenter);
   // Priority.
   aiPlanSetDesiredPriority(buildPlan, 100);
   // Mil vs. Econ. (artheru:i think both...)
   aiPlanSetMilitary(buildPlan, true);
   aiPlanSetEconomy(buildPlan, true);
   // Escrow.
   aiPlanSetEscrowID(buildPlan, cEconomyEscrowID);
   // Builders.
   switch(kbGetCiv())
   {
      case cCivXPAztec:
      {
         aiPlanAddUnitType(buildPlan, cUnitTypexpAztecWarchief, 1, 1, 1);
         break;
      }
      case cCivXPIroquois:
      {
          aiPlanAddUnitType(buildPlan, cUnitTypexpIroquoisWarChief, 1, 1, 1);
         break;
      }
      case cCivXPSioux:
      {
         aiPlanAddUnitType(buildPlan, cUnitTypexpLakotaWarchief, 1, 1, 1);
         break;
      }
      case cCivChinese:
      {
         aiPlanAddUnitType(buildPlan, cUnitTypeypMonkChinese, 1, 1, 1);
         break;
      }
      case cCivIndians:
      {
         aiPlanAddUnitType(buildPlan, cUnitTypeypMonkIndian, 1, 1, 1);
         aiPlanAddUnitType(buildPlan, cUnitTypeypMonkIndian2, 1, 1, 1);
         break;
      }
      case cCivJapanese:
      {
         aiPlanAddUnitType(buildPlan, cUnitTypeypMonkJapanese, 1, 1, 1);
         aiPlanAddUnitType(buildPlan, cUnitTypeypMonkJapanese2, 1, 1, 1);
         break;
      }
      default:
      {
         aiPlanAddUnitType(buildPlan, cUnitTypeExplorer, 1, 1, 1);
         break;
      }
   }

   // Instead of base ID or areas, use a center position and falloff.
   aiPlanSetVariableVector(buildPlan, cBuildPlanCenterPosition, 0, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
   aiPlanSetVariableFloat(buildPlan, cBuildPlanCenterPositionDistance, 0, nextRadius);
   nextRadius = nextRadius + 50.0;  // If it fails again, search even farther out.

   // Add position influences for trees, gold
   aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitTypeID, 3, true);
   aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitDistance, 3, true);
   aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitValue, 3, true);
   aiPlanSetNumberVariableValues(buildPlan, cBuildPlanInfluenceUnitFalloff, 3, true);
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 0, cUnitTypeWood);
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 0, 30.0);     // 30m range.
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 0, 10.0);        // 10 points per tree
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 0, cBPIFalloffLinear);  // Linear slope falloff
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 1, cUnitTypeMine);
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 1, 40.0);              // 40 meter range for gold
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 1, 100.0);                // 100 points each
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 1, cBPIFalloffLinear);  // Linear slope falloff
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitTypeID, 2, cUnitTypeMine);
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitDistance, 2, 20.0);              // 20 meter inhibition to keep some space
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluenceUnitValue, 2, -100.0);                // -100 points each
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluenceUnitFalloff, 2, cBPIFalloffNone);      // Cliff falloff
   
   // Weight it to prefer the general starting neighborhood
   aiPlanSetVariableVector(buildPlan, cBuildPlanInfluencePosition, 0, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));    // Position inflence for landing position
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluencePositionDistance, 0, 200.0);     // 200m range.
   aiPlanSetVariableFloat(buildPlan, cBuildPlanInfluencePositionValue, 0, 300.0);        // 500 points max
   aiPlanSetVariableInt(buildPlan, cBuildPlanInfluencePositionFalloff, 0, cBPIFalloffLinear);  // Linear slope falloff
   
   // Activate
   aiPlanSetActive(buildPlan);
}


//==============================================================================
/* transportArrive()
   
   This function is called when it is time for the AI to come to life.

   In Scenario/Campaign games, it means the aiStart object has been placed.

   In RM/GC games, it means that the player has all the starting units.  This may
   mean that the initial boat has been unloaded, or the player has started
   with a TC and units, or the player has initial units and a covered wagon
   and must choose a TC location.  

   This function activates "initRule" if everything is OK for a start...
*/
//==============================================================================
void transportArrive(int parm=-1) // Event handler
{
   static bool firstTime = true;
   
   if (gSPC == true)
   {
      // Verify aiStart object, return if it isn't there
      if (kbUnitCount(cMyID, cUnitTypeAIStart, cUnitStateAlive) < 1)
      {
         xsEnableRule("waitForStartup");
         return();
      }
   }
   
   if (firstTime == true)
   {  
		// Do init processing
		aiEcho("The transport has arrived.");
		firstTime = false;
		// No need for it, we're running
		xsDisableRule("transportArriveFailsafe");	
      xsEnableRule("initRule");
   }
}

rule transportArriveFailsafe
inactive
minInterval 30
{	// This rule is normally killed when transportArrive runs the first time.
	transportArrive(-1);		// Call it if we're still running at 30 seconds, make sure the AI starts.
}




rule autoSave
inactive
minInterval 5
{
   int interval = 20; // Interval in minutes
   static int nextTime = 0;
   
   // First, do an auto save game if needed
   //Dont save if we are told not to.
   if (aiGetAutosaveOn() == true)
   {
      int firstCPPlayerID = -1;
      for(i=0; < cNumberPlayers)
      {
         if(kbIsPlayerHuman(i) == true)
            continue;
   
         firstCPPlayerID = i;
      }
      if ( (cMyID == firstCPPlayerID) && (xsGetTime() >= nextTime) && (cvDoAutoSaves == true))
      {  // We're the first CP, it's our job to do the save, and it's time to do it.
         //Create the savegame name.
         static int psCount = 0;
         //Save it.
         if (cvDoAutoSaves == true)
         {
            aiQueueAutoSavegame(psCount);
            //Inc our count.
            psCount=psCount+interval;   // Count roughly matches game time in minutes
            while (psCount < (xsGetTime()/600000) )
               psCount = psCount+interval;    // Handle reloading of save games from machines that had saves off...
            nextTime = psCount * 600 * 1000;
         }
      }
   }
}

//==============================================================================
/* rule ageUpgradeMonitor

   This rule decides when it makes sense to work toward an age upgrade.  When that
   time comes, it shifts the normal escrow accounts to zero, sets the upgrade account 
   to 100%, and reallocates everything.  

   This causes the upgrade account to take everything it needs until the age upgrade
   is complete.  The escrows are restored in the next age's 'monitor' rule, i.e.
   the age2monitor, age3Monitor, etc.  
*/
//==============================================================================
rule ageUpgradeMonitor
inactive
group tcComplete
minInterval 1
{
   int specialAgeTech = -1;   // Used for personality-specific overrides
   int planID = -1;
   int i=0;
   static int lastAgeFrozen = -1;
   
   vector myTCLocation = kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));  	
   vector wonderBuildPlace = myTCLocation;
   
   if (kbGetAge() >= cAge5)
   {
      xsDisableSelf();
      return;
   }
   
   if ( kbGetAge() >= cvMaxAge )
      return;  // Don't disable, this var could change later...
    
   int politician = -1;

   if ( civIsAsian() == false )
   {
      // Quit if we already have a plan in the works
      if (gAgeUpResearchPlan >= 0)
      {
         if (aiPlanGetState(gAgeUpResearchPlan) >= 0)
         {
            return;  
         }
         else 
         {  // Plan variable is set, but plan is dead.
            aiPlanDestroy(gAgeUpResearchPlan);
            gAgeUpResearchPlan = -1;
            // OK to continue, as we don't have an active plan
         }
      }
	  
      // Try to research the preferred politician
      if (civIsNative() == false)
      {
         politician = chooseEuropeanPolitician();
      }
      else
      {
         politician = chooseNativeCouncilMember();
      }

      if (politician < 0)     //None specified, need one...
         politician = aiGetPoliticianListByIndex(kbGetAge()+1, 0);   // Pick the first in the list
   

      // First, see if we can afford an age-up politician

      //-- try our personality choice first.
      specialAgeTech = politician;
      if ( specialAgeTech != -1 )
      {
         if ( kbCanAffordTech(specialAgeTech, cEmergencyEscrowID) == true )   
         {  // Can afford or in "escrow-wait" mode...go ahead and make the plan
            if ( (kbTechGetStatus(specialAgeTech) == cTechStatusObtainable) && (gAgeUpResearchPlan < 0) )
            {  // Tech is valid, and we're not yet researching it...
               gAgeUpResearchPlan = createSimpleResearchPlan(specialAgeTech, -1, cEmergencyEscrowID, 99);
               //echoMessage("Creating plan #"+gAgeUpResearchPlan+" to get age upgrade with tech "+kbGetTechName(specialAgeTech));
               return;
            }
         }
      }
   
      // No previous choice, let's see if something is available
      if (gAgeUpResearchPlan < 0) // If we're not already waiting for one...
      {
         //-- Walk what is available to us and choose the first one we can afford.
         int count = aiGetPoliticianListCount(kbGetAge()+1);
         for (i=0; < count)
         {
            specialAgeTech = aiGetPoliticianListByIndex(kbGetAge()+1, i);
            if ( kbCanAffordTech(specialAgeTech, cEmergencyEscrowID) == true )   
            {  // Can afford or in "escrow-wait" mode...go ahead and make the plan
               if ( (kbTechGetStatus(specialAgeTech) == cTechStatusObtainable) && (gAgeUpResearchPlan < 0) )
               {
                  gAgeUpResearchPlan = createSimpleResearchPlan(specialAgeTech, -1, cEmergencyEscrowID, 99);                
                  aiEcho("Creating plan #"+gAgeUpResearchPlan+" to get age upgrade with tech "+kbGetTechName(specialAgeTech));
                  return;
               }
            }
         }
      }
   }
   else 
   {  //We are Asian, time to build a wonder
      // Not at deadline...see if we can afford the preferred politician
      politician = chooseAsianWonder();    // Get the specified wonder

      // Quit if we already have a plan in the works
      if (gAgeUpResearchPlan >= 0)
      {
         if (aiPlanGetState(gAgeUpResearchPlan) >= 0)
         {
            return;  
         }
         else 
         {  // Plan variable is set, but plan is dead.
            aiPlanDestroy(gAgeUpResearchPlan);
            gAgeUpResearchPlan = -1;
            // OK to continue, as we don't have an active plan
         }
      }
  
      // First, see if we can afford an age-up politician
  
      //-- try our personality choice first.
      specialAgeTech = politician;
      if (specialAgeTech != -1)
      {
         aiEcho("Wonder to build: "+kbGetProtoUnitName(specialAgeTech));
         aiEcho("Should we make the plan?: "+gAgeUpResearchPlan);
         if ( gAgeUpResearchPlan < 0 )
         {  // Tech is valid, and we're not yet researching it...           
            if (((kbGetCiv() == cCivIndians) || (kbGetCiv() == cCivSPCIndians)) &&
		((specialAgeTech == cUnitTypeypWIAgraFort2) ||
		 (specialAgeTech == cUnitTypeypWIAgraFort3) ||
		 (specialAgeTech == cUnitTypeypWIAgraFort4) ||
		 (specialAgeTech == cUnitTypeypWIAgraFort5)))
	    {  
               vector normalVec = xsVectorNormalize(kbGetMapCenter()-myTCLocation);	
	       wonderBuildPlace = myTCLocation + normalVec * 25;
            }
            if (((kbGetCiv() == cCivJapanese) || 
                 (kbGetCiv() == cCivSPCJapanese) || 
                 (kbGetCiv() == cCivSPCJapaneseEnemy)) &&
		((specialAgeTech == cUnitTypeypWJToshoguShrine2) ||
		 (specialAgeTech == cUnitTypeypWJToshoguShrine3) ||
		 (specialAgeTech == cUnitTypeypWJToshoguShrine4) ||
		 (specialAgeTech == cUnitTypeypWJToshoguShrine5)))
            {
	       int animalID = getUnitByLocation(cUnitTypeHuntable, 0, cUnitStateAlive, myTCLocation, 50.0);
	       if (animalID >= 0)
		 wonderBuildPlace = kbUnitGetPosition(animalID);              
	    }
            gAgeUpResearchPlan = createLocationBuildPlan(specialAgeTech, 1, 100, true, cEconomyEscrowID, wonderBuildPlace, 1);
            aiPlanSetVariableFloat(gAgeUpResearchPlan, cBuildPlanCenterPositionDistance, 0, 300.0);
            aiEcho("<<<<<<<<<<RushBoom + OffenseDefense = "+btRushBoom+" + "+btOffenseDefense+" = "+(btRushBoom+btOffenseDefense));
            aiEcho("Creating plan #"+gAgeUpResearchPlan+" to get age upgrade with wonder "+kbGetProtoUnitName(specialAgeTech));
            return;
         }
      }
   }
}




//==============================================================================
/* shipGrantedHandler()

   

   Update 02/10/2004:  New algorithm.
   1)  Clear the list
   2)  Get all the settlers you can.
   3)  If space remains, get the resource you're lowest on.

   Update on 04/22/2004:  New algorithm:
   1)  First year, get wood
   2)  Later years, get the resource that gives the largest bucket.
   3)  In a tie, coin > food > wood
   Note, in the early years, the resourceManager will sell food and buy wood as needed
   to drive early housing growth.

   Update on 4/27/2004:  Get wood for first TWO years.

   Scrapped on 5/12/2004.  Now, settlers have to be imported.  New logic:
   1)  Get settlers always, except:
   2)  If I can afford governor and I don't have him yet, get him
   3)  If I can afford viceroy and I don't have him yet and he's available, get him.
   4)  If settlers aren't available or less than 10 are available, get most needed resource.
   
   August:  Always get an age upgrade if you can.  Otherwise, compute the value for each bucket,
   and choose the best buy.  
   
   November:  Adding multiplier for econ/mil units based on rush/boom emphasis
*/
//==============================================================================
void shipGrantedHandler(int parm=-1) // Event handler
{
   aiEcho(" ");
   aiEcho("SHIP GRANTED:");
   
   if (kbResourceGet(cResourceShips) < 1.0)
      return;     // Early out if we don't have a ship...no point even checking.
   
   if (agingUp() == true)
   {
      // We're aging up, save this shipment for after it completes
      aiEcho("We're aging up, delaying this shipment until then.");
      return;
   }

   if ((gSPC == false) && (kbUnitCount(cMyID, cUnitTypexpColonialMilitia, cUnitStateAlive) > 0))
   {
      // We've revolted, function is no longer appropriate
      aiEcho("Abort -- revolutionary need special handling.");
      return;
   }
   
	aiEcho("Choosing contents for next transport");

   bool result = false;

   bool homeBaseUnderAttack = false;
   if (gDefenseReflexBaseID == kbBaseGetMainID(cMyID))
      homeBaseUnderAttack = true;      // So don't send resources or settlers....


      // Adjust for rush or boominess
   float econBias = 0.0; // How much to boost econ units or penalize mil units
   // Flip rushboom sign so boomer is +1 and rusher is -1.  
   econBias = (btRushBoom * -1.0);
   // Set econBias as a percentage boost or penalty for resources and settlers
   econBias = (econBias / 4.0) + 1.0;  // +/- up to 25%
   
   int bestCard = -1;
   float bestUnitScore = -1.0;
   int unitType = -1;               // The current unit's ID
   int unitCount = -1;              // How many unit types are available?
   int qtyAvail = -1;               // How many of each are available
   int age = -1;                    // What age do you need to use this card.
   int ownTPList = kbVPSiteQuery(cVPNative, cMyID, cVPStateCompleted);  
   int alliedTPList = kbVPSiteQuery(cVPNative, cPlayerRelationAlly, cVPStateCompleted);
   int numTeamTPs = xsArrayGetSize(ownTPList) + xsArrayGetSize(alliedTPList);
   float totalValue = -1.0;         // What is this bucket worth to me?
   bool isMilitaryUnit = false;
   
   
   int totalCards = aiHCDeckGetNumberCards(gDefaultDeck);
   aiEcho("**** Picking HC card to play");
   for (i=0; < totalCards)
   {
      //-- Skip card if we can't play it.
	if(aiHCDeckCanPlayCard(i) == false)
		continue;

	unitType = aiHCDeckGetCardUnitType(gDefaultDeck, i);  // What is this unit?
      qtyAvail = aiHCDeckGetCardUnitCount(gDefaultDeck, i);
      age = aiHCDeckGetCardAgePrereq(gDefaultDeck, i);
	totalValue = 0.0;
      
      // Calculate a value for this unit.  If not found, use its aiCost.
      switch(unitType)
      {
         case cUnitTypeSettler:   // European settlers
         {
            totalValue = 205 * qtyAvail;      // Normal default
            totalValue = totalValue * econBias; // Boomers prefer this, rushers rather skip.
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            if (getSettlerShortfall() < qtyAvail)  // We have enough settlers
               totalValue = 0.0;
            break;
         }
         case cUnitTypeCoureur:   // French coureurs
         {
            totalValue = 370 * qtyAvail;      // Normal default
            totalValue = totalValue * econBias; // Boomers prefer this, rushers rather skip.
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            if (getSettlerShortfall() < qtyAvail)  // We have enough settlers
               totalValue = 0.0;
            break;
         }
         case cUnitTypeSettlerWagon:   // German settler wagons
         {
            totalValue = 390 * qtyAvail;      // Normal default
            totalValue = totalValue * econBias; // Boomers prefer this, rushers rather skip.
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            if (getSettlerShortfall() < qtyAvail)  // We have enough settlers
               totalValue = 0.0;
            break;
         }
         case cUnitTypeSettlerNative:   // Native villagers
         {
            totalValue = 205 * qtyAvail;      // Normal default
            totalValue = totalValue * econBias; // Boomers prefer this, rushers rather skip.
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            if (getSettlerShortfall() < qtyAvail)  // We have enough settlers
               totalValue = 0.0;
            break;
         }
         case cUnitTypeypSettlerAsian:   // Chinese settlers
         {
            totalValue = 205 * qtyAvail;      // Normal default
            totalValue = totalValue * econBias; // Boomers prefer this, rushers rather skip.
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            if (getSettlerShortfall() < qtyAvail)  // We have enough settlers
               totalValue = 0.0;
            break;
         }
         case cUnitTypeypSettlerJapanese:   // Japanese settlers
         {
            totalValue = 205 * qtyAvail;      // Normal default
            totalValue = totalValue * econBias; // Boomers prefer this, rushers rather skip.
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            if (getSettlerShortfall() < qtyAvail)  // We have enough settlers
               totalValue = 0.0;
            break;
         }
         case cUnitTypeAbstractWarShip:
         {
            if (gNavyMap == true) 
            {  totalValue = 900.0 * qtyAvail; }
            else 
            {  totalValue = 0.0; }          
            break;
         }
         case gFishingUnit:
         {
            if (gFishingPlan < 0)
               totalValue = 0.0;
            else if (aiPlanGetActive(gFishingPlan) == false)
               totalValue = 0.0;  
            break;                
         }
         case gCoveredWagonUnit:
         {
            totalValue = 0.0;    
            if (kbUnitCount(cMyID, cUnitTypeTownCenter, cUnitStateAlive) < kbGetBuildLimit(cMyID, cUnitTypeTownCenter))
            {  totalValue = 100000.0; }    // Trumps everything  
            else
            {
               int tcTarget = 1;
               if (kbGetAge() >= cAge3)
               {
                  tcTarget = 3;
                  if (cMyCiv == cCivPortuguese)
                  {  tcTarget = kbGetBuildLimit(cMyID, cUnitTypeTownCenter);  } 
               }
               
               if ( (kbUnitCount(cMyID, cUnitTypeTownCenter, cUnitStateAlive) < tcTarget) && (homeBaseUnderAttack == false) )
                  totalValue = 1600.0 * qtyAvail;
            }
            break;
         }
         case cUnitTypeOutpostWagon:
         {
            totalValue = 0.0;    
            if ( (kbUnitCount(cMyID, cUnitTypeOutpostWagon, cUnitStateABQ) + kbUnitCount(cMyID, cUnitTypeOutpost, cUnitStateAlive)) < gNumTowers)
               totalValue = 600.0 * qtyAvail;
            if (homeBaseUnderAttack == true)
               totalValue = 0.0;
            break;
         }
         case cUnitTypeYPCastleWagon:
         {
            totalValue = 0.0;    
            if ( (kbUnitCount(cMyID, cUnitTypeYPCastleWagon, cUnitStateABQ) + kbUnitCount(cMyID, cUnitTypeypCastle, cUnitStateAlive)) < gNumTowers)
               totalValue = 900.0 * qtyAvail;
            if (homeBaseUnderAttack == true)
               totalValue = 0.0;
            break;
         }
         case cUnitTypeFortWagon:
         {
            if (aiTreatyActive() == true)
               totalValue = 0.0;
            if ( (cvOkToBuild == true) && (cvOkToBuildForts == true) && (homeBaseUnderAttack == false) )
               totalValue = 10000.0;   // Big, but smaller than TC wagon if there is no TC.
            break;
         }
         case cUnitTypeFactoryWagon:
         {
            totalValue = 0.0;
            if ( (cvOkToBuild == true) && (homeBaseUnderAttack == false) )
               totalValue = 2000.0 * qtyAvail;   // Big, but smaller than TC wagon if there is no TC.
            break;
         }
         case cUnitTypeYPDojoWagon:
         {
            totalValue = 0.0;
            if ( (cvOkToBuild == true) && (homeBaseUnderAttack == false) )
               totalValue = 1000.0;   // Big, but smaller than TC wagon.
            break;
         }
         case cUnitTypeYPRicePaddyWagon:
         {
            totalValue = 0.0;
            if ( (cvOkToBuild == true) && ((gTimeToFarm == true) || (gTimeForPlantations == true)) )
               totalValue = 2500.0;   // Big, but smaller than TC wagon.
            break;
         }
         case cUnitTypeBankWagon:
         {
            totalValue = 0.0;    
            if ( (cvOkToBuild == true) && (homeBaseUnderAttack == false) )
               totalValue = 2000.0 * qtyAvail;
            break;
         }
         case cUnitTypeCrateofCoin:
         {                                                          
            if (age == cAge2) // May be a mix of large and small crates, and we can't tell.  Make a guess based on card age.
               qtyAvail = 6;
            else if (age == cAge3)
               qtyAvail = 20;
            else if (age > cAge3)
               qtyAvail = 15;
            totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold);  
            if (kbGetAge() == cAge1)
               totalValue = totalValue / 2.0;
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            break;
         }
         case cUnitTypeCrateofCoinLarge:
         {             
            if (age == cAge2) // May be a mix of large and small crates, and we can't tell.  Make a guess based on card age.
               qtyAvail = 6;
            else if (age == cAge3)
               qtyAvail = 15;
            else if (age > cAge3)
               qtyAvail = 20;
            totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold);  
            if (kbGetAge() == cAge1)
               totalValue = totalValue / 2.0;
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            break;
         }
         case cUnitTypeCrateofFood:
         {
            if (age == cAge2) // May be a mix of large and small crates, and we can't tell.  Make a guess based on card age.
               qtyAvail = 6;
            else if (age == cAge3)
               qtyAvail = 10;
            else if (age > cAge3)
               qtyAvail = 15;
            totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood);
            if (kbGetAge() == cAge1)   // Increase value for rusher, decrease it for boomer
               totalValue = totalValue / econBias;
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            break;
         }
         case cUnitTypeCrateofFoodLarge:
         {
            if (age == cAge2) // May be a mix of large and small crates, and we can't tell.  Make a guess based on card age.            
               qtyAvail = 6;            
            else if (age == cAge3)
               qtyAvail = 10;
            else if (age > cAge3)
               qtyAvail = 15;
            totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood);
            if (kbGetAge() == cAge1)   // Increase value for rusher, decrease it for boomer
               totalValue = totalValue / econBias;
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            break;
         }
         case cUnitTypeCrateofWood:
         {
            if (age == cAge2) // May be a mix of large and small crates, and we can't tell.  Make a guess based on card age.
               qtyAvail = 6;
            else if (age == cAge3)
               qtyAvail = 10;
            else if (age > cAge3)
               qtyAvail = 15;           
            totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood);
            if (kbGetAge() == cAge1)
               totalValue = totalValue / 2.0;
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            break;
         }
         case cUnitTypeCrateofWoodLarge:
         {
            if (age == cAge2) // May be a mix of large and small crates, and we can't tell.  Make a guess based on card age.
               qtyAvail = 6;
            else if (age == cAge3)
               qtyAvail = 10;
            else if (age > cAge3)
               qtyAvail = 15;            
            totalValue = qtyAvail * 35.0 * kbGetAICostWeight(cResourceWood);
            if (kbGetAge() == cAge1)
               totalValue = totalValue / 2.0;
            if (homeBaseUnderAttack == true)
               totalValue = 1.0; // Tiny...ANYTHING else is better
            break;
         }
         case cUnitTypeCow:
         {
            totalValue = 50.0 * qtyAvail;
            if (homeBaseUnderAttack == true)
               totalValue = 1.0;
            break;
         }
         case cUnitTypeSheep:
         {
            totalValue = 20.0 * qtyAvail;
            if (homeBaseUnderAttack == true)
               totalValue = 1.0;
            break;
         }
         default:
         { 
            totalValue = kbGetProtoUnitAICost(unitType) * qtyAvail;

            switch(kbGetCiv())
            { 
                case cCivXPIroquois:
                {
                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSawmills"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFurrierTeam")
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 17;
                      else if (age == cAge3)
                         qtyAvail = 8;
                      else if (age > cAge3)
                         qtyAvail = 5;  
 
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFoodSilosTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   // Handle gold economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRumDistillery")
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }

                   // Handle 'New Ways' (Iroquois)
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPNewWaysIroquois")
                   {
                      if ((homeBaseUnderAttack == true) || (getUnit(cUnitTypeLonghouse, cMyID, cUnitStateAlive) <= 0) || (kbGetAge() < cAge4))
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 1505.0;  }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }
                   }

                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCMedicine") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPMedicineTeam"))
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1250.0;  }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCEngineeringSchool")
                   {
                      if ((homeBaseUnderAttack == true) || (getUnit(cUnitTypeArtilleryDepot, cMyID, cUnitStateAlive) <= 0) || (kbGetAge() < cAge3)) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1310; }                  
                   }
                   // Handle Native military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeWarriors") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeChampionsDutchTeam"))
                   {                      
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }                   
                   }
                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPInfantryDamageIroquois") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPInfantryLOSTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPCavalryHitpointsIroquois") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPSiegeHitpoints") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPInfantryHitpointsIroquois") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPCavalryDamageIroquois") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPSiegeDamage") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPInfantryCombatIroquois") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPSiegeCombat") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPSiegeDiscipline"))
                   {
                      if (kbGetAge() < cAge2)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 1302.0; }
                   }
                   
                   break;
                }
                case cCivXPSioux:
                {
                   // Handle wood economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods")                      
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFoodSilos")
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if ((homeBaseUnderAttack == true) || (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0)) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPEarthBounty")
                   {  
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 2050.0;  }
                   } 

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRidingSchool")
                   {
                      if (getUnit(cUnitTypeCorral, cMyID, cUnitStateAlive) <= 2)
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1405.0;  }
                   }

                   // Handle 'New Ways' (Sioux)
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPNewWaysSioux")
                   {
                      if ((homeBaseUnderAttack == true) || (getUnit(cUnitTypeTeepee, cMyID, cUnitStateAlive) <= 0) || (kbGetAge() < cAge4))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1505.0;  }
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPMustangs")                       
                   {
                      if (homeBaseUnderAttack == true) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1510; }                  
                   }
                   // Handle Native military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeWarriors") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeChampionsDutchTeam"))
                   {                      
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }                   
                   }
                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPCavalryCombatSioux") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPWindRunner") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPCavalryDamageSioux") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPCavalryHitpointsSioux"))
                   {
                      if (kbGetAge() < cAge2)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 1302.0; }
                   }

                   break;
                }
                case cCivXPAztec:
                {
                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPExoticHardwoodsTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSawmills"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFoodSilos") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPChinampa1") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPChinampa2") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCGrainMarket"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if ((homeBaseUnderAttack == true) || (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0)) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }
                   }
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCMedicine") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPMedicineTeam"))
                   {                          
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1250.0;  }
                   }
                   // Handle Native military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeWarriors") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeChampionsDutchTeam"))
                   {                     
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }                   
                   }

                   // Handle navy cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmirality")
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFencingSchool") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPWarHutTraining"))
                   {
                      if (getUnit(cUnitTypeWarHut, cMyID, cUnitStateAlive) <= 3)
                      {  totalValue = 500.0; }
                      else 
                      {  totalValue = 1400.0; }
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPCoyoteCombat") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPScorchedEarth") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPKnightHitpoints") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPRuthlessness") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPKnightDamage") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPKnightCombat"))
                   {
                      if (kbGetAge() < cAge2)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 1302.0; }
                   }

                   break;
                }
                case cCivChinese:
                {
                   // Handle wood economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods")
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRefrigeration") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFoodSilos"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }
                   
                   // Handle gold economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalMint") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCTextileMills") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCigarRoller"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }

                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCSpawnRefugees1") || 
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCSpawnRefugees2") || 
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCSpawnMigrants1"))
                   {
		      if ((kbUnitCount(cMyID, gHouseUnit, cUnitStateABQ) + kbUnitCount(cMyID, cUnitTypeTownCenter, cUnitStateAlive) >= 2 + 3 * kbGetAge()))
                        totalValue = 450 * (kbGetAge() + 1);
                      else
                        totalValue = -2.0;         
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }
                   }


                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCCheapWarAcademyTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCRainbowTrickle") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCConfusciousGift"))
                   {
                      if (homeBaseUnderAttack == true)
                      { totalValue = 1.0; }
                      else 
                      { totalValue = 10000.0; }
                   }

                   // Handle navy cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmirality")
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCBannerSchool") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCAccupuncture"))
                   {
                      if (getUnit(cUnitTypeypWarAcademy, cMyID, cUnitStateAlive) <= 2)
                      {  totalValue = 500.0; }
                      else 
                      {  totalValue = 1450.0; }                       
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCEngineeringSchoolTeam")
                   {
                      if (getUnit(gTowerUnit, cMyID, cUnitStateAlive) <= 2)
                      {  totalValue = 900.0; }
                      else 
                      {  totalValue = 2450.0; }                       
                   }

                   // Handle Native military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCNativeLearning") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCNativeDamage"))
                   {                     
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }                   
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCStandardArmyHitpoints") ||
		       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCOldHanArmyReforms") ||
		       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCHanAntiCavalryBonus") ||
		       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCTerritorialArmyCombat") ||
		       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCMongolianScourge") ||
		       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCForbiddenArmyArmor") ||
		       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCArtilleryCombatChinese") ||
		       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCArtilleryDamageChinese") ||
		       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCArtilleryHitpointsChinese") ||
		       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCManchuCombat") ||
		       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCWesternReforms"))
                   {
                      if (kbGetAge() < cAge2)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 1302.0; }
                   } 

                   break;
                }
                case cCivJapanese:
                {
                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "ypHCSawmills"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRefrigeration") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFoodSilos"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }
                   
                   // Handle gold economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalMint") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCTextileMills") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCigarRoller") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRumDistillery"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }

                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCIncreasedTribute") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCShrineLearning"))
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 10000.0;  }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCChonindoTeam")
                   {                     
                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 10005.0; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCPioneersTeam")
                   {
                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 900.0; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCStoneCastles")
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0;  }
                      if (getUnit(gTowerUnit, cMyID, cUnitStateAlive) >= 2)
                      {  totalValue = 1200.0;  }
                   }
                   // Handle Daimyo cards
                   if ( (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCShipDaimyoSatsuma") ||
                        (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCShipDaimyoAizu") ||
                        (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCShipShogunate") )
                   {
                      totalValue = 10000.0;
                   }

                   if ( (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCBakufu") ||
                        (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCNobleCombat") )
                   {
                      totalValue = 5000.0;
                   }

                   // Handle navy cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmirality")
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle Native military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCNativeLearning") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCNativeIncorporation"))
                   {                     
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }                   
                   }
                   // Handle team cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCCheapUnitUpgradesTeam")
                   {
                      if (kbGetAge() < cAge2)
		      {  continue;  }
                      if ( (homeBaseUnderAttack == true) || (kbGetAge() < cAge4) )
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 2000.0;  }
                   }
                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCYumiDamage") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCYumiRange") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCAshigaruDamage") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCAshigaruAntiCavalryDamage") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCSamuraiDamage") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCSamuraiSpeed") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCNaginataHitpoints") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCNaginataAntiInfantryDamage") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCYabusameDamage") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCYabusameAntiArtilleryDamage") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCArtilleryHitpointsJapanese"))
                   {
                      if (kbGetAge() < cAge2)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 1302.0; }
                   }
   
                   break;
                }
                case cCivIndians:
                {
                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCExoticHardwoodsIndians") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCSawmillsIndians"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCAgrarianism") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCForeignLogging"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 91.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCSustainableAgricultureIndians") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCFoodSilosIndians"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   // Handle gold economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCRoyalMintIndians") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCRumDistilleryIndians"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCAdvancedRicePaddyIndians")
                   {
                      if (gTimeToFarm == true)
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCGoraksha")
                   {
                      if (getUnit(cUnitTypeypSacredField, cMyID, cUnitStateAlive) <= 0)
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 10000.0;  }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCTheRaj")
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 10000.0; }
                   }

                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPMedicineTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCImprovedBuildingsTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCRainbowTrickleTeam"))
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 1005.0; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCGrazing") 
                   {                                            
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 1500.0; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCFencingSchoolIndians")
                   {
                      if (getUnit(cUnitTypeYPBarracksIndian, cMyID, cUnitStateAlive) <= 3)
                      {  totalValue = 500.0; }
                      else 
                      {  totalValue = 1400.0; }
                   }
    
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCRidingSchoolIndians")
                   {
                      if (getUnit(cUnitTypeypCaravanserai, cMyID, cUnitStateAlive) <= 3)
                      {  totalValue = 500.0; }
                      else 
                      {  totalValue = 1405.0; }
                   }

                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCAdvancedConsulateIndians") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCSmoothRelationsIndians"))
                   {
                      if (getUnit(cUnitTypeypConsulate, cMyID, cUnitStateAlive) <= 0)
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1505.0; }
                   }

                   // Handle navy cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCAdmiralityIndians")
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1405.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCElephantTrampling") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCElephantLimit") )
                   {
                      if (homeBaseUnderAttack == true) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1510; }                  
                   }

                   // Handle Native military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCNativeLearningIndians") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCNativeIncorporationIndians"))
                   {                     
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }                   
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCMeleeDamageIndians") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCGurkhaAid") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCInfantrySpeedHitpointsTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCCamelDamageIndians") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCCamelFrightening") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCEastIndiaCompany") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "YPHCElephantCombatIndians") )
                   {
                      if (kbGetAge() < cAge2) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1302.0; }                  
                   }
 
                   break;
                }
                case cCivBritish:
                { 
                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPDistributivism") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSawmills"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRefrigeration") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   // Handle gold economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalMint") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRumDistilleryTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCigarRoller") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCTextileMills"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFastHousesTeam")
                   {
                      if (homeBaseUnderAttack == true) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 2000.0; }                  
                   }
                   
                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHouseEstates")
                   {
                      if (homeBaseUnderAttack == true) 
                      {  totalValue = 1.0; }                                   
                      else
                      {  totalValue = 2400.0; }
                   }

                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }                  
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExtensiveFortifications")
                   {                     
                      if (aiGetGameMode() == cGameModeDeathmatch)
                      {  totalValue = 1550.0; }
                      else
                      {  totalValue = 1350.0; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPFlorenceNightingale")
                   {                     
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 1000.0; }
                   }

                   // Handle 'Advanced Hot Air Balloon'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPAdvancedBalloon")
                   {
                      if ((homeBaseUnderAttack == true) || (cvOkToExplore == false))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1500.0;  }
                   }

                   // Handle navy cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmirality")
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFencingSchool")
                   {
                      if (getUnit(cUnitTypeBarracks, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRidingSchool")
                   {
                      if (getUnit(cUnitTypeStable, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }
                   
                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCImprovedLongbows")
                   {  
                      if (kbGetAge() < cAge3)
                      {  totalValue = 1.0;}
                      else
                      {  totalValue = 2535.0;}
                   }

                   // Handle Native military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeWarriors")
                   {
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCMusketeerGrenadierDamageBritish") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCavalryDamageBritish") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCMusketeerGrenadierHitpointsBritishTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCavalryHitpointsBritish") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCMusketeerGrenadierCombatBritish") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCavalryCombatBritish"))
                   {
                      if (kbGetAge() < cAge2) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1302.0; }                  
                   }

                   break;
                }

                case cCivFrench:
                {
                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPEconomicTheory")
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 2000.0; }
                   }
                   // Handle wood economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPDistributivism")
                   {
                      if (age <= cAge2) 
                         qtyAvail = 17;
                      else if (age == cAge3)
                         qtyAvail = 15;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); 
                   }
                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSawmillsTeam"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }
                   // Handle food economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPColbertism")
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 17;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 8;  
 
                      totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood);
                   }
                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRefrigeration") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFoodSilos"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   // Handle gold economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalMint") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCTextileMills") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCigarRoller") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRumDistillery"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }

                   // Don't use earlier than 40 minutes into the game
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPFurTrade")
                   {  
                      if (xsGetTime() < 60*1000*40)
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 10000.0; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }                  
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExtensiveFortifications")
                   {
                      if (aiGetGameMode() == cGameModeDeathmatch)
                      {  totalValue = 1550.0; }
                      else
                      {  totalValue = 1350.0; }
                   }

                   // Handle 'Advanced Hot Air Balloon'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPAdvancedBalloon")
                   {
                      if ((homeBaseUnderAttack == true) || (cvOkToExplore == false))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1500.0;  }
                   }

                   // Handle navy cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmirality")
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFencingSchool") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCEarlySkirmishersTeam"))
                   {
                      if (getUnit(cUnitTypeBarracks, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRidingSchool")
                   {
                      if (getUnit(cUnitTypeStable, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCEngineeringSchool")
                   {
                      if ((getUnit(cUnitTypeArtilleryDepot, cMyID, cUnitStateAlive) <= 0) || (kbGetAge() < cAge3)) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1300; }                  
                   }

                   // Handle 'Royal Decree'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalDecreeFrench")
                   {
                      if ((homeBaseUnderAttack == true) || (getUnit(cUnitTypeChurch, cMyID, cUnitStateAlive) <= 0) || (kbGetAge() < cAge3))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1510.0;  }
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPThoroughbreds")
                   {
                      if ( (homeBaseUnderAttack == true) || (kbGetAge() <= cAge3) ) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1510; }                  
                   }
                   // Handle Native military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeCombatTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeWarriors") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeCombat"))
                   {
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCavalryCombatFrench") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandCavalryHitpointsFrench") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandCavalryDamageFrenchTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRangedInfantryDamageFrenchTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRangedInfantryHitpointsFrench") || 
                       //(kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeCombatTeam") ||                      
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCWildernessWarfare"))
                   {
                      if (kbGetAge() < cAge2) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1302.0; }                  
                   }
   
                   break;
                }

                case cCivDutch:
                {   
                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSawmills"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }
                   // Handle food economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPColbertism")
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 17;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 8;  
 
                      totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood);
                   }
                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRefrigeration") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFoodSilos"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }                  
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCDutchEastIndiaCompany")
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 2000.0;  }
                   }
                   
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCBanks1") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCBanks2"))
                   {
                      totalValue = 0.0; 
                      if (kbGetBuildLimit(cMyID, cUnitTypeBank) <= kbUnitCount(cMyID, cUnitTypeBank, cUnitStateAlive))
                         totalValue = 1600.0;               
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCBetterBanks")
                   {               
                      if (age < cAge3)                  
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = 1600.0; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdvancedArsenal")
                   {
                      if (getUnit(cUnitTypeArsenal, cMyID, cUnitStateAlive) <= 0)
                      {  totalValue = 500.0; }
                      else
                      {  totalValue = 1300; }
                   }

                   // Handle 'Advanced Hot Air Balloon'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPAdvancedBalloon")
                   {
                      if ((homeBaseUnderAttack == true) || (cvOkToExplore == false))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1500.0;  }
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFencingSchool")
                   {
                      if (getUnit(cUnitTypeBarracks, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }
                 
                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRidingSchool")
                   {
                      if (getUnit(cUnitTypeStable, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle 'Royal Decree'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalDecreeDutch")
                   {
                      if ((homeBaseUnderAttack == true) || (getUnit(cUnitTypeChurch, cMyID, cUnitStateAlive) <= 0) || (kbGetAge() < cAge3))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1510.0;  }
                   }

                   // Handle navy cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmirality")
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPDanceHall")
                   {
                      if (homeBaseUnderAttack == true) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1520.0; }                  
                   }
                   // Handle Native military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeWarriors") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeChampionsDutchTeam"))
                   {
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }
                   }
                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCInfantryDamageDutch") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCInfantryHitpointsDutchTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCInfantryCombatDutch") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCavalryCombatDutch") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCMortarsDamageDutchTeam"))
                   {
                      if (kbGetAge() < cAge2) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1302.0; }                  
                   }

                   break;   
                }

                case cCivSpanish:
                {
                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPEconomicTheory")
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 2000.0; }
                   }

                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSawmills"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRefrigeration") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }
                   // Handle gold economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPCapitalism")
                   { 
                      if (age <= cAge2) 
                         qtyAvail = 20;
                      else if (age == cAge3)
                         qtyAvail = 17;
                      else if (age > cAge3)
                         qtyAvail = 12;  
 
                      totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold);
                   }
                   // Handle gold economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalMint") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCTextileMills") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCigarRoller") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRumDistillery"))                       
                   { 
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }                  
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExtensiveFortifications")
                   {                      
                      if (aiGetGameMode() == cGameModeDeathmatch)
                      {  totalValue = 1550.0; }
                      else
                      {  totalValue = 1350.0; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPUnction")
                   {
                      totalValue = 0.0;
                      if (aiGetGameMode() == cGameModeDeathmatch)
                      {  totalValue = 1500.0; }
                      else
                      {  totalValue = 1300.0; }
                   }

                   // Handle 'Advanced Hot Air Balloon'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPAdvancedBalloon")
                   {
                      if ((homeBaseUnderAttack == true) || (cvOkToExplore == false))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1500.0;  }
                   }

                   // Handle navy cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmirality")
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFencingSchool")
                   {
                      if (getUnit(cUnitTypeBarracks, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRidingSchool")
                   {
                      if (getUnit(cUnitTypeStable, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCArchaicTrainingTeam")
                   {
                      if (getUnit(cUnitTypeBarracks, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1502.0; }                  
                   }

                   // Handle Native military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeWarriors")
                   {
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandInfantryDamageSpanishTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandInfantryHitpointsSpanish") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandInfantryCombatSpanish") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandCavalryHitpointsSpanish") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandCavalryDamageSpanish") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandCavalryCombatSpanish") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCaballeros"))
                   {
                      if (kbGetAge() < cAge2) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1302.0; }                  
                   }

                   break;
                }
 
                case cCivGermans:
                {
                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPEconomicTheory")
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 2000.0; }
                   }

                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }                  
                   }

                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSawmills"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRefrigerationGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgricultureGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFoodSilosTeam"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }
                   // Handle gold economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPCapitalism")
                   {                                            
                      if (age <= cAge2) 
                         qtyAvail = 20;
                      else if (age == cAge3)
                         qtyAvail = 17;
                      else if (age > cAge3)
                         qtyAvail = 12;  
 
                      totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold);
                   }
                   // Handle gold economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalMintGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCTextileMillsGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCigarRollerGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRumDistilleryGerman"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }
                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCGuildArtisans")
                   {
                      if (age <= cAge3) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 2000.0; }                  
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCGermantownFarmers") 
                   { 
                      totalValue = 0.0;
                      if (kbUnitCount(cMyID, cUnitTypeMill, cUnitStateAlive) > 0)
                         totalValue = 2500.0;
                   }
                  
                   // Handle 'Advanced Hot Air Balloon'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPAdvancedBalloon")
                   {
                      if ((homeBaseUnderAttack == true) || (cvOkToExplore == false))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1500.0;  }
                   }

                   // Handle 'Royal Decree'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalDecreeGerman")
                   {
                      if ((homeBaseUnderAttack == true) || (getUnit(cUnitTypeChurch, cMyID, cUnitStateAlive) <= 0) || (kbGetAge() < cAge3))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 6010.0;  }
                   }
                   
                   // Handle navy cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmiralityGerman")
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFencingSchoolGerman")
                   {
                      if (getUnit(cUnitTypeBarracks, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRidingSchoolGerman")
                   {
                      if (getUnit(cUnitTypeStable, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle Native military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeWarriorsGerman")
                   {
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }
                   }
                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRangedInfantryHitpointsGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandInfantryDamageGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandInfantryHitpointsGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCHandInfantryCombatGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCavalryHitpointsGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCavalryDamageGermanTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCavalryCombatGerman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCUhlanCombatGerman"))
                   {
                      if (kbGetAge() < cAge2) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1302.0; }                  
                   }

                   break;
                }
 
                case cCivRussians:
                {
                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPEconomicTheory")
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 2000.0; }
                   }

                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }                  
                   }

                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPDistributivism") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSawmills"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRefrigeration") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFoodSilos"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   // Handle gold economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalMint") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCTextileMills") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCigarRoller") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRumDistillery"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }

                   // Handle 'Advanced Hot Air Balloon'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPAdvancedBalloon")
                   {
                      if ((homeBaseUnderAttack == true) || (cvOkToExplore == false))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1500.0;  }
                   }
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPNationalRedoubt")
                   {
                      if (age <= cAge3)
                      {  totalValue = 0.0;  }
                      else
                      {  totalValue = 10000.0;  }
                   }
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPSevastopol")
                   {
                      if (age == cAge2)
                      {  totalValue = 1500.0;  }
                      else
                      {  totalValue = 1560.0;  }
                   }

                   // Handle navy cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCColdWaterPortTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmirality"))
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCDuelingSchoolTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFencingSchool"))
                   {
                      if (getUnit(cUnitTypeBlockhouse, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRidingSchool")
                   {
                      if (getUnit(cUnitTypeStable, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCStreletsCombatRussian") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSpawnStrelet") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRansack") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCUnicorne") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCUniqueCombatRussian") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCavalryCombatRussian"))
                   { 
                      if (kbGetAge() < cAge2) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1302.0; }                  
                   }
                   break;
                }

                case cCivPortuguese:
                {
                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPEconomicTheory")
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 2000.0; }
                   }

                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }                  
                   }

                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSawmills"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRefrigeration") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   // Handle gold economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalMint") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCTextileMills") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCigarRoller") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRumDistillery"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCImprovedWallsTeam")
                   {
                      if (gBuildWalls == true) 
                      {  totalValue = 5500.0;  }
                      else
                      {  totalValue = 1000.0;  }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdvancedArsenal")
                   {
                      if (getUnit(cUnitTypeArsenal, cMyID, cUnitStateAlive) <= 0)
                      {  totalValue = 500.0; }
                      else
                      {  totalValue = 1300; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCDonatarios")
                   {
                      if (homeBaseUnderAttack == true) 
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1000.0;  }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCMedicine")
                   {                         
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1250.0;  }
                   }
                   // Handle navy cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmirality") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNavigationSchool"))
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   // Handle 'Advanced Hot Air Balloon'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPAdvancedBalloon")
                   {
                      if ((homeBaseUnderAttack == true) || (cvOkToExplore == false))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1500.0;  }
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCFencingSchool")
                   {
                      if (getUnit(cUnitTypeBarracks, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRidingSchool")
                   {
                      if (getUnit(cUnitTypeStable, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCEngineeringSchool")
                   {
                      if ((getUnit(cUnitTypeArtilleryDepot, cMyID, cUnitStateAlive) <= 0) || (kbGetAge() < cAge3)) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1310; }                  
                   }
                   // Handle Native military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeWarriors")
                   {
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }
                   }
                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRangedInfantryHitpointsPortugueseTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRangedInfantryDamagePortuguese") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRangedInfantryCombatPortuguese") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCDragoonCombatPortuguese") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPGenitours") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPRangefinding"))
                   {
                      if (kbGetAge() < cAge2) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1302.0; }                  
                   }

                   break;                
                }

                case cCivOttomans:
                {
                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPEconomicTheory")
                   {
                      if (homeBaseUnderAttack == true)
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 2000.0; }
                   }

                   // Handle economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPLandGrab")
                   {
                      if ( (gTimeToFarm == true) || gTimeForPlantations == true) 
                      {  totalValue = 10000.0;  }
                      else
                      {  totalValue = 905.0;  }                  
                   }

                   // Handle wood economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExoticHardwoods") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSawmills"))
                   {
                      if (age <= cAge2) 
                         qtyAvail = 15;
                      else if (age == cAge3)
                         qtyAvail = 10;
                      else if (age > cAge3)
                         qtyAvail = 8; 

                      if (homeBaseUnderAttack == true)  
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceWood); } 
                   }

                   // Handle food economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRefrigeration") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCSustainableAgriculture"))
                   {                                            
                      if (age == cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gFarmUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceFood); }
                   }

                   // Handle gold economic cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRoyalMint") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCigarRoller"))
                   {                                            
                      if (age <= cAge2) 
                         qtyAvail = 8;
                      else if (age == cAge3)
                         qtyAvail = 12;
                      else if (age > cAge3)
                         qtyAvail = 17;  
 
                      if (getUnit(gPlantationUnit, cMyID, cUnitStateAlive) <= 0) 
                      {  totalValue = 1.0; }
                      else
                      {  totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold); }
                   }
                   // Handle gold economic cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPCapitalism")
                   {                                            
                      if (age <= cAge2) 
                         qtyAvail = 20;
                      else if (age == cAge3)
                         qtyAvail = 17;
                      else if (age > cAge3)
                         qtyAvail = 12;  
 
                      totalValue = qtyAvail * 90.0 * kbGetAICostWeight(cResourceGold);
                   }
                   // Handle navy cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdmirality")
                   {
                      if ( (gNavyMap == true) && (getUnit(cUnitTypeAbstractWarShip, cMyID, cUnitStateAlive) >= 6) )
                      { totalValue = 1505.0; }
                      else 
                      { totalValue = 800.0; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCExtensiveFortifications")
                   {                      
                      if (aiGetGameMode() == cGameModeDeathmatch)
                      {  totalValue = 1550.0; }
                      else
                      {  totalValue = 1350.0; }
                   }

                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCAdvancedArsenal")
                   {
                      if (getUnit(cUnitTypeArsenal, cMyID, cUnitStateAlive) <= 0)
                      {  totalValue = 500.0; }
                      else
                      {  totalValue = 1300; }
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCRidingSchool")
                   {
                      if (getUnit(cUnitTypeStable, cMyID, cUnitStateAlive) < 1) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1450.0; }                  
                   }

                   // Handle military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCEngineeringSchool")
                   {
                      if ((getUnit(cUnitTypeArtilleryDepot, cMyID, cUnitStateAlive) <= 0) || (kbGetAge() < cAge3)) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1320; }                  
                   }

                   // Handle 'Advanced Hot Air Balloon'
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPAdvancedBalloon")
                   {
                      if ((homeBaseUnderAttack == true) || (cvOkToExplore == false))
                      {  totalValue = 1.0;  }
                      else
                      {  totalValue = 1500.0;  }
                   }
                   // Handle Native military cards
                   if (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCNativeWarriors")
                   {
                      if (numTeamTPs >= 2)
                      {  totalValue = 1350.0;  }
                      else
                      {  continue;  }
                   }
                   // Handle military cards
                   if ((kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCJanissaryCombatOttoman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCJanissaryCost") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCCavalryCombatOttoman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCXPIrregulars") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCLightArtilleryHitpointsOttoman") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCArtilleryHitpointsOttomanTeam") ||
                       (kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, i)) == "HCArtilleryDamageOttoman"))
                   {
                      if (kbGetAge() < cAge2) 
                      {  totalValue = 1.0; }
                      else 
                      {  totalValue = 1302.0; }                  
                   }

                   break;        
                }     
            }

            if ( (totalValue < 1.0) && (age >= cAge1) )
            {  // Set a min value based on age
               switch(age)
               {
                  case cAge1:
                  {
                     totalValue = 200.0;
                     break;
                  }
                  case cAge2:
                  {
                     totalValue = 500.0;
                     break;
                  }
                  case cAge3:
                  {
                     totalValue = 900.0;
                     break;
                  }
                  case cAge4:
                  {
                     totalValue = 1300.0;
                     break;
                  }
                  case cAge5:
                  {
                     totalValue = 1300.0;
                     break;
                  }
                  
               }
            }
               
            break;
         }
      }

      // Adjust scores for military units
      isMilitaryUnit = kbProtoUnitIsType(cMyID, unitType, cUnitTypeLogicalTypeLandMilitary);
      if ( (kbGetAge() < cAge3) && (isMilitaryUnit == true) )
         totalValue = totalValue / econBias;  // Adjust value up for pure rusher, down for pure boomer
      if ( (kbGetAge() < cAge2) && (isMilitaryUnit == true) )
         totalValue = 0.0; // No military units before age 2.
      if (unitType == kbUnitPickGetResult(gLandUnitPicker, 0))
         totalValue = totalValue * 1.5;   // It's what we're trying to train
     
      // Adjust score for mercenaries if not enough coin is available.
      if ( (age == cAge2) && (kbProtoUnitIsType(cMyID, unitType, cUnitTypeMercenary) == true) && (kbResourceGet(cResourceGold) < 500) && (homeBaseUnderAttack == true) )
         totalValue = 1.0;   // No Age 2 mercenaries if less than 500 coin is available.
      if ( (age == cAge3) && (kbProtoUnitIsType(cMyID, unitType, cUnitTypeMercenary) == true) && (kbResourceGet(cResourceGold) < 1500) && (homeBaseUnderAttack == true) )
         totalValue = 1.0;   // No Age 3 mercenaries if less than 1500 coin is available.
      if ( (age == cAge4) && (kbProtoUnitIsType(cMyID, unitType, cUnitTypeMercenary) == true) && (kbResourceGet(cResourceGold) < 2500) && (homeBaseUnderAttack == true) )
         totalValue = 1.0;   // No Age 4 mercenaries if less than 2500 coin is available.

      // Adjust score for arsonists (wrongly not classified as mercenaries) if not enough coin is available.
      if ( (age == cAge2) && (kbProtoUnitIsType(cMyID, unitType, cUnitTypeypMercArsonist) == true) && (kbResourceGet(cResourceGold) < 500) && (homeBaseUnderAttack == true) )
         totalValue = 1.0;   // No Age 2 mercenaries if less than 500 coin is available.
      if ( (age == cAge3) && (kbProtoUnitIsType(cMyID, unitType, cUnitTypeypMercArsonist) == true) && (kbResourceGet(cResourceGold) < 1500) && (homeBaseUnderAttack == true) )
         totalValue = 1.0;   // No Age 3 mercenaries if less than 1500 coin is available.
      if ( (age == cAge4) && (kbProtoUnitIsType(cMyID, unitType, cUnitTypeypMercArsonist) == true) && (kbResourceGet(cResourceGold) < 2500) && (homeBaseUnderAttack == true) )
         totalValue = 1.0;   // No Age 4 mercenaries if less than 2500 coin is available.

      aiEcho("    "+i+" "+kbGetProtoUnitName(unitType)+": "+qtyAvail+" total value: "+totalValue);
      if (totalValue > bestUnitScore)
      {
         bestUnitScore = totalValue;
         bestCard = i;
      }
   }

      if (bestCard >= 0)
      {
         if (aiHCDeckGetCardUnitCount(gDefaultDeck, bestCard) > 0)
         {  aiEcho("  Choosing card "+bestCard+", "+aiHCDeckGetCardUnitCount(gDefaultDeck, bestCard)+" "+kbGetUnitTypeName(aiHCDeckGetCardUnitType(gDefaultDeck, bestCard)));  }
         else
         {  aiEcho("  Choosing card "+bestCard+", "+kbGetTechName(aiHCDeckGetCardTechID(gDefaultDeck, bestCard)));  }
	 
         //createSimpleTrainPlan(bestUnitType, 1, cRootEscrowID, -1, 1, true);
	 aiHCDeckPlayCard(bestCard);
      }
}


//==============================================================================
// extraShipMonitor
// Checks for shipments (not just for extra ones!) and calls appropriate handler
//==============================================================================
rule extraShipMonitor
inactive
group tcComplete
minInterval 20
{
   if (kbResourceGet(cResourceShips) > 0)
   {
      if (gRevolutionFlag == false)
      {
         shipGrantedHandler();   // normal shipment handler
      }
      else
      {
         revolutionaryShipmentHandler();  // post-revolution shipment handler
      }
   }
}




void getHCTech(string name="", int techID=-1, int pri=50)
{  // Make a simple plan to research a HC tech.
   int planID = aiPlanCreate(name, cPlanResearch);
   aiPlanSetVariableInt(planID, cResearchPlanTechID, 0, techID);
   aiPlanSetEscrowID(planID, cRootEscrowID);
   aiPlanSetDesiredPriority(planID, pri);
   aiPlanSetActive(planID);
}


 



//==============================================================================
// ShouldIResign
//==============================================================================
rule ShouldIResign
minInterval 7
active
{
   static bool hadHumanAlly = false;
   
   if (gSPC == true)
   {
      xsDisableSelf();
      return;
   }
   
   if (cvOkToResign == false)
   {
      return;     // Early out if we're not allowed to think about this.
   }
   
   // Don't resign if you have a human ally that's still in the game
   int i = 0;
   bool humanAlly = false;    // Set true if we have a surviving human ally.
   int humanAllyID = -1;
   bool complained = false;   // Set flag true if I've already whined to my ally.
   bool wasHumanInGame = false;  // Set true if any human players were in the game
   bool isHumanInGame = false;   // Set true if a human survives.  If one existed but none survive, resign.
   
   // Look for humans
   for (i=1; <=cNumberPlayers)
   {
      if ( kbIsPlayerHuman(i) == true)
      {
         wasHumanInGame = true;
         if ( kbHasPlayerLost(i) == false )
            isHumanInGame = true;
      }
      if ( (kbIsPlayerAlly(i) == true) && (kbHasPlayerLost(i) == false) && (kbIsPlayerHuman(i) == true) )
      {
         humanAlly = true; // Don't return just yet, let's see if we should chat.
         hadHumanAlly = true; // Set flag to indicate that we once had a human ally.
         humanAllyID = i;  // Player ID of lowest-numbered surviving human ally.
      }
   }
   
//   if ( (wasHumanInGame == true) && (isHumanInGame == false) )
   if ( (hadHumanAlly == true) && (humanAlly == false) ) // Resign if my human allies have quit.
   {
      //aiResign(); // If there are no humans left, and this wasn't a bot battle from the start, quit.
      aiEcho("Resigning because I had a human ally, and he's gone...");
      aiResign(); // I had a human ally or allies, but do not any more.  Our team loses.
      return;  // Probably not necessary, but whatever...
   }
   // Check for MP with human allies gone.  This trumps the OkToResign setting, below.
   if ( (aiIsMultiplayer() == true) && (hadHumanAlly == true) && (humanAlly == false) )   
   {  // In a multiplayer game...we had a human ally earlier, but none remain.  Resign immediately
      aiEcho("Resign because my human ally is no longer in the game.");
      aiResign();    // Don't ask, just quit.
      xsEnableRule("resignRetry");
      xsDisableSelf();
      return;
   }


   //Don't resign too soon.
   if (xsGetTime() < 600000)     // 600K = 10 min
     return;

   //Don't resign if we have over 5 active pop slots.
   if (kbGetPop() >= 5)
      return;

   //If we don't have any settlers and we cannot afford anymore, try to resign.
   int numSettlements=kbUnitCount(cMyID, cUnitTypeTownCenter, cUnitStateAlive);   
   int numBuilders=kbUnitCount(cMyID, gEconUnit, cUnitStateAlive);   
   if ( (numBuilders <= 0) && (numSettlements <= 0) && (aiGetFallenExplorerID() >= 0) )
   {
      if (kbCanAffordUnit(cUnitTypeAIStart, cEconomyEscrowID) == false)
      {
		 //
         aiEcho("**** I give up...I can't find an aiStart unit, TC, wagon, explorer or settler.  How do you expect me to play?!");
         aiAttemptResign(cAICommPromptToEnemyMayIResign);
         xsEnableRule("resignRetry");
         xsDisableSelf();
         return;
      }
   }
}


rule resignRetry
inactive
minInterval 240
{
   xsEnableRule("ShouldIResign");
   xsDisableSelf();
}



//==============================================================================
// resignHandler
//==============================================================================
void resignHandler(int result =-1)
{
   aiEcho("***************** Resign handler running with result "+result);
   if (result == 0)
   {

      xsEnableRule("resignRetry");
      return;
   }
   aiEcho("Resign handler returned "+result);

   aiResign();
   return;
}


//not used....
int createTechProgression(int techID = -1, int escrowID = -1, int pri = 50)
{
   int planID = -1;
   if ((techID < 0) || (escrowID < 0))
      return(-1);
   
   planID = aiPlanCreate("Tech Progression "+techID, cPlanProgression);
   if (planID < 0)
      return(-1);
   
   aiPlanSetVariableInt(planID, cProgressionPlanGoalTechID, 0, techID);
   aiPlanSetDesiredPriority(planID, pri);
   aiPlanSetEscrowID(planID, escrowID);
   aiPlanSetBaseID(planID, kbBaseGetMainID(cMyID));
   aiPlanSetActive(planID);
   
   return(planID);
}

rule bigTechManager
group tcComplete
inactive
minInterval 60
{
   if (civIsNative() == false)
   {
      xsDisableSelf();
      return;
   }
   if (xsGetTime() < 28*60*1000)
      return;  // Wait until 28 minutes
   
   if (kbUnitCount(cMyID, cUnitTypeTownCenter, cUnitStateAlive) < 1)
      return;

   aiEcho(" ");
   aiEcho("#### Starting 'big tech' research plans. ####");
   aiEcho(" ");
   
   if (cMyCiv == cCivXPAztec)
   {
      createSimpleResearchPlan(cTechBigFarmCinteotl, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigFirepitFounder, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigPlantationTezcatlipoca, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigWarHutBarometz, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigNoblesHutWarSong, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigHouseCoatlicue, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigDockCipactli, -1, cMilitaryEscrowID, 80);
   }
   else if (cMyCiv == cCivXPIroquois)
   {
      createSimpleResearchPlan(cTechBigFarmStrawberry, -1, cEconomyEscrowID, 80);
      createSimpleResearchPlan(cTechBigPlantationMapleFestival, -1, cEconomyEscrowID, 80);
      createSimpleResearchPlan(cTechBigLonghouseWoodlandDwellers, -1, cEconomyEscrowID, 80);
      createSimpleResearchPlan(cTechBigWarHutLacrosse, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigSiegeshopSiegeDrill, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigCorralHorseSecrets, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigDockRawhideCovers, -1, cMilitaryEscrowID, 80);
   }
   else if (cMyCiv == cCivXPSioux)
   {
      createSimpleResearchPlan(cTechBigCorralBonepipeArmor, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigWarHutWarDrums, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigPlantationGunTrade, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigFarmHorsemanship, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigDockFlamingArrows, -1, cMilitaryEscrowID, 80);
      createSimpleResearchPlan(cTechBigFirepitBattleAnger, -1, cMilitaryEscrowID, 80);
   }
   
   xsDisableSelf();
}




//==============================================================================
// rule lateInAge
//==============================================================================
extern int gLateInAgePlayerID = -1;
extern int gLateInAgeAge = -1;
rule lateInAge
minInterval 120
inactive
{
   // This rule is used to taunt a player who is behind in the age race, but only if
   // he is still in the previous age some time (see minInterval) after the other
   // players have all advanced.  Before activating this rule, the calling function
   // (ageUpHandler) must set the global variables for playerID and age, 
   // gLateInAgePlayerID and gLateInAgeAge.  When the rule finally fires minInterval 
   // seconds later, it checks to see if that player is still behind, and taunts accordingly.
   if (gLateInAgePlayerID < 0)
      return;
   
   if (kbGetAgeForPlayer(gLateInAgePlayerID) == gLateInAgeAge)
   {
      if ( gLateInAgeAge == cAge1 )
      {
         if ( (kbIsPlayerAlly(gLateInAgePlayerID) == true) && (gLateInAgePlayerID != cMyID) )
            sendStatement(gLateInAgePlayerID, cAICommPromptToAllyHeIsAge1Late); 
         if ( (kbIsPlayerEnemy(gLateInAgePlayerID) == true ) )
            sendStatement(gLateInAgePlayerID, cAICommPromptToEnemyHeIsAge1Late);
      }
      else
      {
         if ( (kbIsPlayerAlly(gLateInAgePlayerID) == true) && (gLateInAgePlayerID != cMyID) )
            sendStatement(gLateInAgePlayerID, cAICommPromptToAllyHeIsStillAgeBehind); 
         if ( (kbIsPlayerEnemy(gLateInAgePlayerID) == true ) )
            sendStatement(gLateInAgePlayerID, cAICommPromptToEnemyHeIsStillAgeBehind);
      }
   }
   gLateInAgePlayerID = -1;
   gLateInAgeAge = -1;
   xsDisableSelf();
}


//==============================================================================
// AgeUpHandler
//==============================================================================
void ageUpHandler(int playerID = -1) 
{
   
   int age = kbGetAgeForPlayer(playerID);
   bool firstToAge = true;      // Set true if this player is the first to reach that age, false otherwise
   bool lastToAge = true;         // Set true if this player is the last to reach this age, false otherwise
   int index = 0;
   int slowestPlayer = -1;
   int lowestAge = 100000;
   int lowestCount = 0;          // How many players are still in the lowest age?
   
   //aiEcho("AGE HANDLER:  Player "+playerID+" is now in age "+age);
   
   for (index = 1; < cNumberPlayers)
   {
      if (index != playerID)
      {
         // See if this player is already at the age playerID just reached.
         if (kbGetAgeForPlayer(index) >= age)
            firstToAge = false;  // playerID isn't the first
         if (kbGetAgeForPlayer(index) < age)
            lastToAge = false;   // Someone is still behind playerID.
      }
      if (kbGetAgeForPlayer(index) < lowestAge)
      {
         lowestAge = kbGetAgeForPlayer(index);
         slowestPlayer = index;
         lowestCount = 1;
      }
      else
      {
         if (kbGetAgeForPlayer(index) == lowestAge)
            lowestCount = lowestCount + 1;
      }
   }


   if ( (firstToAge == true) && (age == cAge2) )
   {  // This player was first to age 2
      if ( (kbIsPlayerAlly(playerID) == true) && (playerID != cMyID) )
         sendStatement(playerID, cAICommPromptToAllyHeReachesAge2First); 
      if ( (kbIsPlayerEnemy(playerID) == true ) )
         sendStatement(playerID, cAICommPromptToEnemyHeReachesAge2First);
      return();
   }
   if ( (lastToAge == true) && (age == cAge2) )
   {  // This player was last to age 2
      if ( (kbIsPlayerAlly(playerID) == true) && (playerID != cMyID) )
         sendStatement(playerID, cAICommPromptToAllyHeReachesAge2Last); 
      if ( (kbIsPlayerEnemy(playerID) == true ) )
         sendStatement(playerID, cAICommPromptToEnemyHeReachesAge2Last);
      return();
   }

   // Check to see if there is a lone player that is behind everyone else
   if ( (lowestCount == 1) && (slowestPlayer != cMyID) )
   {
      // This player is slowest, nobody else is still in that age, and it's not me,
      // so set the globals and activate the rule...unless it's already active.
      // This will cause a chat to fire later (currently 120 sec mininterval) if
      // this player is still lagging technologically.
      if (gLateInAgePlayerID < 0)
      {
         if (xsIsRuleEnabled("lateInAge") == false)
         {
            gLateInAgePlayerID = slowestPlayer;
            gLateInAgeAge = lowestAge;
            xsEnableRule("lateInAge");
            return();
         }
      }
   }
   
   // Check to see if ally advanced before me
   if ( (kbIsPlayerAlly(playerID) == true) && (age > kbGetAgeForPlayer(cMyID)) )
   {
      sendStatement(playerID, cAICommPromptToAllyHeAdvancesAhead);   
      return();
   }

   // Check to see if ally advanced before me
   if ( (kbIsPlayerEnemy(playerID) == true) && (age > kbGetAgeForPlayer(cMyID)) )
   {
      sendStatement(playerID, cAICommPromptToEnemyHeAdvancesAhead);   
      return();
   }      

}


/*
   getNuggetChatID()

   Called from the nugget event handler.  Given the player ID, determine what
   type of nugget was just claimed, and return a specific appropriate chat ID, if any.

   If none apply, return the general 'got nugget' chat ID.
*/
int getNuggetChatID(int playerID = -1)
{
   int retVal = cAICommPromptToEnemyWhenHeGathersNugget;
   int type = aiGetLastCollectedNuggetType(playerID);
   int effect = aiGetLastCollectedNuggetEffect(playerID);
   
   switch(type)
   {
      case cNuggetTypeAdjustResource:
      {
         switch(effect)
         {
            case cResourceGold:
            {
               retVal = cAICommPromptToEnemyWhenHeGathersNuggetCoin;
               break;
            }
            case cResourceFood:
            {
               retVal = cAICommPromptToEnemyWhenHeGathersNuggetFood;
               break;
            }
            case cResourceWood:
            {
               retVal = cAICommPromptToEnemyWhenHeGathersNuggetWood;
               break;
            }
         }
         break;
      }
      case cNuggetTypeSpawnUnit:
      {
         if ( (effect == cUnitTypeNatMedicineMan) || 
              (effect == cUnitTypeNatClubman) || 
              (effect == cUnitTypeNatRifleman) || 
              (effect == cUnitTypeNatHuaminca) || 
              (effect == cUnitTypeNatTomahawk) || 
              (effect == cUnitTypeNativeScout) || 
              (effect == cUnitTypeNatEagleWarrior) )
         {
            retVal = cAICommPromptToEnemyWhenHeGathersNuggetNatives;
         }
         if ( (effect == cUnitTypeSettler) || (effect == cUnitTypeCoureur) || (effect == cUnitTypeSettlerNative) || (effect == cUnitTypeypSettlerAsian) || (effect == cUnitTypeypSettlerIndian) )
            retVal = cAICommPromptToEnemyWhenHeGathersNuggetSettlers;
         break;
      }
      case cNuggetTypeGiveLOS:
      {
         break;
      }
      case cNuggetTypeAdjustSpeed:
      {
         break;
      }
      case cNuggetTypeAdjustHP:
      {
         break;
      }
      case cNuggetTypeConvertUnit:
      {
         if ( (effect == cUnitTypeNatMedicineMan) || 
              (effect == cUnitTypeNatClubman) || 
              (effect == cUnitTypeNatRifleman) || 
              (effect == cUnitTypeNatHuaminca) || 
              (effect == cUnitTypeNatTomahawk) || 
              (effect == cUnitTypeNativeScout) || 
              (effect == cUnitTypeNatEagleWarrior) )
         {
            retVal = cAICommPromptToEnemyWhenHeGathersNuggetNatives;
         }
         if ( (effect == cUnitTypeSettler) || (effect == cUnitTypeCoureur) || (effect == cUnitTypeSettlerNative) || (effect == cUnitTypeypSettlerAsian) || (effect == cUnitTypeypSettlerIndian) )
            retVal = cAICommPromptToEnemyWhenHeGathersNuggetSettlers;
         break;
      }
   }
   
   
   return(retVal);
}




//==============================================================================
// nuggetHandler
//==============================================================================
void nuggetHandler(int playerID =-1)
{
   if (kbGetAge() > cAge2)
      return;  // Do not send these chats (or even bother keeping count) after age 2 ends.
	//aiEcho("***************** Nugget handler running with playerID"+playerID);   
   static int nuggetCounts = -1;    // Array handle.  nuggetCounts[i] will track how many nuggets each player has claimed
   static int totalNuggets = 0;
   const int  cNuggetRange = 300;   // Nuggets within this many meters of a TC are "owned".
   int defaultChatID = getNuggetChatID(playerID);
   
   if ( (playerID < 1) || (playerID > cNumberPlayers) )
      return;
   
   // Initialize the array if we haven't done this before.
   if (nuggetCounts < 0)
   {
      nuggetCounts = xsArrayCreateInt(cNumberPlayers, 0, "Nugget Counts");
   }
   
   // Score this nugget
   totalNuggets = totalNuggets + 1;
   xsArraySetInt(nuggetCounts, playerID, xsArrayGetInt(nuggetCounts, playerID) + 1);
   
   // Check to see if one of the special-case chats might be appropriate.
   // If so, use it, otherwise, fall through to the generic ones.
   // First, some bookkeeping
   int i = 0;
   int count = 0;
   int lowestPlayer = -1;
   int lowestCount = 100000;  // Insanely high start value, first pass will reset it.
   int totalCount = 0;
   int averageCount = 0;
   int highestPlayer = -1;
   int highestCount = 0;
   for (i=1; <cNumberPlayers)
   {
      count = xsArrayGetInt(nuggetCounts, i,);  // How many nuggets has player i gathered?
      if ( count < lowestCount )
      {
         lowestCount = count;
         lowestPlayer = i;
      }
      if ( count > highestCount )
      {
         highestCount = count;
         highestPlayer = i;
      }
      totalCount = totalCount + count; 
   }
   averageCount = totalCount / (cNumberPlayers - 1);
   
   if (totalCount == 1) // This is the first nugget in the game
   {
      if(playerID != cMyID)
      {
         if(kbIsPlayerAlly(playerID) == true)
         {
            sendStatement(playerID, cAICommPromptToAllyWhenHeGathersFirstNugget); 
            return;
         }
         else
         {
            sendStatement(playerID, cAICommPromptToEnemyWhenHeGathersFirstNugget);
            return;
         }
      }
   }
   
   int playersCount = 0;
   int myCount = 0;
   myCount = xsArrayGetInt(nuggetCounts, cMyID);
   playersCount = xsArrayGetInt(nuggetCounts, playerID);
   // Check if this player is way ahead of me, i.e. 2x my total and ahead by at least 2
   if ( ((playersCount - myCount) >= 2) && (playersCount >= (myCount*2)) )
   {
      if(kbIsPlayerAlly(playerID) == true)
      {
         sendStatement(playerID, cAICommPromptToAllyWhenHeGathersNuggetHeIsAhead); 
         return;
      }
      else
      {
         sendStatement(playerID, cAICommPromptToEnemyWhenHeGathersNuggetHeIsAhead);
         return;
      }
   }

   // Check if I'm way ahead of any other players
   int player = 0;      // Loop counter...who might I send a message to
   bool messageSent = false;
   if (playerID == cMyID)
   {
      for (player = 1; <cNumberPlayers)
      {
         playersCount = xsArrayGetInt(nuggetCounts, player);
         if ( ((myCount - playersCount) >= 2) && (myCount >= (playersCount*2)) )
         {
            if(kbIsPlayerAlly(player) == true)
            {
               sendStatement(player, cAICommPromptToAllyWhenIGatherNuggetIAmAhead); 
               messageSent = true;
            }
            else
            {
               sendStatement(player, cAICommPromptToEnemyWhenIGatherNuggetIAmAhead);
               messageSent = true;
            }
         }  
      }
   }
   if (messageSent == true)
      return;
   
   // Check to see if the nugget was gathered near a main base.  
   // For now, check playerID's explorer location, assume nugget was gathered there.
   // Later, we may add location info to the event handler.
   vector explorerPos = cInvalidVector;
   int explorerID = -1;
   int tcID = -1;
   
   explorerID = getUnit(cUnitTypeExplorer, playerID, cUnitStateAlive);
   if (explorerID < 0)
      explorerID = getUnit(cUnitTypexpAztecWarchief, playerID, cUnitStateAlive);
   if (explorerID < 0)
      explorerID = getUnit(cUnitTypexpIroquoisWarChief, playerID, cUnitStateAlive);
   if (explorerID < 0)
      explorerID = getUnit(cUnitTypexpLakotaWarchief, playerID, cUnitStateAlive);
   if (explorerID < 0)
      explorerID = getUnit(cUnitTypeypMonkChinese, playerID, cUnitStateAlive);
   if (explorerID < 0)
      explorerID = getUnit(cUnitTypeypMonkIndian, playerID, cUnitStateAlive);
   if (explorerID < 0)
      explorerID = getUnit(cUnitTypeypMonkIndian2, playerID, cUnitStateAlive);
   if (explorerID < 0)
      explorerID = getUnit(cUnitTypeypMonkJapanese, playerID, cUnitStateAlive);
   if (explorerID < 0)
      explorerID = getUnit(cUnitTypeypMonkJapanese2, playerID, cUnitStateAlive);
   if (explorerID >= 0) // We know of an explorer, war chief or Asian monk for this player
   {
      if (kbUnitVisible(explorerID) == true)
      {  // And we can see him.
         explorerPos = kbUnitGetPosition(explorerID);
         if (playerID == cMyID)
         {  // I gathered the nugget
            // Get nearest ally TC distance
            tcID = getUnitByLocation(cUnitTypeTownCenter, cPlayerRelationAlly, cUnitStateAlive, explorerPos, cNuggetRange);
            if ( (tcID > 0) && (kbUnitGetPlayerID(tcID) != cMyID) )
            {  // A TC is near, owned by an ally, and it's not mine...
               sendStatement(kbUnitGetPlayerID(tcID), cAICommPromptToAllyWhenIGatherNuggetHisBase); // I got a nugget near his TC
               return;
            }
            // Get nearest enemy TC distance
            tcID = getUnitByLocation(cUnitTypeTownCenter, cPlayerRelationEnemy, cUnitStateAlive, explorerPos, cNuggetRange);
            if ( tcID > 0 )
            {  // A TC is near, owned by an enemy...
               sendStatement(kbUnitGetPlayerID(tcID), cAICommPromptToEnemyWhenIGatherNuggetHisBase); // I got a nugget near his TC
               return;
            }
         }
         else 
         {
            if (kbIsPlayerAlly(playerID) == true)
            {  // An ally has found a nugget, see if it's close to my TC
               tcID = getUnitByLocation(cUnitTypeTownCenter, cMyID, cUnitStateAlive, explorerPos, cNuggetRange);   
               if (tcID > 0)
               {  // That jerk took my nugget!
                  sendStatement(playerID, cAICommPromptToAllyWhenHeGathersNuggetMyBase); // He got one in my zone
                  return;
               }
            }
            else 
            {  // An enemy has found a nugget, see if it's in my zone
               tcID = getUnitByLocation(cUnitTypeTownCenter, cMyID, cUnitStateAlive, explorerPos, cNuggetRange);   
               if (tcID > 0)
               {  // That jerk took my nugget!
                  sendStatement(playerID, cAICommPromptToEnemyWhenHeGathersNuggetMyBase); // He got one in my zone
                  return;      
               }
            }
         }     // if me else
      }  // If explorer is visible to me
   }  // If explorer known
   
   // No special events fired, so go with generic messages
   // defaultChatID has the appropriate chat if an enemy gathered the nugget...send it.
   // Otherwise, convert to the appropriate case.
	if (playerID != cMyID)
	{
	    if (kbIsPlayerEnemy(playerID) == true)
	    {
	        sendStatement(playerID, defaultChatID);
	    }
	    else
	    {  // Find out what was returned, send the equivalent ally version
         switch(defaultChatID)
         {
            case cAICommPromptToEnemyWhenHeGathersNugget:
            {
               sendStatement(playerID, cAICommPromptToAllyWhenHeGathersNugget); 
               break;
            }
            case cAICommPromptToEnemyWhenHeGathersNuggetCoin:
            {
               sendStatement(playerID, cAICommPromptToAllyWhenHeGathersNuggetCoin); 
               break;
            }
            case cAICommPromptToEnemyWhenHeGathersNuggetFood:
            {
               sendStatement(playerID, cAICommPromptToAllyWhenHeGathersNuggetFood); 
               break;
            }
            case cAICommPromptToEnemyWhenHeGathersNuggetWood:
            {
               sendStatement(playerID, cAICommPromptToAllyWhenHeGathersNuggetWood); 
               break;
            }
            case cAICommPromptToEnemyWhenHeGathersNuggetNatives:
            {
               sendStatement(playerID, cAICommPromptToAllyWhenHeGathersNuggetNatives); 
               break;
            }
            case cAICommPromptToEnemyWhenHeGathersNuggetSettlers:
            {
               sendStatement(playerID, cAICommPromptToAllyWhenHeGathersNuggetSettlers); 
               break;
            }
         }
		}
	}
	else
	{
		//-- I gathered the nugget.  Figure out what kind it is based on the defaultChatID enemy version.
      // Substitute appropriate ally and enemy chats.
      switch(defaultChatID)
      {
         case cAICommPromptToEnemyWhenHeGathersNugget:
         {
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyWhenIGatherNugget);
            sendStatement(cPlayerRelationEnemy, cAICommPromptToEnemyWhenIGatherNugget);
            break;
         }
         case cAICommPromptToEnemyWhenHeGathersNuggetCoin:
         {
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyWhenIGatherNuggetCoin);
            sendStatement(cPlayerRelationEnemy, cAICommPromptToEnemyWhenIGatherNuggetCoin);
            break;
         }
         case cAICommPromptToEnemyWhenHeGathersNuggetFood:
         {
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyWhenIGatherNuggetFood);
            sendStatement(cPlayerRelationEnemy, cAICommPromptToEnemyWhenIGatherNuggetFood);
            break;
         }
         case cAICommPromptToEnemyWhenHeGathersNuggetWood:
         {
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyWhenIGatherNuggetWood);
            sendStatement(cPlayerRelationEnemy, cAICommPromptToEnemyWhenIGatherNuggetWood);
            break;
         }
         case cAICommPromptToEnemyWhenHeGathersNuggetNatives:
         {
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyWhenIGatherNuggetNatives);
            sendStatement(cPlayerRelationEnemy, cAICommPromptToEnemyWhenIGatherNuggetNatives);
            break;
         }
         case cAICommPromptToEnemyWhenHeGathersNuggetSettlers:
         {
            sendStatement(cPlayerRelationAlly, cAICommPromptToAllyWhenIGatherNuggetSettlers);
            sendStatement(cPlayerRelationEnemy, cAICommPromptToEnemyWhenIGatherNuggetSettlers);
            break;
         }
      }
	}

	return;
}




rule monitorFeeding
inactive
minInterval 60
{
   // Once a minute, check the global vars to see if there is somebody we need
   // to be sending resources to.  If so, send whatever we have in root.  If not,
   // go to sleep.
   // Feeding is not allowed before Age 2 is reached, or after revolting
   bool stayAwake = false; // Set true if we have orders to feed anything, keeps rule active.
   float toSend = 0.0;
   bool goldSent = false;  // Used for choosing chat at end.
   bool woodSent = false;
   bool foodSent = false;
   bool failure = false;
   int failPlayerID = -1;
   
   // Ignore already eliminated players
   if (kbHasPlayerLost(gFeedGoldTo) == true)
      gFeedGoldTo = 0;
   if (kbHasPlayerLost(gFeedWoodTo) == true)
      gFeedWoodTo = 0;
   if (kbHasPlayerLost(gFeedFoodTo) == true)
      gFeedFoodTo = 0;

   if (gFeedGoldTo > 0)
   {
      stayAwake = true; // There is work to do, stay active.
      toSend = 0.0;
      if (aiResourceIsLocked(cResourceGold) == false)
      {
         kbEscrowFlush(cEconomyEscrowID, cResourceGold, false);
         kbEscrowFlush(cMilitaryEscrowID, cResourceGold, false);
         toSend = kbEscrowGetAmount(cRootEscrowID, cResourceGold) * .85;   // Round down for trib penalty
      }
      if ((toSend > 100.0) && (kbGetAge() >= cAge2) && (gRevolutionFlag == false))
      {  // can send something
         goldSent = true;
         gLastTribSentTime = xsGetTime();
         if (toSend > 1000.0)
            toSend = 1000;
         if (toSend > 200.0)
            aiTribute(gFeedGoldTo, cResourceGold, toSend/2);
         else
            aiTribute(gFeedGoldTo, cResourceGold, 100.0);
      }
      else
      {
         failure = true;
         failPlayerID = gFeedGoldTo;
      }
      stayAwake = true; // There is work to do, stay active.
   }
   
   if (gFeedWoodTo > 0)
   {
      stayAwake = true; // There is work to do, stay active.
      toSend = 0.0;
      if (aiResourceIsLocked(cResourceWood) == false)
      {
         kbEscrowFlush(cEconomyEscrowID, cResourceWood, false);
         kbEscrowFlush(cMilitaryEscrowID, cResourceWood, false);
         toSend = kbEscrowGetAmount(cRootEscrowID, cResourceWood) * .85;   // Round down for trib penalty
      }
      if ((toSend > 100.0) && (kbGetAge() >= cAge2) && (gRevolutionFlag == false))
      {  // can send something
         gLastTribSentTime = xsGetTime();
         woodSent = true;
         if (toSend > 1000.0)
            toSend = 1000;
         if (toSend > 200.0)
            aiTribute(gFeedWoodTo, cResourceWood, toSend/2);
         else
            aiTribute(gFeedWoodTo, cResourceWood, 100.0);
      }
      else
      {
         failure = true;
         failPlayerID = gFeedWoodTo;
      }
      stayAwake = true; // There is work to do, stay active.
   }
   
   if (gFeedFoodTo > 0)
   {
      stayAwake = true; // There is work to do, stay active.
      toSend = 0.0;
      if (aiResourceIsLocked(cResourceFood) == false)
      {
         kbEscrowFlush(cEconomyEscrowID, cResourceFood, false);
         kbEscrowFlush(cMilitaryEscrowID, cResourceFood, false);
         toSend = kbEscrowGetAmount(cRootEscrowID, cResourceFood) * .85;   // Round down for trib penalty
      }
      if ((toSend > 100.0) && (kbGetAge() >= cAge2) && (gRevolutionFlag == false))
      {  // can send something
         gLastTribSentTime = xsGetTime();
         foodSent = true;
         if (toSend > 1000.0)
            toSend = 1000;
         if (toSend > 200.0)
            aiTribute(gFeedFoodTo, cResourceFood, toSend/2);
         else
            aiTribute(gFeedFoodTo, cResourceFood, 100.0);
      }
      else
      {
         failure = true;
         failPlayerID = gFeedFoodTo;
      }
      stayAwake = true; // There is work to do, stay active.
   }
   
   int tributes = 0;
   if (goldSent == true)
      tributes = tributes + 1;
   if (woodSent == true)
      tributes = tributes + 1;
   if (foodSent == true)
      tributes = tributes + 1;
         
   if (stayAwake == false)
   {
      aiEcho("Disabling monitorFeeding rule.");
      xsDisableSelf();  // No work to do, go to sleep.
   }
}


extern int gMissionToCancel = -1;   // Function returns # of units available, sets global var so commhandler can kill the mission if needed.
int unitCountFromCancelledMission(int oppSource = cOpportunitySourceAllyRequest)
{
   int retVal = 0;   // Number of military units available
   gMissionToCancel = -1;
   
   if (oppSource == cOpportunitySourceTrigger)
      return(0); // DO NOT mess with scenario triggers
   
   int planCount = aiPlanGetNumber(cPlanMission, cPlanStateWorking, true);
   int plan = -1;
   int childPlan = -1;
   int oppID = -1;
   int pri = -1;

   
   aiEcho(planCount+" missions found");
   for (i=0; < planCount)
   {
      plan = aiPlanGetIDByIndex(cPlanMission, cPlanStateWorking, true, i);
      if (plan < 0)
         continue;
      childPlan = aiPlanGetVariableInt(plan, cMissionPlanPlanID, 0);
      oppID = aiPlanGetVariableInt(plan, cMissionPlanOpportunityID, 0);
      aiEcho("  Examining mission "+plan);
      aiEcho("    Child plan is "+childPlan);
      aiEcho("    Opp ID is "+oppID);
      pri = aiGetOpportunitySourceType(oppID);
      aiEcho("    Opp priority is "+pri+", incoming command is "+oppSource);
      if ( (pri > cOpportunitySourceAutoGenerated) && (pri <= oppSource) ) // This isn't an auto-generated opp, and the incoming command has sufficient rank.
      {
         aiEcho("  This is valid to cancel.");
         gMissionToCancel = plan;   // Store this so commHandler can kill it.
         aiEcho("    Child plan has "+aiPlanGetNumberUnits(childPlan, cUnitTypeLogicalTypeLandMilitary)+" units.");
         retVal = aiPlanGetNumberUnits(childPlan, cUnitTypeLogicalTypeLandMilitary);
      }
      else
      {
         aiEcho("Cannot cancel mission "+plan);
         retVal = 0;
      }
   }   
   return(retVal);
}


//==============================================================================
// commHandler
//==============================================================================
void commHandler(int chatID =-1)
{
   // Set up our parameters in a convenient format...
   int fromID = aiCommsGetSendingPlayer(chatID);         // Which player sent this?
   int verb = aiCommsGetChatVerb(chatID);                // Verb, like cPlayerChatVerbAttack or cPlayerChatVerbDefend
   int targetType = aiCommsGetChatTargetType(chatID);    // Target type, like cPlayerChatTargetTypePlayers or cPlayerChatTargetTypeLocation
   int targetCount = aiCommsGetTargetListCount(chatID);  // How many targets?
   static int targets = -1;                              // Array handle for target array.
   vector location = aiCommsGetTargetLocation(chatID);   // Target location
   int firstTarget = -1;
   static int  targetList = -1;
   int opportunitySource = cOpportunitySourceAllyRequest;             // Assume it's from a player unless we find out it's player 0, Gaia, indicating a trigger
   int newOppID = -1;
   
   //string content=aiCommsGetChatString(chatID);
   if (fromID == 0)  // Gaia sent this 
      opportunitySource = cOpportunitySourceTrigger;
   
   if (fromID == cMyID)
      return;  // DO NOT react to echoes of my own commands/requests.
   
   if ( (kbIsPlayerEnemy(fromID) == true) && (fromID != 0) )
      return;  // DO NOT accept messages from enemies.
   
   if (targets < 0)
   {
      aiEcho("Creating comm handler target array.");
      targets = xsArrayCreateInt(30, -1, "Chat targets");
      aiEcho("Create array int returns "+targets);
   }  
   
   // Clear, then fill targets array
   int i=0;
   for (i=0; <30)
      xsArraySetInt(targets, i, -1);
   
   if (targetCount > 30)
      targetCount = 30; // Stay within array bounds
   for (i=0; <targetCount)
      xsArraySetInt(targets, i, aiCommsGetTargetListItem(chatID, i));
   
   if (targetCount > 0)
      firstTarget = xsArrayGetInt(targets, 0);
   
   // Spew
   aiEcho(" ");
   aiEcho(" ");
   echoMessage("***** Incoming communication *****");
   aiEcho("From: "+fromID+",  verb: "+verb+",  targetType: "+targetType+",  targetCount: "+targetCount);
   for (i=0; <targetCount)
      aiEcho("        "+xsArrayGetInt(targets, i));
   aiEcho("Vector: "+location);
   aiEcho(" ");
   aiEcho("***** End of communication *****");
   
   switch(verb)      // Parse this message starting with the verb
   {
      case cPlayerChatVerbAttack: 
      {     // "Attack" from an ally player could mean attack enemy base, defend my base, or claim empty VP Site.  
            // Attack from a trigger means attack unit list.
            // Permission checks need to be done inside the inner switch statement, as cvOkToAttack only affects true attack commands.
         int militaryAvail = unitCountFromCancelledMission(opportunitySource);
         int reserveAvail = aiPlanGetNumberUnits(gLandReservePlan, cUnitTypeLogicalTypeLandMilitary);
         int totalAvail = militaryAvail + reserveAvail;
         aiEcho("Plan units available: "+militaryAvail+", reserve ="+reserveAvail+", good army size is "+gGoodArmyPop); 
         if(opportunitySource == cOpportunitySourceAllyRequest)
         {  // Don't mess with triggers this late in development
            if (totalAvail < 3)
            {
               aiEcho("Sorry, no units available.");
               // chat "no units" and bail
               sendStatement(fromID, cAICommPromptToAllyDeclineNoArmy);
               return;
            }
            if ( aiTreatyActive() == true )
            {
               aiEcho("Can't attack under treaty.");
               sendStatement(fromID, cAICommPromptToAllyDeclineProhibited);
               return;
            }
            else
            {
               if (totalAvail < (gGoodArmyPop/2))
               {
                  aiEcho("Sorry, not enough units.");
                  // chat "not enough army units" and bail
                  sendStatement(fromID, cAICommPromptToAllyDeclineSmallArmy);
                  return;
               }
            }
            // If we get here, it's not a trigger, but we do have enough units to go ahead.
            // See if cancelling an active mission is really necessary.
            if ( (reserveAvail > gGoodArmyPop) || (gMissionToCancel < 0) )
            {
               aiEcho("Plenty in reserve, no need to cancel...or no mission to cancel.");
            }
            else
            {
               aiEcho("Not enough military units, need to destroy mission "+gMissionToCancel);
               aiPlanDestroy(gMissionToCancel); // Cancel the active mission.
            }
         }
         switch(targetType)
         {
            case cPlayerChatTargetTypeLocation:
            {
               //-- Figure out what is in the this area, and do the correct thing.
               //-- Find nearest base and vpSite, and attack/defend/claim as appropriate.
               int closestBaseID = kbFindClosestBase(cPlayerRelationAny, location);     // If base is ally, attack point/radius to help out
               int closestVPSite = getClosestVPSite(location, cVPAll, cVPStateAny, -1);
               
               if ( (closestVPSite >= 0) && (distance(location, kbVPSiteGetLocation(closestVPSite)) < 20.0))
               {  // Near a VP site...this is a claim opportunity
                  newOppID = createOpportunity(cOpportunityTypeClaim, cOpportunityTargetTypeVPSite, closestVPSite, -1, opportunitySource);
                  sendStatement(fromID, cAICommPromptToAllyConfirm);
                  aiActivateOpportunity(newOppID, true);
                  break;   // We've created an Opp, we're done.
               }
               if( (closestBaseID != -1) && (distance(location, kbBaseGetLocation(kbBaseGetOwner(closestBaseID),closestBaseID)) < 50.0) )
               {  // Command is inside a base.  If enemy, base attack.  If ally, point/radius attack.
                  if (kbIsPlayerAlly( kbBaseGetOwner(closestBaseID) ) == false)
                  {  // This is an enemy base, create a base attack opportunity
                     if ( (cvOkToAttack == false) && (opportunitySource == cOpportunitySourceAllyRequest) )  // Attacks prohibited unless it's a trigger
                     {
                        // bail out, we're not allowed to do this.
                        sendStatement(fromID, cAICommPromptToAllyDeclineProhibited);
                        aiEcho("ERROR:  We're not allowed to attack.");
                        return();
                        break;
                     }
                     newOppID = createOpportunity(cOpportunityTypeDestroy, cOpportunityTargetTypeBase, closestBaseID, kbBaseGetOwner(closestBaseID), opportunitySource);
                     sendStatement(fromID, cAICommPromptToAllyConfirm, kbBaseGetLocation(kbBaseGetOwner(closestBaseID),closestBaseID));
                  }
                  if ( (gBaseAttackPlan >= 0) && (distance(gBaseAttackLocation, kbBaseGetLocation(kbBaseGetOwner(closestBaseID), closestBaseID)) > 70.0) )
		  {
	             aiPlanDestroy(gBaseAttackPlan);
		     gBaseAttackPlan = -1;
		     sendChatToAllies("I've terminate last base attack plan to back you up.");
		  }
															
		  if (gBaseAttackPlan < 0)
		  {
		     gBaseAttackPlan = aiPlanCreate("gBaseAttackPlan", cPlanAttack);
		     gBaseAttackLocation = kbBaseGetLocation(kbBaseGetOwner(closestBaseID),closestBaseID);
		     aiPlanSetVariableInt(gBaseAttackPlan, cAttackPlanPlayerID, 0, kbBaseGetOwner(closestBaseID));
		     aiPlanSetNumberVariableValues(gBaseAttackPlan, cAttackPlanTargetTypeID, 2, true);
		     aiPlanSetVariableInt(gBaseAttackPlan, cAttackPlanTargetTypeID, 0, cUnitTypeLogicalTypeLandMilitary);
		     aiPlanSetVariableInt(gBaseAttackPlan, cAttackPlanTargetTypeID, 1, cUnitTypeAbstractVillager);
		     aiPlanSetVariableVector(gBaseAttackPlan, cAttackPlanGatherPoint, 0, gBaseAttackLocation);
		     aiPlanSetVariableFloat(gBaseAttackPlan, cAttackPlanGatherDistance, 0, 50.0);
		     aiPlanSetVariableInt(gBaseAttackPlan, cAttackPlanRefreshFrequency, 0, 3);
		     aiPlanSetDesiredPriority(gBaseAttackPlan, 90);
		     //aiPlanSetInitialPosition(gBaseAttackPlan, kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID)));
		     aiPlanAddUnitType(gBaseAttackPlan, cUnitTypeLogicalTypeLandMilitary, totalAvail, totalAvail, totalAvail);
		     aiPlanAddUnitType(gBaseAttackPlan, cUnitTypexpMedicineManAztec, 0, 0, 0);
                     sendStatement(fromID, cAICommPromptToAllyConfirm, gBaseAttackLocation);
		     sendChatToAllies("At Once!");
		     aiPlanSetActive(gBaseAttackPlan);
		  }
                  else
                  {  // Ally base, so do attack point/radius here.
                     newOppID = createOpportunity(cOpportunityTypeDefend, cOpportunityTargetTypeBase, closestBaseID, kbBaseGetOwner(closestBaseID), opportunitySource);
                     aiSetOpportunityLocation(newOppID, kbBaseGetLocation(kbBaseGetOwner(closestBaseID),closestBaseID));
                     aiSetOpportunityRadius(newOppID, 50.0);                     
                     sendStatement(fromID, cAICommPromptToAllyIWillHelpDefend, location);
                     //createOpportunity(int type, int targettype, int targetID, int targetPlayerID, int source ): 
                  }
                  aiActivateOpportunity(newOppID, true);
                  break;   // We've created an Opp, we're done.
               }  

               // If we're here, it's not a VP site, and not an enemy or ally base - basically open map.
               // Create a point/radius destroy opportunity.
               newOppID = createOpportunity(cOpportunityTypeDestroy, cOpportunityTargetTypePointRadius, -1, chooseAttackPlayerID(location, 50.0), opportunitySource);
               aiSetOpportunityLocation(newOppID, location);
               aiSetOpportunityRadius(newOppID, 50.0);
               aiActivateOpportunity(newOppID, true);                     
               sendStatement(fromID, cAICommPromptToAllyConfirm);               
               break;   
            }  // case targetType location
            case cPlayerChatTargetTypeUnits:
            {  // This is a trigger command to attack a unit list.
               newOppID = createOpportunity(cOpportunityTypeDestroy, cOpportunityTargetTypeUnitList, targets, chooseAttackPlayerID(location, 50.0), opportunitySource);
               aiSetOpportunityLocation(newOppID, location);
               aiSetOpportunityRadius(newOppID, 50.0);    
               aiActivateOpportunity(newOppID, true);                 
               sendStatement(fromID, cAICommPromptToAllyConfirm);               
               break;
            }
            default:
            {  // Not recognized
               sendStatement(fromID, cAICommPromptToAllyDeclineGeneral);  
               aiEcho("ERROR!  Target type "+targetType+" not recognized.");
               return();   // Don't risk sending another chat...
               break;
            }
         }  // end switch targetType
         break;   
      }  // end verb attack
      
      case cPlayerChatVerbTribute:
      {
         if ( opportunitySource == cOpportunitySourceAllyRequest )
         {
            aiEcho("    Command was to tribute to player "+fromID+".  Resource list:");
            bool alreadyChatted = false;
            for (i=0; < targetCount)
            {
               float amountAvailable = 0.0;
               if (xsArrayGetInt(targets, i) == cResourceGold)
               {
                  kbEscrowFlush(cEconomyEscrowID, cResourceGold, false);
                  kbEscrowFlush(cMilitaryEscrowID, cResourceGold, false);
                  amountAvailable = kbEscrowGetAmount(cRootEscrowID, cResourceGold) * .85;   // Leave room for tribute penalty
                  if (aiResourceIsLocked(cResourceGold) == true)
                     amountAvailable = 0.0;
                  if ((amountAvailable > 100.0) && (kbGetAge() >= cAge2) && (gRevolutionFlag == false))
                  {  // We will tribute something
                     if (alreadyChatted == false)
                     {
                        sendStatement(fromID, cAICommPromptToAllyITributedCoin);  
                        alreadyChatted = true;
                     }
                     gLastTribSentTime = xsGetTime();
                     if (amountAvailable > 1000.0)
                        amountAvailable = 1000+(amountAvailable-1000)/2; //Tribute more
                     if (amountAvailable > 200.0)
                        aiTribute(fromID, cResourceGold, amountAvailable/2);
                     else
                        aiTribute(fromID, cResourceGold, 100.0);
                  }
                  else
                  {
                     if (alreadyChatted == false)
                     {
                        sendStatement(fromID, cAICommPromptToAllyDeclineCantAfford);
                        alreadyChatted = true;
                     }
                  }
                  aiEcho("        Tribute gold");
               }
               if (xsArrayGetInt(targets, i) == cResourceFood)
               {
                  kbEscrowFlush(cEconomyEscrowID, cResourceFood, false);
                  kbEscrowFlush(cMilitaryEscrowID, cResourceFood, false);
                  amountAvailable = kbEscrowGetAmount(cRootEscrowID, cResourceFood) * .85;   // Leave room for tribute penalty
                  if (aiResourceIsLocked(cResourceFood) == true)
                     amountAvailable = 0.0;
                  if ((amountAvailable > 100.0) && (kbGetAge() >= cAge2) && (gRevolutionFlag == false))
                  {  // We will tribute something
                     if (alreadyChatted == false)
                     {
                        sendStatement(fromID, cAICommPromptToAllyITributedFood);  
                        alreadyChatted = true;
                     }
                     gLastTribSentTime = xsGetTime();
                     if (amountAvailable > 1000.0)
                        amountAvailable = 1000+(amountAvailable-1000)/2; //Tribute more
                     if (amountAvailable > 200.0)
                        aiTribute(fromID, cResourceFood, amountAvailable/2);
                     else
                        aiTribute(fromID, cResourceFood, 100.0);
                  }
                  else
                  {
                     if (alreadyChatted == false)
                     {
                        sendStatement(fromID, cAICommPromptToAllyDeclineCantAfford);
                        alreadyChatted = true;
                     }
                  }
                  aiEcho("        Tribute food");
               }
               if (xsArrayGetInt(targets, i) == cResourceWood)
               {
                  kbEscrowFlush(cEconomyEscrowID, cResourceWood, false);
                  kbEscrowFlush(cMilitaryEscrowID, cResourceWood, false);
                  amountAvailable = kbEscrowGetAmount(cRootEscrowID, cResourceWood) * .85;   // Leave room for tribute penalty
                  if (aiResourceIsLocked(cResourceWood) == true)
                     amountAvailable = 0.0;
                  if ((amountAvailable > 100.0) && (kbGetAge() >= cAge2) && (gRevolutionFlag == false))
                  {  // We will tribute something
                     if (alreadyChatted == false)
                     {
                        sendStatement(fromID, cAICommPromptToAllyITributedWood);  
                        alreadyChatted = true;
                     }
                     gLastTribSentTime = xsGetTime();
                     if (amountAvailable > 1000.0)
                        amountAvailable = 1000+(amountAvailable-1000)/2; //Tribute more
                     if (amountAvailable > 200.0)
                        aiTribute(fromID, cResourceWood, amountAvailable/2);
                     else
                        aiTribute(fromID, cResourceWood, 100.0);
                     kbEscrowAllocateCurrentResources();
                  }
                  else
                  {
                     if (alreadyChatted == false)
                     {
                        sendStatement(fromID, cAICommPromptToAllyDeclineCantAfford);
                        alreadyChatted = true;
                     }
                  }
                  aiEcho("        Tribute wood");
               }
            }
         } // end source allyRequest
         else
         {     // Tribute trigger...send it to player 1
            aiEcho("    Command was a trigger to tribute to player 1.  Resource list:");
            for (i=0; <= 2)   // Target[x] is the amount of resource type X to send
            {
               float avail = kbEscrowGetAmount(cRootEscrowID, i) * .85;
               int qty = xsArrayGetInt(targets, i);
               if (qty > 0)
               {
                  aiEcho("        Resource # "+i+", amount: "+qty+" requested.");
                  if (avail >= qty)  // we can afford it
                  {
                     aiTribute(1, i, qty);
                     aiEcho("            Sending full amount.");
                  }
                  else
                  {
                     aiTribute(1, i, avail);   // Can't afford it, send what we have.
                     aiEcho("            Sending all I have, "+avail+".");
                  }
               }
            }
         }
         break;
      }  // End verb tribute
      
      case cPlayerChatVerbFeed:     // Ongoing tribute.  Once a minute, send whatever you have in root.
      {
         aiEcho("    Command was to feed resources to a player.");
         alreadyChatted = false;
         for (i=0; < targetCount)
         {
            switch(xsArrayGetInt(targets, i))
            {
               case cResourceGold:
               {
                  gFeedGoldTo = fromID;
                  if (xsIsRuleEnabled("monitorFeeding") == false)
                  {
                     xsEnableRule("monitorFeeding");
                     monitorFeeding();
                  }
                  if (alreadyChatted == false)
                  {
                     sendStatement(fromID, cAICommPromptToAllyIWillFeedCoin);
                     alreadyChatted = true;
                  }
                  break;
               }
               case cResourceWood:
               {
                  gFeedWoodTo = fromID;
                  if (xsIsRuleEnabled("monitorFeeding") == false)
                  {
                     xsEnableRule("monitorFeeding");
                     monitorFeeding();
                  }
                  if (alreadyChatted == false)
                  {
                     sendStatement(fromID, cAICommPromptToAllyIWillFeedWood);
                     alreadyChatted = true;
                  }
                  break;
               }
               case cResourceFood:
               {
                  gFeedFoodTo = fromID;
                  if (xsIsRuleEnabled("monitorFeeding") == false)
                  {
                     xsEnableRule("monitorFeeding");
                     monitorFeeding();
                  }
                  if (alreadyChatted == false)
                  {
                     sendStatement(fromID, cAICommPromptToAllyIWillFeedFood);
                     alreadyChatted = true;
                  }
                  break;
               }
            }            
         }
         break;
      } // End verb feed

      case cPlayerChatVerbTrain:
      {
         aiEcho(" Command was to train units starting with "+firstTarget+", unit type "+kbGetProtoUnitName(firstTarget));
         // See if we have authority to change the settings
         bool okToChange = false;
         if (opportunitySource == cOpportunitySourceTrigger)
            okToChange = true;   // Triggers always rule
         if (opportunitySource == cOpportunitySourceAllyRequest)
         {
            if ( (gUnitPickSource == cOpportunitySourceAllyRequest) || (gUnitPickSource == cOpportunitySourceAutoGenerated) )
               okToChange = true;
         }
         if (okToChange == true)
         {
            aiEcho("Permission granted, changing units.");
            gUnitPickSource = opportunitySource;    // Record who made this change
            gUnitPickPlayerID = fromID;
            
	    cvPrimaryArmyUnit = firstTarget;
            cvSecondaryArmyUnit = -1;
            aiEcho("Primary unit is "+firstTarget+" "+kbGetProtoUnitName(firstTarget));
            setUnitPickerPreference(gLandUnitPicker);

            if (gUnitPickSource == cOpportunitySourceAllyRequest)
               sendStatement(fromID, cAICommPromptToAllyConfirm);
         }
         else 
         {
            sendStatement(fromID, cAICommPromptToAllyDeclineProhibited);
            aiEcho("    Cannot override existing settings.");
         }
         break;
      }
      case cPlayerChatVerbDefend:
      {  // Currently, defend is only available via the aiCommsDefend trigger, it is not in the UI.
         // An "implicit" defend can be done when a human player issues an attack command on a location
         // that does not have enemy units nearby.  
         // Currently, all defend verbs will be point/radius
         newOppID = createOpportunity(cOpportunityTypeDefend, cOpportunityTargetTypePointRadius, -1, chooseAttackPlayerID(location, 50.0), opportunitySource);
         aiSetOpportunityLocation(newOppID, location);
         aiSetOpportunityRadius(newOppID, 50.0);              
         aiActivateOpportunity(newOppID, true);
         break;
      }
      case cPlayerChatVerbClaim:
      {  // Available only from trigger, sends a vector.  Humans can send implicit claim commands
         // by sending "attack" with a point that is near an unclaimed VP site.
         closestVPSite = getClosestVPSite(location, cVPAll, cVPStateAny, -1);
         bool permitted = true;
         if ( (cvOkToClaimTrade == false) && (kbVPSiteGetType(closestVPSite) == cVPTrade) )
            permitted = false;
         if ( (cvOkToAllyNatives== false) && (kbVPSiteGetType(closestVPSite) == cVPNative) )
            permitted = false;
         
         if (permitted = false)
         {
            sendStatement(fromID, cAICommPromptToAllyDeclineProhibited);
            aiEcho("    Not allowed to claim this type of site.");            
         }
         else
         {
            newOppID = createOpportunity(cOpportunityTypeClaim, cOpportunityTargetTypeVPSite, closestVPSite, -1, opportunitySource);
            aiActivateOpportunity(newOppID, true); 
         }            
         break;
      }
      case cPlayerChatVerbStrategy:
      {
	 if (xsArrayGetInt(targets, 0) == cPlayerChatTargetStrategyRush)
	 {
            btRushBoom = 1.0;
            xsEnableRule("turtleUp");
            gPrevNumTowers = gNumTowers;
            gNumTowers = 0;
	 }
	 else if (xsArrayGetInt(targets, 0) == cPlayerChatTargetStrategyBoom)
	 {  btRushBoom = -1.0;  }
	 else if (xsArrayGetInt(targets, 0) == cPlayerChatTargetStrategyTurtle)
	 {
            btOffenseDefense = -1.0;
            xsEnableRule("turtleUp");
            gPrevNumTowers = gNumTowers;
            if (civIsAsian() == false)
            {  gNumTowers = 7;   }
             else
           {  gNumTowers = 5;   }
	 }
	 sendStatement(fromID, cAICommPromptToAllyConfirm);
	 break;
      }
      case cPlayerChatVerbCancel:
      {
         // Clear training (unit line bias) settings
         if ( (gUnitPickSource == cOpportunitySourceAllyRequest) || (opportunitySource == cOpportunitySourceTrigger) )  
         {  // We have an ally-generated unit line choice, destroy it
            gUnitPickSource = cOpportunitySourceAutoGenerated;
            gUnitPickPlayerID = -1;
            cvPrimaryArmyUnit = -1;
            cvSecondaryArmyUnit = -1;
            setUnitPickerPreference(gLandUnitPicker);            
         }
         
         // Clear Feeding (ongoing tribute) settings
         gFeedGoldTo = -1;
         gFeedWoodTo = -1;
         gFeedFoodTo = -1;
      
         // Cancel any active attack, defend or claim missions from allies or triggers
         if ( (opportunitySource == cOpportunitySourceTrigger) || (opportunitySource == cOpportunitySourceAllyRequest) )
         {
            if (gMostRecentAllyOpportunityID >= 0)
            {
               aiDestroyOpportunity(gMostRecentAllyOpportunityID);
               aiEcho("Destroying opportunity "+gMostRecentAllyOpportunityID+" because of cancel command.");
               gMostRecentAllyOpportunityID = -1;
            }
         }
         if (opportunitySource == cOpportunitySourceTrigger)
         {
            if (gMostRecentTriggerOpportunityID >= 0)
            {
               aiDestroyOpportunity(gMostRecentTriggerOpportunityID);
               aiEcho("Destroying opportunity "+gMostRecentTriggerOpportunityID+" because of cancel command.");
               gMostRecentTriggerOpportunityID = -1;
            }       
            // Also, a trigger cancel must kill any active auto-generated attack or defend plans
            int numPlans = aiPlanGetNumber(cPlanMission, -1, true);
            int index = 0;
            int plan = -1;
            int planOpp = -1;
            for (index = 0; < numPlans)
            {
               plan = aiPlanGetIDByIndex(cPlanMission, -1, true, index);
               planOpp = aiPlanGetVariableInt(plan, cMissionPlanOpportunityID, 0);
               if (planOpp >= 0)
               {
                  if (aiGetOpportunitySourceType(planOpp) == cOpportunitySourceAutoGenerated)
                  {
                     aiEcho("--------DESTROYING MISSION "+plan+" "+aiPlanGetName(plan));
                     aiPlanDestroy(plan);
                  }
               }
            }
         }
         // Reset number of towers
         if (gPrevNumTowers >= 0)
            gNumTowers = gPrevNumTowers;
         break;
      }
      default:
      {
         aiEcho("    Command verb not found, verb value is: "+verb);
         break;
      }
   }
   aiEcho("********************************************");   
}





rule delayAttackMonitor
inactive
group tcComplete
minInterval 10
{
   // If this rule is active, it means that gDelayAttacks has been set true,
   // and we're on a diffuclty level where we can't attack until AFTER someone
   // has attacked us, or until we've reached age 4.  
   
   
   if (kbGetAge() >= cAge4)
   {
      if ( (gDelayAttacks == true) && (aiGetWorldDifficulty() >= cDifficultyEasy) )
      {
         aiEcho(" ");
         aiEcho("    OK, THE GLOVES COME OFF NOW!");
         aiEcho(" ");
         gDelayAttacks = false;
      }
      xsDisableSelf();
      return;
   }
   
   // See if we're under attack.
   if (gDefenseReflexBaseID == kbBaseGetMainID(cMyID))
   {  // Main base is under attack
      if ( (gDelayAttacks == true) && (aiGetWorldDifficulty() >= cDifficultyEasy) )
      {
         aiEcho(" ");
         aiEcho("    OK, THE GLOVES COME OFF NOW!");
         aiEcho(" ");
         gDelayAttacks = false;
      }
      xsDisableSelf();  // If sandbox, just turn off.
   }   
}



//==============================================================================
// exploreMonitor
/*
   Used to correctly implement changes in cvOkToExplore.
   If it's off, make sure the explore plan is killed.
   If it's on, make sure the explore plan is active.

   Initially, the explore plan gets an explorer plus 5/15/20 military units,
   so that it can effectively gather nuggets.  We switch out of this mode 3 minutes
   after reaching age 2, unless the explore plan is in nugget gathering mode.
*/
//==============================================================================
rule exploreMonitor
inactive 
minInterval 10
{
   const int   cExploreModeStart = 0;     // Initial setting, when first starting out
   const int   cExploreModeNugget = 1;    // Explore and gather nuggets.  Heavy staffing, OK to recruit more units.
   const int   cExploreModeStaff = 2;     // Restaffing the plan, active for 10 seconds to let the plan grab 1 more unit.
   const int   cExploreModeExplore = 3;   // Normal...explore until this unit dies, check again in 5 minutes.
   
   static int  exploreMode = cExploreModeStart;
   static int  age2Time = -1;
   static int  nextStaffTime = -1;        // Prevent the explore plan from constantly sucking in units.
   
   if ( (age2Time < 0) && (kbGetAge() >= cAge2) )
      age2Time = xsGetTime();

   // Check for a failed plan
   if ( (gLandExplorePlan >= 0) && (aiPlanGetState(gLandExplorePlan) < 0) )
   {
      // Somehow, the plan has died.  Reset it to start up again if allowed.
      gLandExplorePlan = -1;
      exploreMode = cExploreModeStart;
      nextStaffTime = -1;
   }
   
   // Decide on which unit type to use as single scouts
   // If possible, converted guardians or cheap infantry units are used
   int scoutType = -1;
   if (kbUnitCount(cMyID, cUnitTypeGuardian, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeGuardian;
   else if (kbUnitCount(cMyID, cUnitTypeCrossbowman, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeCrossbowman;
   else if (kbUnitCount(cMyID, cUnitTypePikeman, cUnitStateAlive) >= 1)
      scoutType = cUnitTypePikeman;
   else if (kbUnitCount(cMyID, cUnitTypeStrelet, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeStrelet;
   else if (kbUnitCount(cMyID, cUnitTypeLongbowman, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeLongbowman;
   else if (kbUnitCount(cMyID, cUnitTypeMusketeer, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeMusketeer;
   else if (kbUnitCount(cMyID, cUnitTypexpWarrior, cUnitStateAlive) >= 1)
      scoutType = cUnitTypexpWarrior;
   else if (kbUnitCount(cMyID, cUnitTypexpAenna, cUnitStateAlive) >= 1)
      scoutType = cUnitTypexpAenna;
   else if (kbUnitCount(cMyID, cUnitTypexpTomahawk, cUnitStateAlive) >= 1)
      scoutType = cUnitTypexpTomahawk;
   else if (kbUnitCount(cMyID, cUnitTypexpMacehualtin, cUnitStateAlive) >= 1)
      scoutType = cUnitTypexpMacehualtin;
   else if (kbUnitCount(cMyID, cUnitTypexpPumaMan, cUnitStateAlive) >= 1)
      scoutType = cUnitTypexpPumaMan;
   else if (kbUnitCount(cMyID, cUnitTypexpWarBow, cUnitStateAlive) >= 1)
      scoutType = cUnitTypexpWarBow;
   else if (kbUnitCount(cMyID, cUnitTypexpWarClub, cUnitStateAlive) >= 1)
      scoutType = cUnitTypexpWarClub;
   else if (kbUnitCount(cMyID, cUnitTypeSaloonOutlawPistol, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeSaloonOutlawPistol;
   else if (kbUnitCount(cMyID, cUnitTypeSaloonOutlawRifleman, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeSaloonOutlawRifleman;
   else if (kbUnitCount(cMyID, cUnitTypeJanissary, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeJanissary;
   else if (kbUnitCount(cMyID, cUnitTypeypQiangPikeman, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeypQiangPikeman;
   else if (kbUnitCount(cMyID, cUnitTypeypChuKoNu, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeypChuKoNu;
   else if (kbUnitCount(cMyID, cUnitTypeypMonkDisciple, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeypMonkDisciple;
   else if (kbUnitCount(cMyID, cUnitTypeypArquebusier, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeypArquebusier;
   else if (kbUnitCount(cMyID, cUnitTypeypChangdao, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeypChangdao;
   else if (kbUnitCount(cMyID, cUnitTypeypSepoy, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeypSepoy;
   else if (kbUnitCount(cMyID, cUnitTypeypNatMercGurkha, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeypNatMercGurkha;
   else if (kbUnitCount(cMyID, cUnitTypeypRajput, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeypRajput;
   else if (kbUnitCount(cMyID, cUnitTypeypYumi, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeypYumi;
   else if (kbUnitCount(cMyID, cUnitTypeypAshigaru, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeypAshigaru;
   else
      scoutType = cUnitTypeLogicalTypeValidSharpshoot;

   // First, check the control variable and react appropriately
   
   if ( cvOkToExplore == true )
   {
      if (aiPlanGetActive(gLandExplorePlan) == false)
         if (gLandExplorePlan >= 0)
            aiPlanSetActive(gLandExplorePlan);     // Reactivate if we were shut off
      switch(exploreMode)
      {
         case cExploreModeStart:
         {
            if (aiPlanGetState(gLandExplorePlan) < 0)
            {  // Need to create it.
               gLandExplorePlan=aiPlanCreate("Land Explore", cPlanExplore);
               aiPlanSetDesiredPriority(gLandExplorePlan, 75);
               if (cvOkToGatherNuggets == true)
               {
                  switch(kbGetCiv())
                  {
                     case cCivXPAztec:
                     {
                        aiPlanAddUnitType(gLandExplorePlan, cUnitTypexpAztecWarchief, 1, 1, 1);
                        break;
                     }
                     case cCivXPIroquois:
                     {
                        aiPlanAddUnitType(gLandExplorePlan, cUnitTypexpIroquoisWarChief, 1, 1, 1);
                        break;
                     }
                     case cCivXPSioux:
                     {
                        aiPlanAddUnitType(gLandExplorePlan, cUnitTypexpLakotaWarchief, 1, 1, 1);
                        break;
                     }
                     case cCivChinese:
                     {
                        aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkChinese, 1, 1, 1);
                        break;
                     }
                     case cCivIndians:
                     {
                        aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkIndian, 1, 1, 1);
                        aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkIndian2, 1, 1, 1);
                        break;
                     }
                     case cCivJapanese:
                     {
                        aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkJapanese, 1, 1, 1);
                        //aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkJapanese2, 1, 1, 1);
                        break;
                     }
                     default:
                     {
                        aiPlanAddUnitType(gLandExplorePlan, cUnitTypeExplorer, 1, 1, 1);
                        break;
                     }
                  }
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypeLogicalTypeValidSharpshoot, 1, 6, 10);
                  aiPlanSetVariableBool(gLandExplorePlan, cExplorePlanOkToGatherNuggets, 0, true);
                  exploreMode = cExploreModeNugget;
               }
               else
               {
                  if (cMyCiv == cCivDutch) // Dutch will only use envoys (mainly handled in envoyMonitor rule)
                  {
                     aiPlanAddUnitType(gLandExplorePlan, cUnitTypeEnvoy, 1, 1, 1);
                  }
                  else
                  {
                     aiPlanAddUnitType(gLandExplorePlan, scoutType, 1, 1, 1);
                  }
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypeExplorer, 0, 0, 0);
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypexpAztecWarchief, 0, 0, 0);
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypexpIroquoisWarChief, 0, 0, 0);
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypexpLakotaWarchief, 0, 0, 0);
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkChinese, 0, 0, 0);
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkIndian, 0, 0, 0);
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkIndian2, 0, 0, 0);
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkJapanese, 0, 0, 0);
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkJapanese2, 0, 0, 0);
                  aiPlanSetVariableBool(gLandExplorePlan, cExplorePlanOkToGatherNuggets, 0, false);
                  exploreMode = cExploreModeStaff;
                  nextStaffTime = xsGetTime() + 120000;     // Two minutes from now, let it get another soldier if it loses this one.
                  if (gExplorerControlPlan < 0)
                  {
                     gExplorerControlPlan = aiPlanCreate("Explorer control plan", cPlanDefend);
                     switch(kbGetCiv())
                     {
                        case cCivXPAztec:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypexpAztecWarchief, 1, 1, 1);
                           break;
                        }
                        case cCivXPIroquois:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypexpIroquoisWarChief, 1, 1, 1);
                           break;
                        }
                        case cCivXPSioux:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypexpLakotaWarchief, 1, 1, 1);
                           break;
                        }
                        case cCivChinese:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkChinese, 1, 1, 1);
                           break;
                        }
                        case cCivIndians:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkIndian, 1, 1, 1);
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkIndian2, 1, 1, 1);
                           break;
                        }
                        case cCivJapanese:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkJapanese, 1, 1, 1);
                           //aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkJapanese2, 1, 1, 1); some one has to build shrine...
                           break;
                        }
                        default:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeExplorer, 1, 1, 1);
                           break;
                        }
                     }
                     aiPlanSetVariableVector(gExplorerControlPlan, cDefendPlanDefendPoint, 0, kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID)));
                     aiPlanSetVariableFloat(gExplorerControlPlan, cDefendPlanEngageRange, 0, 20.0);    // Tight
                     aiPlanSetVariableBool(gExplorerControlPlan, cDefendPlanPatrol, 0, false);
                     aiPlanSetVariableFloat(gExplorerControlPlan, cDefendPlanGatherDistance, 0, 20.0);
                     aiPlanSetInitialPosition(gExplorerControlPlan, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
                     aiPlanSetUnitStance(gExplorerControlPlan, cUnitStanceDefensive);
                     aiPlanSetVariableInt(gExplorerControlPlan, cDefendPlanRefreshFrequency, 0, 30);
                     aiPlanSetVariableInt(gExplorerControlPlan, cDefendPlanAttackTypeID, 0, cUnitTypeUnit); // Only units
                     aiPlanSetDesiredPriority(gExplorerControlPlan, 90);    // Quite high, don't suck him into routine attack plans, etc.
                     aiPlanSetActive(gExplorerControlPlan);      
                  }     
               }
               aiPlanSetEscrowID(gLandExplorePlan, cEconomyEscrowID);
               aiPlanSetBaseID(gLandExplorePlan, kbBaseGetMainID(cMyID));
               aiPlanSetVariableBool(gLandExplorePlan, cExplorePlanDoLoops, 0, true);
               aiPlanSetVariableInt(gLandExplorePlan, cExplorePlanNumberOfLoops, 0, 1);
               aiPlanSetActive(gLandExplorePlan); 
            }
            else
            {
               exploreMode = cExploreModeNugget;
            }
            break;
         }
         case cExploreModeNugget:
         {  
            // Check to see if we're out of time, and switch to single-unit exploring if we are.
            if (age2Time >= 0)
            {
               if (( ((xsGetTime() - age2Time) > 180000) && (aiPlanGetState(gLandExplorePlan) != cPlanStateClaimNugget) ) ||
                   ((xsGetTime() - age2Time) > 300000) )     // we've been in age 2 > 5 minutes, or > 3 minutes and not in gathering mode

               {  // Switch to a normal explore plan, create explorer control plan, enable local nugget gathering
                  if (gExplorerControlPlan < 0)
                  {
                     gExplorerControlPlan = aiPlanCreate("Explorer control plan", cPlanDefend);
                     switch(kbGetCiv())
                     {
                        case cCivXPAztec:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypexpAztecWarchief, 1, 1, 1);
                           break;
                        }
                        case cCivXPIroquois:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypexpIroquoisWarChief, 1, 1, 1);
                           break;
                        }
                        case cCivXPSioux:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypexpLakotaWarchief, 1, 1, 1);
                           break;
                        }
                        case cCivChinese:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkChinese, 1, 1, 1);
                           break;
                        }
                        case cCivIndians:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkIndian, 1, 1, 1);
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkIndian2, 1, 1, 1);
                           break;
                        }
                        case cCivJapanese:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkJapanese, 1, 1, 1);
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkJapanese2, 1, 1, 1);
                           break;
                        }
                        default:
                        {
                           aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeExplorer, 1, 1, 1);
                           break;
                        }
                     }
                     aiPlanSetVariableVector(gExplorerControlPlan, cDefendPlanDefendPoint, 0, kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID)));
                     aiPlanSetVariableFloat(gExplorerControlPlan, cDefendPlanEngageRange, 0, 20.0);    // Tight
                     aiPlanSetVariableBool(gExplorerControlPlan, cDefendPlanPatrol, 0, false);
                     aiPlanSetVariableFloat(gExplorerControlPlan, cDefendPlanGatherDistance, 0, 20.0);
                     aiPlanSetInitialPosition(gExplorerControlPlan, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
                     aiPlanSetUnitStance(gExplorerControlPlan, cUnitStanceDefensive);
                     aiPlanSetVariableInt(gExplorerControlPlan, cDefendPlanRefreshFrequency, 0, 30);
                     aiPlanSetVariableInt(gExplorerControlPlan, cDefendPlanAttackTypeID, 0, cUnitTypeUnit); // Only units
                     aiPlanSetDesiredPriority(gExplorerControlPlan, 90);    // Quite high, don't suck him into routine attack plans, etc.
                     aiPlanSetActive(gExplorerControlPlan);     
                     xsEnableRule("localNuggetGathering"); 
                  }
                     
                  // Destroy and re-create plan for single scout
                  aiPlanDestroy(gLandExplorePlan);
                  gLandExplorePlan=aiPlanCreate("Land Explore", cPlanExplore);
                  aiPlanSetDesiredPriority(gLandExplorePlan, 75);
                  if (cMyCiv == cCivDutch) // Dutch will only use envoys (mainly handled in envoyMonitor rule)
                  {
                     aiPlanAddUnitType(gLandExplorePlan, cUnitTypeEnvoy, 1, 1, 1);
                  }
                  else
                  {
                     aiPlanAddUnitType(gLandExplorePlan, scoutType, 1, 1, 1);
                  }
                  aiPlanSetNoMoreUnits(gLandExplorePlan, false);
                  aiPlanSetVariableInt(gLandExplorePlan, cExplorePlanNumberOfLoops, 0, 0);
                  aiPlanSetVariableBool(gLandExplorePlan, cExplorePlanDoLoops, 0, false);
                  exploreMode = cExploreModeStaff;
                  nextStaffTime = xsGetTime() + 120000;     // Two minutes from now, let it get another soldier.
                  aiEcho("Allowing the explore plan to grab a unit.");
               }
            }
            if (cvOkToGatherNuggets == false)
            {
               aiPlanAddUnitType(gLandExplorePlan, cUnitTypeExplorer, 0, 0, 0);
               aiPlanAddUnitType(gLandExplorePlan, cUnitTypexpAztecWarchief, 0, 0, 0);
               aiPlanAddUnitType(gLandExplorePlan, cUnitTypexpIroquoisWarChief, 0, 0, 0);
               aiPlanAddUnitType(gLandExplorePlan, cUnitTypexpLakotaWarchief, 0, 0, 0);
               aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkChinese, 0, 0, 0);
               aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkIndian, 0, 0, 0);
               aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkIndian2, 0, 0, 0);
               aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkJapanese, 0, 0, 0);
               aiPlanAddUnitType(gLandExplorePlan, cUnitTypeypMonkJapanese2, 0, 0, 0);
               if (cMyCiv == cCivDutch) // Dutch will only use envoys (mainly handled in envoyMonitor rule)
               {
                  aiPlanAddUnitType(gLandExplorePlan, cUnitTypeEnvoy, 1, 1, 1);
               }
               else
               {
                  aiPlanAddUnitType(gLandExplorePlan, scoutType, 1, 1, 1);
               }
               aiPlanSetNoMoreUnits(gLandExplorePlan, false);
               aiPlanSetVariableInt(gLandExplorePlan, cExplorePlanNumberOfLoops, 0, 0);
               aiPlanSetVariableBool(gLandExplorePlan, cExplorePlanDoLoops, 0, false);
               exploreMode = cExploreModeStaff;
               nextStaffTime = xsGetTime() + 120000;     // Two minutes from now, let it get another soldier.
               aiEcho("Allowing the explore plan to grab a unit.");               
            }
            break;
         }
         case cExploreModeStaff:
         {
            // We've been staffing for 10 seconds, set no more units to true
            aiPlanSetNoMoreUnits(gLandExplorePlan, true);
            exploreMode = cExploreModeExplore;
            aiEcho("Setting the explore plan to 'noMoreUnits'");
            break;
         }
         case cExploreModeExplore:
         {  // See if we're allowed to add another unit
            if (xsGetTime() > nextStaffTime)
            {
               aiPlanSetNoMoreUnits(gLandExplorePlan, false);     // Let it grab a unit
               aiEcho("Setting the explore plan to grab a unit if needed.");
               nextStaffTime = xsGetTime() + 120000;
               exploreMode = cExploreModeStaff;
            }
            break;
         }
      }
   }
   else // cvOkToExplore = false
   {
      aiPlanSetActive(gLandExplorePlan, false);
   }
}




//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
// Opportunities and Missions
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================



void missionStartHandler(int missionID = -1)
{  

//it lacks flexibility... considering delete it!

// Track times for mission starts, so we can tell how long its been since
   // we had a mission of a given type.
   if (missionID < 0)
      return;
   
   int oppID = aiPlanGetVariableInt(missionID, cMissionPlanOpportunityID, 0);
   int oppType = aiGetOpportunityType(oppID);
/*	
	
	string tmp=(missionID+":"+aiPlanGetName(missionID)+"\n"+aiPlanGetType(missionID)+" "+aiPlanGetState(missionID)+" %%:"+aiPlanGetNumberUnits(missionID,gEconUnit));
	bool debug=false;
	if (oppType==cOpportunityTypeClaim){
		tmp=tmp+aiPlanSetActive(missionID,false)+",";
		tmp=tmp+aiPlanAddUnitType(missionID,gEconUnit,0,1,1)+",";
		tmp=tmp+aiPlanAddUnitType(missionID,gExplorerUnit,1,1,1)+",";
		tmp=tmp+aiPlanAddUnit(missionID,getUnit(gEconUnit))+",";
		tmp=tmp+aiPlanSetNoMoreUnits(missionID,true)+",";
		tmp=tmp+aiPlanSetActive(missionID,true);
	}
	echoMessage(tmp);
   */
   
   aiPlanSetVariableInt(missionID, cMissionPlanStartTime, 0, xsGetTime()); // Set the start time in ms.
   
   switch(oppType)
   {
      case cOpportunityTypeDestroy:
      {
         gLastAttackMissionTime = xsGetTime() - 5000;
         aiEcho("-------- ATTACK MISSION ACTIVATION: Mission "+missionID+", Opp "+oppID);
         break;
      }
      case cOpportunityTypeDefend:
      {
         gLastDefendMissionTime = xsGetTime() - 5000;
         aiEcho("-------- DEFEND MISSION ACTIVATION: Mission "+missionID+", Opp "+oppID);
         break;
      }
      case cOpportunityTypeClaim:
      {
         gLastClaimMissionTime = xsGetTime() - 180000;
         aiEcho("-------- CLAIM MISSION ACTIVATION: Mission "+missionID+", Opp "+oppID);
         break;
      }
      default:
      {
         aiEcho("-------- UNKNOWN MISSION ACTIVATION: Mission "+missionID+", Opp "+oppID);
         break;
      }
   }
}


void missionEndHandler(int missionID = -1)
{
   aiEcho("-------- MISSION TERMINATION:  Mission "+missionID+", Opp "+aiGetOpportunityType(aiPlanGetVariableInt(missionID, cMissionPlanOpportunityID, 0)));
}


// Get a class rating, 0.0 to 1.0, for this type of opportunity.
// Scores zero when an opportunity of this type was just launched.
// Scores 1.0 when it has been 'gXXXMissionInterval' time since the last one.
float getClassRating(int oppType = -1, int target = -1)
{
   float retVal = 1.0;
   float timeElapsed = 0.0;
   int targetType = -1;
   
   switch(oppType)
   {
      case cOpportunityTypeDestroy:
      {
         timeElapsed = xsGetTime() - gLastAttackMissionTime;         
         retVal = 1.0 * (timeElapsed / gAttackMissionInterval);
         break;
      }
      case cOpportunityTypeDefend:
      {
         timeElapsed = xsGetTime() - gLastDefendMissionTime;
         retVal = 1.0 * (timeElapsed / gDefendMissionInterval);
         break;
      }
      case cOpportunityTypeClaim:
      {
         timeElapsed = xsGetTime() - gLastClaimMissionTime;
         if (kbVPSiteGetType(target) == cVPTrade)
         {
            if ( btBiasTrade > 0.0)
               timeElapsed = timeElapsed * (1.0 + btBiasTrade);   // Multiply by at least one, up to 2, i.e. btBiasTrade of 1.0 will double elapsed time.
            else
               timeElapsed = timeElapsed / ((-1.0 * btBiasTrade) + 1.0);  // Divide by 1.00 up to 2.00, i.e. cut it in half if btBiasTrade = -1.0
            retVal = 1.0 * (timeElapsed / gClaimMissionInterval);
         }
         else  // VPNative
         {
            if ( btBiasNative > 0.0)
               timeElapsed = timeElapsed * (1.0 + btBiasNative);   // Multiply by at least one, up to 2, i.e. btBiasNative of 1.0 will double elapsed time.
            else
               timeElapsed = timeElapsed / ((-1.0 * btBiasNative) + 1.0);  // Divide by 1.00 up to 2.00, i.e. cut it in half if btBiasNative = -1.0
            retVal = 1.0 * (timeElapsed / gClaimMissionInterval);
         }
         break;
      }
   }
   if (retVal > 1.0)
      retVal = 1.0;
   if (retVal < 0.0)
      retVal = 0.0;
   return(retVal);
}


// Calculate an approximate rating for enemy strength in/near this base.
float getBaseEnemyStrength(int baseID = -1)
{
   
   float retVal = 0.0;
   int owner = kbBaseGetOwner(baseID);
   static int allyBaseQuery = -1;
  
   if (allyBaseQuery < 0)
   {
      allyBaseQuery = kbUnitQueryCreate("Ally Base query");
      kbUnitQuerySetIgnoreKnockedOutUnits(allyBaseQuery, true);
      kbUnitQuerySetPlayerRelation(allyBaseQuery, cPlayerRelationEnemyNotGaia);
      kbUnitQuerySetState(allyBaseQuery, cUnitStateABQ);
      kbUnitQuerySetUnitType(allyBaseQuery, cUnitTypeLogicalTypeLandMilitary);
   }

   
   if (baseID < 0)
      return(-1.0);
   
   if (owner <= 0)
      return(-1.0);
   
   if (kbIsPlayerEnemy(owner) == true)  
   {  // Enemy base, add up military factors normally
      retVal = retVal + (5.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeTownCenter));  // 5 points per TC
      retVal = retVal + (10.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemy, cUnitTypeFortFrontier));  // 10 points per fort
      retVal = retVal + kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeLogicalTypeLandMilitary); // 1 point per soldier
      retVal = retVal + (3.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeOutpost));  // 3 points per outpost
      retVal = retVal + (3.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeBlockhouse));  // 3 points per blockhouse
      retVal = retVal + (3.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeWarHut));  // 3 points per war hut
      retVal = retVal + (5.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeNoblesHut));  // 5 points per nobles hut
      retVal = retVal + (5.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeypWIAgraFort2));  // 5 points per agra fort
      retVal = retVal + (5.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeypWIAgraFort3));
      retVal = retVal + (5.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeypWIAgraFort4));
      retVal = retVal + (5.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeypWIAgraFort5));
      retVal = retVal + (5.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeypCastle));  // 5 points per castle
      retVal = retVal + (3.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeYPOutpostAsian));  // 3 points per Asian outpost
      retVal = retVal + (5.0 * kbBaseGetNumberUnits(owner, baseID, cPlayerRelationEnemyNotGaia, cUnitTypeTradingPost));  // 5 points per trading post (Advanced TP suspected!)
   }
   else
   {  // Ally base, we're considering defending.  Count enemy units present
      kbUnitQuerySetUnitType(allyBaseQuery, cUnitTypeLogicalTypeLandMilitary);
      kbUnitQuerySetPosition(allyBaseQuery, kbBaseGetLocation(owner, baseID));
      kbUnitQuerySetMaximumDistance(allyBaseQuery, 60.0);
      kbUnitQueryResetResults(allyBaseQuery);
      retVal = kbUnitQueryExecute(allyBaseQuery);
   }
   if (retVal < 1.0)
      retVal = 1.0;  // Return at least 1.
   return(retVal);
}

float getlocHP(vector loc = cInvalidVector,float radius=20.0,int relation=cPlayerRelationEnemyNotGaia,int Type=cUnitTypeLogicalTypeLandMilitary){
   float retVal = 0.0;
   static int enemyPointQuery = -1;
  
   if (enemyPointQuery < 0)
   {
      enemyPointQuery = kbUnitQueryCreate("HP query");
      kbUnitQuerySetIgnoreKnockedOutUnits(enemyPointQuery, true);
   }

   if (enemyPointQuery!=-1){
      kbUnitQuerySetPlayerRelation(enemyPointQuery, relation);
      kbUnitQuerySetState(enemyPointQuery, cUnitStateAlive);
      kbUnitQuerySetUnitType(enemyPointQuery, Type);
	   kbUnitQuerySetPosition(enemyPointQuery, loc);
	   kbUnitQuerySetMaximumDistance(enemyPointQuery, radius);
	   kbUnitQueryResetResults(enemyPointQuery);
	}
	else return(-1);
   int n=kbUnitQueryExecute(enemyPointQuery);
   int i=0;
   for(i=0; <n){
	  retVal=retVal+getRelativeVillagerHP(kbUnitQueryGetResult(enemyPointQuery,i));
   }
   return (retVal);
}

// Calculate an approximate strength rating for the enemy units/buildings near this point.
float getPointEnemyStrength(vector loc = cInvalidVector)
{
   float retVal = 0.0;
   static int enemyPointQuery = -1;
  
   if (enemyPointQuery < 0)
   {
      enemyPointQuery = kbUnitQueryCreate("Enemy Point query");
      kbUnitQuerySetIgnoreKnockedOutUnits(enemyPointQuery, true);
      kbUnitQuerySetPlayerRelation(enemyPointQuery, cPlayerRelationEnemyNotGaia);
      kbUnitQuerySetState(enemyPointQuery, cUnitStateABQ);
      kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeLogicalTypeLandMilitary);
   }

   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeLogicalTypeLandMilitary);
   kbUnitQuerySetPosition(enemyPointQuery, loc);
   kbUnitQuerySetMaximumDistance(enemyPointQuery, 60.0);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = kbUnitQueryExecute(enemyPointQuery);

   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeFortFrontier);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 10.0 * kbUnitQueryExecute(enemyPointQuery);  // Each fort counts as 10 units
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeTownCenter);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(enemyPointQuery);  // Each TC counts as 5 units
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeOutpost);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 3.0 * kbUnitQueryExecute(enemyPointQuery);  // Each tower counts as 3 units
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeBlockhouse);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 3.0 * kbUnitQueryExecute(enemyPointQuery);  // Each blockhouse counts as 3 units 
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeWarHut);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 3.0 * kbUnitQueryExecute(enemyPointQuery);  // Each war hut counts as 3 units 
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeNoblesHut);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(enemyPointQuery);  // Each nobles hut counts as 5 units 
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeypWIAgraFort2);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(enemyPointQuery);  // An agra fort counts as 5 units 
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeypWIAgraFort3);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(enemyPointQuery);  // An agra fort counts as 5 units 
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeypWIAgraFort4);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(enemyPointQuery);  // An agra fort counts as 5 units 
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeypWIAgraFort5);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(enemyPointQuery);  // An agra fort counts as 5 units 
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeypCastle);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(enemyPointQuery);  // Each castle counts as 5 units 
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeYPOutpostAsian);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 3.0 * kbUnitQueryExecute(enemyPointQuery);  // Each Asian outpost counts as 3 units
   
   kbUnitQuerySetUnitType(enemyPointQuery, cUnitTypeTradingPost);
   kbUnitQueryResetResults(enemyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(enemyPointQuery);  // Each trading post counts as 5 units (Advanced TP suspected!)
     
   if (retVal < 1.0)
      retVal = 1.0;  // Return at least 1.
   return(retVal);
}

// Calculate an approximate strength rating for the allied units/buildings near this point.
float getPointAllyStrength(vector loc = cInvalidVector)
{
   float retVal = 0.0;
   static int allyPointQuery = -1;
  
   if (allyPointQuery < 0)
   {
      allyPointQuery = kbUnitQueryCreate("Ally Point query 2");
      kbUnitQuerySetIgnoreKnockedOutUnits(allyPointQuery, true);
      kbUnitQuerySetPlayerRelation(allyPointQuery, cPlayerRelationAlly);
      kbUnitQuerySetState(allyPointQuery, cUnitStateABQ);
      kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeLogicalTypeLandMilitary);
   }
   
   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeLogicalTypeLandMilitary);
   kbUnitQuerySetPosition(allyPointQuery, loc);
   kbUnitQuerySetMaximumDistance(allyPointQuery, 60.0);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = kbUnitQueryExecute(allyPointQuery);

   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeFortFrontier);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 10.0 * kbUnitQueryExecute(allyPointQuery);  // Each fort counts as 10 units

   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeTownCenter);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(allyPointQuery);  // Each TC counts as 5 units
   
   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeOutpost);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 3.0 * kbUnitQueryExecute(allyPointQuery);  // Each tower counts as 3 units 
   
   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeBlockhouse);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 3.0 * kbUnitQueryExecute(allyPointQuery);  // Each blockhouse counts as 3 units 

   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeWarHut);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 3.0 * kbUnitQueryExecute(allyPointQuery);  // Each war hut counts as 3 units 

   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeNoblesHut);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(allyPointQuery);  // Each nobles hut counts as 5 units 

   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeypWIAgraFort2);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(allyPointQuery);  // An agra fort counts as 5 units 
   
   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeypWIAgraFort3);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(allyPointQuery);  // An agra fort counts as 5 units 
   
   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeypWIAgraFort4);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(allyPointQuery);  // An agra fort counts as 5 units 
   
   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeypWIAgraFort5);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(allyPointQuery);  // An agra fort counts as 5 units 
   
   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeypCastle);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(allyPointQuery);  // Each castle counts as 5 units 
   
   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeYPOutpostAsian);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 3.0 * kbUnitQueryExecute(allyPointQuery);  // Each Asian outpost counts as 3 units

   kbUnitQuerySetUnitType(allyPointQuery, cUnitTypeTradingPost);
   kbUnitQueryResetResults(allyPointQuery);
   retVal = retVal + 5.0 * kbUnitQueryExecute(allyPointQuery);  // Each trading post counts as 5 units (Advanced TP suspected!)
   
   if (retVal < 1.0)
      retVal = 1.0;  // Return at least 1.
   return(retVal);
}



// Calculate an approximate value for this base.
float getBaseValue(int baseID = -1)
{
   float retVal = 0.0;
   int owner = kbBaseGetOwner(baseID);
   int relation = -1;
   
   if (baseID < 0)
      return(-1.0);
   
   if (owner <= 0)
      return(-1.0);
   
   if (kbIsPlayerAlly(owner) == true)
      relation = cPlayerRelationAlly;
   else
      relation = cPlayerRelationEnemyNotGaia;
   
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeLogicalTypeBuildingsNotWalls));
   retVal = retVal + (1000.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeTownCenter));  // 1000 points extra per TC
   retVal = retVal + (600.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypePlantation));  // 600 points extra per plantation
   retVal = retVal + (2000.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeFortFrontier));  // 2000 points extra per fort
   retVal = retVal + (150.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeLogicalTypeLandMilitary)); // 150 points per soldier
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeSettler));  // 200 points per settler
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeCoureur));  // 200 points per coureur
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeCoureurCree));  // 200 points per cree coureur
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeSettlerNative));  // 200 points per native settler
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeypSettlerAsian));  // 200 points per Asian settler
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeypSettlerIndian));  // 200 points per Indian settler
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeypSettlerJapanese));  // 200 points per Japanese settler
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeSettlerWagon));  // 300 points per settler wagon
   retVal = retVal + (1000.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeTradingPost));  // 1000 points per trading post
   retVal = retVal + (800.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeFactory));  // 800 points extra per factory
   retVal = retVal + (300.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeBank));  // 300 points extra per bank
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeMill));  // 200 points extra per mill
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeFarm));  // 200 points extra per farm
   retVal = retVal + (200.0 * kbBaseGetNumberUnits(owner, baseID, relation, cUnitTypeypRicePaddy));  // 200 points extra per rice paddy

   if (retVal < 1.0)
      retVal = 1.0;  // Return at least 1.
   return(retVal);
}


// Calculate an approximate value for the playerRelation units/buildings near this point.
// I.e. if playerRelation is enemy, calculate strength of enemy units and buildings.
float getPointValue(vector loc = cInvalidVector, int relation = cPlayerRelationEnemyNotGaia)
{
   float retVal = 0.0;
   static int allyQuery = -1;
   static int enemyQuery = -1;
   int queryID = -1; // Use either enemy or ally query as needed.
   
   if (allyQuery < 0)
   {
      allyQuery = kbUnitQueryCreate("Ally point value query");
      kbUnitQuerySetIgnoreKnockedOutUnits(allyQuery, true);
      kbUnitQuerySetPlayerRelation(allyQuery, cPlayerRelationAlly);
      kbUnitQuerySetState(allyQuery, cUnitStateABQ);
   }

   if (enemyQuery < 0)
   {
      enemyQuery = kbUnitQueryCreate("Enemy point value query");
      kbUnitQuerySetIgnoreKnockedOutUnits(enemyQuery, true);
      kbUnitQuerySetPlayerRelation(enemyQuery, cPlayerRelationEnemyNotGaia);
      kbUnitQuerySetSeeableOnly(enemyQuery, true);
      kbUnitQuerySetState(enemyQuery, cUnitStateAlive);
   }   
   
   if ( (relation == cPlayerRelationEnemy) || (relation == cPlayerRelationEnemyNotGaia) )
      queryID = enemyQuery;
   else
      queryID = allyQuery;
   
   kbUnitQueryResetResults(queryID);
   kbUnitQuerySetUnitType(queryID, cUnitTypeLogicalTypeBuildingsNotWalls);
   kbUnitQueryResetResults(queryID);
   retVal = 200.0 * kbUnitQueryExecute(queryID);   // 200 points per building
   
   kbUnitQuerySetUnitType(queryID, cUnitTypeTownCenter);
   kbUnitQueryResetResults(queryID);
   retVal = retVal + 1000.0 * kbUnitQueryExecute(queryID);  // Extra 1000 per TC
   
   kbUnitQuerySetUnitType(queryID, cUnitTypeTradingPost);
   kbUnitQueryResetResults(queryID);
   retVal = retVal + 1000.0 * kbUnitQueryExecute(queryID);  // Extra 1000 per trading post
   
   kbUnitQuerySetUnitType(queryID, cUnitTypeFactory);
   kbUnitQueryResetResults(queryID);
   retVal = retVal + 800.0 * kbUnitQueryExecute(queryID);  // Extra 800 per factory

   kbUnitQuerySetUnitType(queryID, cUnitTypePlantation);
   kbUnitQueryResetResults(queryID);
   retVal = retVal + 600.0 * kbUnitQueryExecute(queryID);  // Extra 600 per plantation

   kbUnitQuerySetUnitType(queryID, cUnitTypeBank);
   kbUnitQueryResetResults(queryID);
   retVal = retVal + 300.0 * kbUnitQueryExecute(queryID);  // Extra 300 per bank
   
   kbUnitQuerySetUnitType(queryID, cUnitTypeMill);
   kbUnitQueryResetResults(queryID);
   retVal = retVal + 200.0 * kbUnitQueryExecute(queryID);  // Extra 200 per mill
   
   kbUnitQuerySetUnitType(queryID, cUnitTypeFarm);
   kbUnitQueryResetResults(queryID);
   retVal = retVal + 200.0 * kbUnitQueryExecute(queryID);  // Extra 200 per farm
   
   kbUnitQuerySetUnitType(queryID, cUnitTypeypRicePaddy);
   kbUnitQueryResetResults(queryID);
   retVal = retVal + 200.0 * kbUnitQueryExecute(queryID);  // Extra 200 per rice paddy
   
   kbUnitQuerySetUnitType(queryID, cUnitTypeSPCXPMiningCamp);
   kbUnitQueryResetResults(queryID);
   retVal = retVal + 1000.0 * kbUnitQueryExecute(queryID);  // Extra 1000 per SPC mining camp for XPack scenario
      
   kbUnitQuerySetUnitType(queryID, cUnitTypeUnit);
   kbUnitQueryResetResults(queryID);
   retVal = retVal + 200.0 * kbUnitQueryExecute(queryID);  // 200 per unit.

   if (retVal < 1.0)
      retVal = 1.0;
      
   return(retVal);
}

//==============================================================================
// Called for each opportunity that needs to be scored.
//==============================================================================
void scoreOpportunity(int oppID = -1)
{
   /*
   
   Sets all the scoring components for the opportunity, and a final score.  The scoring
   components and their meanings are:
   
   int PERMISSION  What level of permission is needed to do this?  
      cOpportunitySourceAutoGenerated is the lowest...go ahead and do it.
      cOpportunitySourceAllyRequest...the AI may not do it on its own, i.e. it may be against the rules for this difficulty.
      cOpportunitySourceTrigger...even ally requests are denied, as when prevented by control variables, but a trigger (gaia request) may do it.
      cOpportunitySourceTrigger+1...not allowed at all.
   
   float AFFORDABLE  Do I have what it takes to do this?  This includes appropriate army sizes, resources to pay for things (like trading posts)
      and required units like explorers.  0.80 indicates a neutral, good-to-go position.  1.0 means overstock, i.e. an army of 20 would be good, 
      and I have 35 units available.  0.5 means extreme shortfall, like the minimum you could possibly imagine.  0.0 means you simply can't do it,
      like no units at all.  Budget issues like amount of wood should never score below 0.5, scores below 0.5 mean deep, profound problems.
   
   int SOURCE  Who asked for this mission?  Uses the cOpportunitySource... constants above.
   
   float CLASS  How much do we want to do this type of mission?   Based on personality, how long it's been since the last mission of this type, etc.
      0.8 is a neutral, "this is a good mission" rating.  1.0 is extremely good, I really, really want to do this next.  0.5 is a poor score.  0.0 means 
      I just flat can't do it.  This class score will creep up over time for most classes, to make sure they get done once in a while.
   
   float INSTANCE  How good is this particular target?  Includes asset value (is it important to attack or defend this?) and distance.  Defense values
      are incorporated in the AFFORDABLE calculation above.  0.0 is no value, this target can't be attacked.  0.8 is a good solid target.  1.0 is a dream target.
   
   float TOTAL  Incorporates AFFORDABLE, CLASS and INSTANCE by multiplying them together, so a zero in any one sets total to zero.  Source is added as an int
      IF AND ONLY IF SOURCE >= PERMISSION.  If SOURCE < PERMISSION, the total is set to -1.  Otherwise, all ally source opportunities will outrank all self generated
      opportunities, and all trigger-generated opportunities will outrank both of those.  Since AFFORDABLE, CLASS and INSTANCE all aim for 0.8 as a good, solid
      par value, a total score of .5 is rougly "pretty good".  A score of 1.0 is nearly impossible and should be quite rare...a high-value target, weakly defended,
      while I have a huge army and the target is close to me and we haven't done one of those for a long, long time.  
   
   Total of 0.0 is an opportunity that should not be serviced.  >0 up to 1 indicates a self-generated opportunity, with 0.5 being decent, 1.0 a dream, and 0.2 kind
   of marginal.  Ally commands are in the range 1.0 to 2.0 (unless illegal), and triggers score 2.0 to 3.0.
   
   */
   	
   // Interim values for the scoring components:
   int   permission = 0; 
   float instance = 0.0;
   float classRating = 0.0;
   float total = 0.0;
   float affordable = 0.0;
	float score = 0.0;
   
   // Info about this opportunity
   int   source = aiGetOpportunitySourceType(oppID);
   if (source < 0) 
      source = cOpportunitySourceAutoGenerated;
   if (source > cOpportunitySourceTrigger)
      source = cOpportunitySourceTrigger;
   int target = aiGetOpportunityTargetID(oppID);
   int targetType = aiGetOpportunityTargetType(oppID);
   int oppType = aiGetOpportunityType(oppID);
   int targetPlayer = aiGetOpportunityTargetPlayerID(oppID);
   vector location = aiGetOpportunityLocation(oppID);
   float radius = aiGetOpportunityRadius(oppID);
   if (radius < 40.0)
      radius = 40.0;
   int baseOwner = -1;
   float baseEnemyPower = 0.0;   // Used to measure troop and building strength.  Units roughly equal to unit count of army.
   float baseAllyPower = 0.0;    // Strength of allied buildings and units, roughly equal to unit count.
   float netEnemyPower = 0.0;    // Basically enemy minus ally, but the ally effect can, at most, cut 80% of enemy strength
   float baseAssets = 0.0;    // Rough estimate of base value, in aiCost.  
   float affordRatio = 0.0;
   bool  errorFound = false;  // Set true if we can't do a good score.  Ends up setting score to -1.

   // Variables for available number of units and plan to kill if any
   float armySizeAuto = 0.0;  // For source cOpportunitySourceAutoGenerated
   float armySizeAlly = 0.0;  // For ally-generated commands, how many units could we scrounge up?
   int missionToKillAlly = -1;   // Mission to cancel in order to provide the armySizeAlly number of units.  
   float armySizeTrigger = 0.0;  // For trigger-generated commands, how many units could we scrounge up?
   int missionToKillTrigger = -1;   // Mission to cancel in order to provide the armySizeTrigger number of units.
   float armySize = 0.0;      // The actual army size we'll use for calcs, depending on how big the target is.
   float missionToKill = -1;  // The actual mission to kill based on the army size we've selected.
   
   float oppDistance = 0.0;      // Distance to target location or base.
   bool  sameAreaGroup = true;   // Set false if opp is on another areagroup.

   bool defendingMonopoly = false;
   bool attackingMonopoly = false;
   int  tradePostID = -1;     // Set to trade post ID if this is a base target, and a trade post is nearby.
   
   bool defendingKOTH = false;
   bool attackingKOTH = false;
   int  KOTHID = -1;     // Set to the hill ID if this is a base target, and the hill is nearby.

   if (gIsMonopolyRunning == true)
   {
      if (gMonopolyTeam == kbGetPlayerTeam(cMyID))
         defendingMonopoly = true;  // We're defending, let's not go launching any attacks
      else
         attackingMonopoly = true;  // We're attacking, focus on trade posts
   }
   
   if (gIsKOTHRunning == true)
   {
      if (gKOTHTeam == kbGetPlayerTeam(cMyID))
         defendingKOTH = true;  // We're defending, let's not go launching any attacks
      else
         attackingKOTH = true;  // We're attacking, focus on the hill
   }

   //-- get the number of units in our reserve.
	armySizeAuto = aiPlanGetNumberUnits(gLandReservePlan, cUnitTypeLogicalTypeLandMilitary);
   armySizeAlly = armySizeAuto;
   armySizeTrigger = armySizeAlly;
   
//   aiEcho(" ");
//   aiEcho("Scoring opportunity "+oppID+", targetID "+target+", location "+location);
   
   // Get target info
   switch(targetType)
   {
      case cOpportunityTargetTypeBase:
      {
         location = kbBaseGetLocation(kbBaseGetOwner(target),target);
         tradePostID = getUnitByLocation(cUnitTypeTradingPost, kbBaseGetOwner(target), cUnitStateAlive, location, 40.0);   
         KOTHID = getUnitByLocation(cUnitTypeypKingsHill, kbBaseGetOwner(target), cUnitStateAlive);//, location, 40.0);   
         radius = 50.0;
         baseOwner = kbBaseGetOwner(target);
         baseEnemyPower = getBaseEnemyStrength(target);  // Calculate "defenses" as enemy units present
         baseAllyPower = getPointAllyStrength(kbBaseGetLocation(kbBaseGetOwner(target),target));
         if ( (baseEnemyPower*0.8) > baseAllyPower)   
            netEnemyPower = baseEnemyPower - baseAllyPower;   // Ally power is less than 80% of enemy
         else
            netEnemyPower = baseEnemyPower * 0.2;  // Ally power is more then 80%, but leave a token enemy rating anyway.
            
         baseAssets = getBaseValue(target);  //  Rough value of target
         if ( (gIsMonopolyRunning == true) && (tradePostID >= 0) )
            baseAssets = baseAssets + 10000; // Huge bump if this is a trade post (enemy or ally) and a monopoly is running            
         if ( (gIsKOTHRunning == true) && (KOTHID >= 0) )
            baseAssets = baseAssets + 10000; // Huge bump if this is the hill (enemy or ally) and a timer is running             
         break;
      }
      case cOpportunityTargetTypePointRadius:
      {
         baseEnemyPower = getPointEnemyStrength(location);
         baseAllyPower = getPointAllyStrength(location);
         if ( (baseEnemyPower*0.8) > baseAllyPower)   
            netEnemyPower = baseEnemyPower - baseAllyPower;   // Ally power is less than 80% of enemy
         else
            netEnemyPower = baseEnemyPower * 0.2;  // Ally power is more then 80%, but leave a token enemy rating anyway.
            
         baseAssets = getPointValue(location);  //  Rough value of target
         break;
      }
      case cOpportunityTargetTypeVPSite:     // This is only for CLAIM missions.  A VP site that is owned will be a 
                                             // defend or destroy opportunity.
      {
         location = kbVPSiteGetLocation(target);
         radius = 50.0;
         
         baseEnemyPower = getPointEnemyStrength(location);
         baseAllyPower = getPointAllyStrength(location);
         if ( (baseEnemyPower*0.8) > baseAllyPower)   
            netEnemyPower = baseEnemyPower - baseAllyPower;   // Ally power is less than 80% of enemy
         else
            netEnemyPower = baseEnemyPower * 0.2;  // Ally power is more then 80%, but leave a token enemy rating anyway.
        
         baseAssets = 2000.0;    // Arbitrary...consider a claimable VP Site as worth 2000 resources.
         break;
      }
   }
   
   if (netEnemyPower < 1.0)
      netEnemyPower = 1.0;   // Avoid div 0
   
   oppDistance = distance(location, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
   if (oppDistance <= 0.0)
      oppDistance = 1.0;
   if ( kbAreaGroupGetIDByPosition(location) != kbAreaGroupGetIDByPosition(kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID))) )
      sameAreaGroup = false;
   
   
   // Figure which armySize to use.  This currently is a placeholder, we may not need to mess with it.
   armySize = armySizeAuto;   // Default

//   aiEcho("    EnemyPower "+baseEnemyPower+", AllyPower "+baseAllyPower+", NetEnemyPower "+netEnemyPower);
//   aiEcho("    BaseAssets "+baseAssets+", myArmySize "+armySize);
   
   switch(oppType)
   {
      case cOpportunityTypeDestroy:
      {
         // Check permissions required.
         if(cvOkToAttack == false)
            permission = cOpportunitySourceTrigger;   // Only triggers can make us attack.
         
         if (gDelayAttacks == true)
            permission = cOpportunitySourceTrigger;   // Only triggers can override this difficulty setting.
         
         // Check affordability
         
         if (netEnemyPower < 0.0)
         {
            errorFound = true;
            affordable = 0.0;
         }
         else
         {
            // Set affordability.  Roughly armySize / baseEnemyPower, but broken into ranges.
            // 0.0 is no-can-do, i.e. no troops.  0.8 is "good", i.e. armySize is double baseEnemyPower.  
            // Above a 2.0 ratio, to 5.0, scale this into the 0.8 to 1.0 range.
            // Above 5.0, score it 1.0
            affordRatio = armySize / netEnemyPower;
            if (affordRatio < 2.0)
               affordable = affordRatio / 2.5;  // 0 -> 0.0,  2.0 -> 0.8
            else
               affordable = 0.8 + ((affordRatio - 2.0) / 15.0); // 2.0 -> 0.8 and 5.0 -> 1.0
            if (affordable > 1.0)
               affordable = 1.0;
         }  // Affordability is done
            
         // Check target value, calculate INSTANCE score.
         if (baseAssets < 0.0)
         {
            errorFound = true;
         }
         // Clip base value to range of 100 to 10K for scoring
         if (baseAssets < 100.0)
            baseAssets = 100.0;
         if (baseAssets > 10000.0)
            baseAssets = 10000.0;
         // Start with an "instance" score of 0 to .8 for bases under 2K value.
         instance = (0.8 * baseAssets) / 2000.0;
         // Over 2000, adjust so 2K = 0.8, 30K = 1.0
         if (baseAssets > 2000.0)
            instance = 0.8 + ( (0.2 * (baseAssets - 2000.0)) / 8000.0);
         
         // Instance is now 0..1, adjust for distance. If < 100m, leave as is.  Over 100m to 400m, penalize 10% per 100m.
         float penalty = 0.0;
         if (oppDistance > 100.0)
            penalty = (0.1 * (oppDistance - 100.0)) / 100.0;
         if (penalty > 0.6)
            penalty = 0.6;
         instance = instance * (1.0 - penalty); // Apply distance penalty, INSTANCE score is done.
         if (sameAreaGroup = false)
            instance = instance / 2.0;
         if (targetType == cOpportunityTargetTypeBase)
            if (kbHasPlayerLost(baseOwner) == true)
               instance = -1.0;
         // Illegal if it's over water, i.e. a lone dock
         if (kbAreaGetType(kbAreaGetIDByPosition(location)) == cAreaTypeWater)
            instance = -1.0;
         
         // Check for weak target blocks, which means the content designer is telling us that this target needs its instance score bumped up
         int weakBlockCount = 0;
         int strongBlockCount = 0;
         if ( targetType == cOpportunityTargetTypeBase)
         {
            weakBlockCount = getUnitCountByLocation(cUnitTypeAITargetBlockWeak, cMyID, cUnitStateAlive, kbBaseGetLocation(baseOwner, target), 40.0);
            strongBlockCount = getUnitCountByLocation(cUnitTypeAITargetBlockStrong, cMyID, cUnitStateAlive, kbBaseGetLocation(baseOwner, target), 40.0);
         }
         if ( (targetType == cOpportunityTargetTypeBase) && (weakBlockCount > 0) && (instance >= 0.0) )
         {  // We have a valid instance score, and there is at least one weak block in the area.  For each weak block, move the instance score halfway to 1.0.
            while (weakBlockCount > 0)
            {
               instance = instance + ((1.0-instance) / 2.0);   // halfway up to 1.0
               weakBlockCount--;
            }
         }        

         classRating = getClassRating(cOpportunityTypeDestroy);   // 0 to 1.0 depending on how long it's been.
         if ( (gIsMonopolyRunning == true) && (tradePostID < 0) ) // Monopoly, and this is not a trade post site
            classRating = 0.0;
         
         if ( defendingMonopoly == true )
            classRating = 0.0;      // If defending, don't attack other targets
         
         if ( ( attackingMonopoly == true) && (tradePostID >= 0) )  // We're attacking, and this is an enemy trade post...go get it
            classRating = 1.0;
            
         if ( (gIsKOTHRunning == true) && (KOTHID < 0) ) // KOTH, and this is the hill
            classRating = 0.0;
         
         if ( defendingKOTH == true )
            classRating = 0.0;      // If defending, don't attack other targets
         
         if ( ( attackingKOTH == true) && (KOTHID >= 0) )  // We're attacking, and this is an enemy hill...go get it
            classRating = 1.0;

         if ( (targetType == cOpportunityTargetTypeBase) && (strongBlockCount > 0) && (classRating >= 0.0) )
         {  // We have a valid instance score, and there is at least one strong block in the area.  For each weak block, move the classRating score halfway to 1.0.
            while (strongBlockCount > 0)
            {
               classRating = classRating + ((1.0-classRating) / 2.0);   // halfway up to 1.0
               strongBlockCount--;
            }
         }
         
         if (aiTreatyActive() == true)
            classRating = 0.0;   // Do not attack anything if under treaty
 
         break;
      }
      case cOpportunityTypeClaim:
      {
		//i really don't agree to permit this...
		permission=cOpportunitySourceTrigger;
         // Check permissions required.
         if( (cvOkToClaimTrade == false) && (kbVPSiteGetType(target) == cVPTrade) )
            permission = cOpportunitySourceTrigger;   // Only triggers can let us override this.
         if( (cvOkToAllyNatives == false) && (kbVPSiteGetType(target) == cVPNative) )
            permission = cOpportunitySourceTrigger;   // Only triggers can let us override this.
         if (gDelayAttacks == true)     // Taking trade sites and natives is sort of aggressive, turn it off on easy/sandbox.
            permission = cOpportunitySourceTrigger;   // Only triggers can override this difficulty setting.
         
         // Check affordability.  50-50 weight on military affordability and econ affordability
         float milAfford = 0.0;
         float econAfford = 0.0;
         affordRatio = armySize / netEnemyPower;
            if (affordRatio < 2.0)
               milAfford = affordRatio / 2.5;  // 0 -> 0.0,  2.0 -> 0.8
            else
               milAfford = 0.8 + ((affordRatio - 2.0) / 15.0); // 2.0 -> 0.8 and 5.0 -> 1.0
            if (milAfford > 1.0)
               milAfford = 1.0; 
         affordRatio = (kbEscrowGetAmount(cRootEscrowID, cResourceWood) + kbEscrowGetAmount(cEconomyEscrowID, cResourceWood)) / (1.0 + kbUnitCostPerResource(cUnitTypeTradingPost, cResourceWood));
            if (affordRatio < 1.0)
               econAfford = affordRatio;
            else
               econAfford = 1.0;
            if (econAfford > 1.0)
               econAfford = 1.0;      
            if (econAfford < 0.0)
               econAfford = 0.0;
         affordable = (econAfford + milAfford) / 2.0; // Simple average
         
         // Instance
         instance = 0.8;   // Same for all, unless I prefer to do one type over other (personality)
         penalty = 0.0;
         if (oppDistance > 100.0)
            penalty = (0.1 * (oppDistance - 100.0)) / 100.0;
         if (penalty > 0.6)
            penalty = 0.6;
         instance = instance * (1.0 - penalty); // Apply distance penalty, INSTANCE score is done.         
         if (sameAreaGroup = false)
            instance = instance / 2.0;
         classRating = getClassRating(cOpportunityTypeClaim, target);   // 0 to 1.0 depending on how long it's been.
         break;
      }
      case cOpportunityTypeRaid:
      {
         break;
      }
      case cOpportunityTypeDefend:
      {  
        
         // Check affordability
 
         if (netEnemyPower < 0.0)
         {
            errorFound = true;
            affordable = 0.0;
         }
         else
         {
            // Set affordability.  Roughly armySize / netEnemyPower, but broken into ranges.
            // Very different than attack calculations.  Score high affordability if the ally is really 
            // in trouble, especially if my army is large.  Basically...does he need help?  Can I help?
            if (baseAllyPower < 1.0)
               baseAllyPower = 1.0;
            float enemyRatio = baseEnemyPower / baseAllyPower;
            float enemySurplus = baseEnemyPower - baseAllyPower;
            if (enemyRatio < 0.5)   // Enemy very weak, not a good opp.
            {
               affordRatio = enemyRatio;  // Low score, 0 to .5
               if (enemyRatio < 0.2)
                  affordRatio = 0.0;
            }
            else
               affordRatio = 0.5 + ( (enemyRatio - 0.5) / 5.0);   // ratio 0.5 scores 0.5, ratio 3.0 scores 1.0
            if ( (affordRatio * 10.0) > enemySurplus )
               affordRatio = enemySurplus / 10.0;  // Cap the afford ratio at 1/10 the enemy surplus, i.e. don't respond if he's just outnumbered 6:5 or something trivial.
            if (enemySurplus < 0)
               affordRatio = 0.0;
            if (affordRatio > 1.0)
               affordRatio = 1.0;
            // AffordRatio now represents how badly I'm needed...now, can I make a difference
            if (armySize < enemySurplus)  // I'm gonna get my butt handed to me
               affordRatio = affordRatio * (armySize / enemySurplus);   // If I'm outnumbered 3:1, divide by 3.
            // otherwise, leave it alone.
            
            affordable = affordRatio;
         }  // Affordability is done
            
         // Check target value, calculate INSTANCE score.
         if (baseAssets < 0.0)
         {
            errorFound = true;
         }
         // Clip base value to range of 100 to 30K for scoring
         if (baseAssets < 100.0)
            baseAssets = 100.0;
         if (baseAssets > 30000.0)
            baseAssets = 30000.0;
         // Start with an "instance" score of 0 to .8 for bases under 2K value.
         instance = (0.8 * baseAssets) / 1000.0;
         // Over 1000, adjust so 1K = 0.8, 30K = 1.0
         if (baseAssets > 1000.0)
            instance = 0.8 + ( (0.2 * (baseAssets - 1000.0)) / 29000.0);
         
         // Instance is now 0..1, adjust for distance. If < 200m, leave as is.  Over 200m to 400m, penalize 10% per 100m.
         penalty = 0.0;
         if (oppDistance > 200.0)
            penalty = (0.1 * (oppDistance - 200.0)) / 100.0;
         if (penalty > 0.6)
            penalty = 0.6;
         instance = instance * (1.0 - penalty); // Apply distance penalty, INSTANCE score is done.
         if (sameAreaGroup == false)
            instance = 0.0;
         if (targetType == cOpportunityTargetTypeBase)
            if (kbHasPlayerLost(baseOwner) == true)
               instance = -1.0;
                 
         if ( (defendingMonopoly == true) && (tradePostID >= 0) && (instance > 0.0))
            instance = instance + ((1.0 - instance)/1.2);   // Bump it almost up to 1.0 if we're defending monopoly and this is a trade site.
         if ( (defendingKOTH == true) && (KOTHID >= 0) && (instance > 0.0))
            instance = instance + ((1.0 - instance)/1.2);   // Bump it almost up to 1.0 if we're defending the hill
         classRating = getClassRating(cOpportunityTypeDefend);   // 0 to 1.0 depending on how long it's been.
         if ( (defendingMonopoly == true) && (tradePostID >= 0) ) 
            classRating = 1.0;      // No time delay for 2nd defend mission if we're defending trading posts during monopoly.
         if (attackingMonopoly == true) 
            classRating = 0.0;   // Don't defend anything if we should be attacking a monopoly!
         if ( (defendingKOTH == true) && (KOTHID >= 0) ) 
            classRating = 1.0;      // No time delay for 2nd defend mission if we're defending the hill.
         if (attackingKOTH == true) 
            classRating = 0.0;   // Don't defend anything if we should be attacking the hill!
         break;    
      }
      case cOpportunityTypeRescueExplorer:
      {
         break;
      }
      default:
      {
         aiEcho("ERROR ERROR ERROR ERROR");
         aiEcho("scoreOpportunity() failed on opportunity "+oppID);
         aiEcho("Opportunity Type is "+oppType+" (invalid)");
         break;
      }
   }
   
   score = classRating * instance * affordable;
//   aiEcho("    Class "+classRating+", Instance "+instance+", affordable "+affordable);
//   aiEcho("    Final Score: "+score);

   switch(oppType)
   {
      case cOpportunityTypeDestroy:  // Aggressive AIs attack more often
      {
         score = score + (0.2 * btOffenseDefense); // If -0.5 -> score - 0.1. If -1.0 -> score - 0.2. If 0.5 -> score + 0.1. If 1.0 -> score + 0.2
      }
   }
   switch(oppType)
   {
      case cOpportunityTypeDefend:  // Defensive AIs defend ally bases
      {
         score = score + (0.2 * btOffenseDefense); // If -0.5 -> score + 0.1. If -1.0 -> score + 0.2. If 0.5 -> score - 0.1. If 1.0 -> score - 0.2
      }
   }
   switch(oppType)
   {
      case cOpportunityTypeClaim:  // Claiming AIs build more Trading Posts
      {
         if (kbVPSiteGetType(target) == cVPTrade) 
         {
            score = score + (0.2 * btBiasTrade); // If -0.5 -> score - 0.1. If -1.0 -> score - 0.2. If 0.5 -> score + 0.1. If 1.0 -> score + 0.2
         }
         if (kbVPSiteGetType(target) == cVPNative) 
         {
            score = score + (0.2 * btBiasNative); // If -0.5 -> score - 0.1. If -1.0 -> score - 0.2. If 0.5 -> score + 0.1. If 1.0 -> score + 0.2
         }
      }
   }
   
   if (score > 1.0)
      score = 1.0;
   if (score < 0.0)
      score = 0.0;
      
   score = score + source; // Add 1 if from ally, 2 if from trigger.
   
   if (permission > source)
      score = -1.0;
   if (errorFound == true)
      score = -1.0;
   if (cvOkToSelectMissions == false)
      score = -1.0;
   aiSetOpportunityScore(oppID, permission, affordable, classRating, instance, score);
}



//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
// Personality and chats
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//==============================================================================



rule introChat    // Send a greeting to allies and enemies
inactive
group startup
minInterval 1
{
   xsDisableSelf();
   sendStatement(cPlayerRelationAlly, cAICommPromptToAllyIntro); 
   sendStatement(cPlayerRelationEnemy, cAICommPromptToEnemyIntro);
}



rule IKnowWhereYouLive  // Send a menacing chat when we discover the enemy player's location
inactive
group startup
minInterval 5
{
   static int targetPlayer = -1;
   
   if (targetPlayer < 0)
   {
      targetPlayer = getEnemyPlayerByTeamPosition(getTeamPosition(cMyID));    // Corresponding player on other team
      if (targetPlayer < 0)
      {
         xsDisableSelf();
         aiEcho("No corresponding player on other team, IKnowWhereYouLive is deactivating.");
         aiEcho("My team position is "+getTeamPosition(cMyID));
         return;
      }
      aiEcho("Rule IKnowWhereYouLive will threaten player #"+targetPlayer); 
   }
   
   if (kbUnitCount(targetPlayer, cUnitTypeTownCenter, cUnitStateAlive) > 0) 
   {  // We see his TC for the first time
      int tc = getUnit(cUnitTypeTownCenter, targetPlayer, cUnitStateAlive);
      if ( tc >= 0)
      {
         if ( getUnitByLocation(cUnitTypeUnit, cMyID, cUnitStateAlive, kbUnitGetPosition(tc), 50.0) >= 0 )
         {  // I have a unit nearby, presumably I have LOS.
            sendStatement(targetPlayer, cAICommPromptToEnemyISpotHisTC, kbUnitGetPosition(tc));             
            aiEcho("Rule IKnowWhereYouLive is threatening player #"+targetPlayer);
         }
      }
      xsDisableSelf();
   }
}


rule tcChats
inactive
group tcComplete
minInterval 10
{  // Send chats about enemy TC placement
   static int tcID1 = -1;  // First enemy TC
   static int tcID2 = -1;  // Second
   static int enemy1 = -1; // ID of owner of first enemy TC.
   static int enemy2 = -1; // Second.
   static int secondTCQuery = -1;
   
   if (tcID1 < 0)
   {  // Look for first enemy TC
      tcID1 = getUnit(cUnitTypeTownCenter, cPlayerRelationEnemy, cUnitStateAlive);
      if (tcID1 >= 0)
         enemy1 = kbUnitGetPlayerID(tcID1);
      return;  // Done for now
   }
   
   // If we get here, we already know about one enemy TC.  Now, find the next closest enemy TC.
   if (secondTCQuery < 0)
   {  //init - find all enemy TC's within 200 meters of first one.
      secondTCQuery = kbUnitQueryCreate("Second enemy TC");
   }
   kbUnitQuerySetPlayerRelation(secondTCQuery, cPlayerRelationEnemy);
   kbUnitQuerySetUnitType(secondTCQuery, cUnitTypeTownCenter);
   kbUnitQuerySetState(secondTCQuery, cUnitStateAlive);
   kbUnitQuerySetPosition(secondTCQuery, kbUnitGetPosition(tcID1));
   kbUnitQuerySetMaximumDistance(secondTCQuery, 500.0);

   kbUnitQueryResetResults(secondTCQuery);
   int tcCount = kbUnitQueryExecute(secondTCQuery);
   if (tcCount > 1)  // Found another enemy TC
   {
      tcID2 = kbUnitQueryGetResult(secondTCQuery, 1); // Second unit in list
      enemy2 = kbUnitGetPlayerID(tcID2);
   }
   
   if (tcID2 < 0)
      return;
   
   // We have two TCs.  See if we have a unit in range.  If so, send a taunt if appropriate.  Either way, shut the rule off.
   xsDisableSelf();
   
   if (enemy1 == enemy2)
      return;  // Makes no sense to taunt if the same player owns both...
   
   bool haveLOS = false;
   if (getUnitByLocation(cUnitTypeUnit, cMyID, cUnitStateAlive, kbUnitGetPosition(tcID1), 50.0) >= 0)
      haveLOS = true;
   if (getUnitByLocation(cUnitTypeUnit, cMyID, cUnitStateAlive, kbUnitGetPosition(tcID2), 50.0) >= 0)
      haveLOS = true;
   
   if (haveLOS == true)
   {
      float d = distance(kbUnitGetPosition(tcID1), kbUnitGetPosition(tcID2));
      if (d < 100.0)
      {  // Close together.  Taunt the two, flaring the other's bases.
         aiEcho("Enemy TCs are "+d+" meters apart.  Taunting for closeness.");
         sendStatement(enemy1, cAICommPromptToEnemyHisTCNearAlly, kbUnitGetPosition(tcID2)); // Taunt enemy 1 about enemy 2's TC
         sendStatement(enemy2, cAICommPromptToEnemyHisTCNearAlly, kbUnitGetPosition(tcID1)); // Taunt enemy 2 about enemy 1's TC
      }
      if (d > 200.0)
      {  // Far apart.  Taunt.
         aiEcho("Enemy TCs are "+d+" meters apart.  Taunting for isolation.");
         sendStatement(enemy1, cAICommPromptToEnemyHisTCIsolated, kbUnitGetPosition(tcID2)); // Taunt enemy 1 about enemy 2's TC
         sendStatement(enemy2, cAICommPromptToEnemyHisTCIsolated, kbUnitGetPosition(tcID1)); // Taunt enemy 2 about enemy 1's TC         
      }
      aiEcho("Enemy TCs are "+d+" meters apart.");
   }  // Otherwise, rule is turned off, we missed our chance.   
   else
   {
      aiEcho("Had no LOS to enemy TCs");
   }
}


rule monitorScores
inactive
minInterval 60
group tcComplete
{
   static int startingScores = -1;  // Array holding initial scores for each player
   static int highScores = -1;      // Array, each player's high-score mark
   static int teamScores = -1;
   int player = -1;
   int teamSize = 0;
   int myTeam = kbGetPlayerTeam(cMyID);
   int enemyTeam = -1;
   int highAllyScore = -1;
   int highAllyPlayer = -1;
   int highEnemyScore = -1;
   int highEnemyPlayer = -1;
   int score = -1;
   int firstHumanAlly = -1;
   
   if (aiGetGameType() != cGameTypeRandom)
   {
      xsDisableSelf();
      return;
   }
   
   if (highScores < 0)
   {
      highScores = xsArrayCreateInt(cNumberPlayers, 1, "High Scores");   // create array, init below.
   }
   if (startingScores < 0)
   {
      if (aiGetNumberTeams() != 3)  // Gaia, plus two
      {
         // Only do this if there are two teams with the same number of players on each team.
         xsDisableSelf();
         return;
      }
      startingScores = xsArrayCreateInt(cNumberPlayers, 1, "Starting Scores");   // init array
      for (player = 1; <cNumberPlayers)
      {
         score = aiGetScore(player);            
         aiEcho("Starting score for player "+player+" is "+score);
         xsArraySetInt(startingScores, player, score);
         xsArraySetInt(highScores, player, 0);     // High scores will track score actual - starting score, to handle deathmatch better.
      }
   }
   
   teamSize = 0;
   for (player = 1; <cNumberPlayers)
   {
      if (kbGetPlayerTeam(player) == myTeam)
      {
         teamSize = teamSize + 1;
         if ( (kbIsPlayerHuman(player) == true) && (firstHumanAlly < 1) )
            firstHumanAlly = player;
      }
      else
         enemyTeam = kbGetPlayerTeam(player);   // Don't know if team numbers are 0..1 or 1..2, this works either way.
   }

   if ( (2 * teamSize) != (cNumberPlayers - 1) )   // Teams aren't equal size
   {
      xsDisableSelf();
      return;
   }
      
   // If we got this far, there are two teams and each has 'teamSize' players.  Otherwise, rule turns off.
   if (teamScores < 0)
   {
      teamScores = xsArrayCreateInt(3, 0, "Team total scores");
   }
  
   if (firstHumanAlly < 0) // No point if we don't have a human ally.
   {
      xsDisableSelf();
      return;
   }
   
   // Update team totals, check for new high scores
   xsArraySetInt(teamScores, myTeam, 0);
   xsArraySetInt(teamScores, enemyTeam, 0);
   highAllyScore = -1;
   highEnemyScore = -1;
   highAllyPlayer = -1;
   highEnemyPlayer = -1;
   int lowestRemainingScore = 100000;   // Very high, will be reset by first real score 
   int lowestRemainingPlayer = -1;
   int highestScore = -1;
   int highestPlayer = -1;
   
   for (player = 1; <cNumberPlayers)
   {
      score = aiGetScore(player) - xsArrayGetInt(startingScores, player);  // Actual score relative to initial score
      if (kbHasPlayerLost(player) == true)
         continue;
      if (score < lowestRemainingScore)
      {
         lowestRemainingScore = score;
         lowestRemainingPlayer = player;
      }
      if (score > highestScore)
      {
         highestScore = score;
         highestPlayer = player;
      }
      if (score > xsArrayGetInt(highScores, player) )   
         xsArraySetInt(highScores, player, score);   // Set personal high score
      if (kbGetPlayerTeam(player) == myTeam)    // Update team scores, check for highs
      {
         xsArraySetInt(teamScores, myTeam, xsArrayGetInt(teamScores, myTeam) + score);
         if (score > highAllyScore)
         {
            highAllyScore = score;
            highAllyPlayer = player;
         }
      }
      else
      {
         xsArraySetInt(teamScores, enemyTeam, xsArrayGetInt(teamScores, enemyTeam) + score);
         if (score > highEnemyScore)
         {
            highEnemyScore = score;
            highEnemyPlayer = player;
         }
      }
   }

   // Bools used to indicate chat usage, prevent re-use.
   static bool enemyNearlyDead = false;
   static bool enemyStrong = false;
   static bool losingEnemyStrong = false;
   static bool losingEnemyWeak = false;
   static bool losingAllyStrong = false;
   static bool losingAllyWeak = false;
   static bool winningNormal = false;
   static bool winningAllyStrong = false;
   static bool winningAllyWeak = false;
   
   static int shouldResignCount = 0;   // Set to 1, 2 and 3 as chats are used.
   static int shouldResignLastTime = 420000;   // When did I last suggest resigning?  Consider it again 3 min later.          
                                                   // Defaults to 7 min, so first suggestion won't be until 10 minutes.
   
   // Attempt to fire chats, from most specific to most general.
   // When we chat, mark that one used and exit for now, i.e no more than one chat per rule execution.
   
   // First, check the winning / losing / tie situations.  
   // Bail if earlier than 12 minutes
   if (xsGetTime() < 60*1000*12)
      return;
   
   if (aiTreatyActive() == true)
      return;
   
   bool winning = false;
   bool losing = false;
   float ourAverageScore = (aiGetScore(cMyID) + aiGetScore(firstHumanAlly)) / 2.0;   
   
   if ( xsArrayGetInt(teamScores, myTeam) > (1.20 * xsArrayGetInt(teamScores, enemyTeam)) )
   {  // We are winning
      winning = true;
            
      // Are we winning because my ally rocks?
      if ( (winningAllyStrong == false) && (firstHumanAlly == highestPlayer) )
      {
         winningAllyStrong = true;
         sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreWinningHeIsStronger);
         return;
      }
      
      // Are we winning in spite of my weak ally?
      if ( (winningAllyWeak == false) && (cMyID == highestPlayer) )
      {
         winningAllyWeak = true;
         sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreWinningHeIsWeaker);
         return;
      }     

      // OK, we're winning, but neither of us has high score.
      if (winningNormal == false)
      {
         winningNormal = true;
         sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreWinning);
         return;
      }
   }  // End chats while we're winning.
   
   
   if ( xsArrayGetInt(teamScores, myTeam) < (0.70 * xsArrayGetInt(teamScores, enemyTeam)) )
   {  // We are losing
      losing = true;
      
      // Talk about resigning?
      if ( (shouldResignCount < 3) && ( (xsGetTime() - shouldResignLastTime) > 5*60*1000) )  // Haven't done it 3 times or within 5 minutes
      {
         switch(shouldResignCount)
         {
            case 0:
            {
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeShouldResign1);
               break;
            }
            case 1:
            {
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeShouldResign2);
               break;
            }
            case 2:
            {
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeShouldResign3);
               break;
            }
         }
         shouldResignCount = shouldResignCount + 1;
         shouldResignLastTime = xsGetTime();
         return;
      }  // End resign
      
      // Check for "we are losing but let's kill the weakling"
      if ( (losingEnemyWeak == false) && (kbIsPlayerEnemy(lowestRemainingPlayer) == true) )
      {
         switch(kbGetCivForPlayer(lowestRemainingPlayer))
         {
            case cCivRussians:
            {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakRussian);
               return;  
               break;
            }
            case cCivFrench:
            {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakFrench);
               return;
               break;
            }
            case cCivGermans:
            {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakGerman);
               return;  
               break;
            }
            case cCivBritish:
            {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakBritish);
               return;
               break;
            }
            case cCivSpanish:
            {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakSpanish);
               return;  
               break;
            }
            case cCivDutch:
            {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakDutch);
               return;
               break;
            }
            case cCivPortuguese:
            {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakPortuguese);
               return;  
               break;
            }
            case cCivOttomans:
            {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakOttoman);
               return;
               break;
            }
            case cCivJapanese:
            {
              if (civIsAsian() == true) {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakJapanese);
               return;
               break;
              }
            }
            case cCivChinese:
            {
              if (civIsAsian() == true) {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakChinese);
               return;
               break;
              }
            }
            case cCivIndians:
            {
              if (civIsAsian() == true) {
               losingEnemyWeak = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyWeakIndian);
               return;
               break;
              }
            }

         }
      }
      
      // Check for losing while enemy player has high score.
      if ( (losingEnemyStrong == false) && (kbIsPlayerEnemy(highestPlayer) == true) )
      {
         switch(kbGetCivForPlayer(highestPlayer))
         {
            case cCivRussians:
            {
               losingEnemyStrong = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongRussian);
               return;  
               break;
            }
            case cCivFrench:
            {
               losingEnemyStrong = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongFrench);
               return;
               break;
            }
            case cCivGermans:
            {
               losingEnemyStrong = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongGerman);
               return;  
               break;
            }
            case cCivBritish:
            {
               losingEnemyStrong = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongBritish);
               return;
               break;
            }
            case cCivSpanish:
            {
               losingEnemyStrong = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongSpanish);
               return;  
               break;
            }
            case cCivDutch:
            {
               losingEnemyStrong = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongDutch);
               return;
               break;
            }
            case cCivPortuguese:
            {
               losingEnemyStrong = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongPortuguese);
               return;  
               break;
            }
            case cCivOttomans:
            {
               losingEnemyStrong = true; // chat used.
               sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongOttoman);
               return;
               break;
            }
            case cCivJapanese:
              {
                if (civIsAsian() == true) {
                 losingEnemyStrong = true; // chat used.
                 sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongJapanese);
                 return;
                 break;
                }
              }
              case cCivChinese:
              {
                if (civIsAsian() == true) {
                 losingEnemyStrong = true; // chat used.
                 sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongChinese);
                 return;
                 break;
                }
              }
              case cCivIndians:
              {
                if (civIsAsian() == true) {
                 losingEnemyStrong = true; // chat used.
                 sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingEnemyStrongIndian);
                 return;
                 break;
                }
              }
         }
      }
      
      // If we're here, we're losing but our team has the high score.  If it's my ally, we're losing because I suck.
      if ( (losingAllyStrong == false) && (firstHumanAlly == highestPlayer) )
      {
         losingAllyStrong = true;
         sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingHeIsStronger);
         return;
      }
      if ( (losingAllyWeak == false) && (cMyID == highestPlayer) )
      {
         losingAllyWeak = true;
         sendStatement(firstHumanAlly, cAICommPromptToAllyWeAreLosingHeIsWeaker);
         return;
      }      
   }  // End chats while we're losing.
   
   if ( (winning == false) && (losing == false) )
   {  // Close game
      
      // Check for a near-death enemy
      if ( (enemyNearlyDead == false) && (kbIsPlayerEnemy(lowestRemainingPlayer) == true) )// Haven't used this chat yet
      {
         if ( (lowestRemainingScore * 2) < xsArrayGetInt(highScores, lowestRemainingPlayer) )   // He's down to half his high score.
         {
            switch(kbGetCivForPlayer(lowestRemainingPlayer))
            {
               case cCivRussians:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadRussian);
                  return;  
                  break;
               }
               case cCivFrench:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadFrench);
                  return;
                  break;
               }
               case cCivBritish:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadBritish);
                  return;
                  break;
               }
               case cCivSpanish:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadSpanish);
                  return;
                  break;
               }
               case cCivGermans:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadGerman);
                  return;
                  break;
               }
               case cCivOttomans:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadOttoman);
                  return;
                  break;
               }
               case cCivDutch:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadDutch);
                  return;
                  break;
               }
               case cCivPortuguese:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadPortuguese);
                  return;
                  break;
               }
               case cCivJapanese:
                {
                  if (civIsAsian() == true) {
                   enemyNearlyDead = true; // chat used.
                   sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadJapanese);
                   return;
                   break;
                  }
                }
                case cCivChinese:
                {
                  if (civIsAsian() == true) {
                   enemyNearlyDead = true; // chat used.
                   sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadChinese);
                   return;
                   break;
                  }
                }
                case cCivIndians:
                {
                  if (civIsAsian() == true) {
                   enemyNearlyDead = true; // chat used.
                   sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyNearlyDeadIndian);
                   return;
                   break;
                  }
                }
            }
         }
      }
      
      // Check for very strong enemy
      if ( (enemyStrong == false) && (kbIsPlayerEnemy(highestPlayer) == true) )
      {
         if ( (ourAverageScore * 1.5) < highestScore) 
         {  // Enemy has high score, it's at least 50% above our average.
            switch(kbGetCivForPlayer(highestPlayer))
            {
               case cCivRussians:
               {
                  enemyStrong = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongRussian);
                  return;  
                  break;
               }
               case cCivFrench:
               {
                  enemyStrong = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongFrench);
                  return;
                  break;
               }
               case cCivBritish:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongBritish);
                  return;
                  break;
               }
               case cCivSpanish:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongSpanish);
                  return;
                  break;
               }
               case cCivGermans:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongGerman);
                  return;
                  break;
               }
               case cCivOttomans:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongOttoman);
                  return;
                  break;
               }
               case cCivDutch:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongDutch);
                  return;
                  break;
               }
               case cCivPortuguese:
               {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongPortuguese);
                  return;
                  break;
               }
               case cCivJapanese:
               {
                 if (civIsAsian() == true) {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongJapanese);
                  return;
                  break;
                 }
               }
               case cCivChinese:
               {
                 if (civIsAsian() == true) {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongChinese);
                  return;
                  break;
                 }
               }
               case cCivIndians:
               {
                 if (civIsAsian() == true) {
                  enemyNearlyDead = true; // chat used.
                  sendStatement(firstHumanAlly, cAICommPromptToAllyEnemyStrongIndian);
                  return;
                  break;
                 }
               }
            }
         }
      }        
   }  // End chats for close game 
}


rule firstEnemyUnitSpotted
inactive
group startup
minInterval 5
{
   static int targetPlayer = -1;
   
   if (targetPlayer < 0)
   {
      targetPlayer = getEnemyPlayerByTeamPosition(getTeamPosition(cMyID));    // Corresponding player on other team
      if (targetPlayer < 0)
      {
         xsDisableSelf();
         aiEcho("No corresponding player on other team, firstEnemyUnitSpotted is deactivating.");
         aiEcho("    My team position is "+getTeamPosition(cMyID));
         return;
      }
      aiEcho("Rule firstEnemyUnitSpotted will watch for player #"+targetPlayer); 
   }
   
   if (kbUnitCount(targetPlayer, cUnitTypeLogicalTypeLandMilitary, cUnitStateAlive) > 0) 
   {  // We see one of this player's units for the first time...let's do some analysis on it
      int unitID = getUnit(cUnitTypeLogicalTypeLandMilitary, targetPlayer, cUnitStateAlive); // Get the (or one of the) enemy units
      if (unitID < 0)
      {
         aiEcho("kbUnitCount said there are enemies, but getUnit finds nothing.");
         return;
      }
      
      aiEcho("Enemy unit spotted at "+kbUnitGetPosition(unitID));
      aiEcho("My base is at "+kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
      aiEcho("Distance is "+distance(kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)), kbUnitGetPosition(unitID)));
      aiEcho("Unit ID is "+unitID);
      // Three tests in priority order....anything near my town, an explorer anywhere, or default.
      // In my town?
      if ( distance(kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)), kbUnitGetPosition(unitID)) < 40.0 )
      {
         sendStatement(targetPlayer, cAICommPromptToEnemyISeeHisFirstMilitaryMyTown, kbUnitGetPosition(unitID));
         aiEcho("Spotted a unit near my town, so I'm threatening player #"+targetPlayer);
         xsDisableSelf();         
         return;
      }
      // Is it an explorer?
      if ( kbUnitIsType(unitID, cUnitTypeExplorer) == true )
      {
         sendStatement(targetPlayer, cAICommPromptToEnemyISeeHisExplorerFirstTime, kbUnitGetPosition(unitID));
         aiEcho("Spotted an enemy explorer, so I'm threatening player #"+targetPlayer);
         xsDisableSelf();         
         return;
      }
      // Generic
      if (getUnitByLocation(cUnitTypeTownCenter, cPlayerRelationAny, cUnitStateAlive, kbUnitGetPosition(unitID), 70.0) < 0)   
      {  // No TCs nearby
         sendStatement(targetPlayer, cAICommPromptToEnemyISeeHisFirstMilitary, kbUnitGetPosition(unitID));
         aiEcho("Spotted an enemy military unit for the first time, so I'm threatening player #"+targetPlayer);
      }
      xsDisableSelf();         
      return;
   }
}

//==============================================================================
// main
//==============================================================================
void main(void)
{ 
	
   aiEcho("Main is starting.");
   aiEcho("Game type is "+aiGetGameType()+", 0=Scn, 1=Saved, 2=Rand, 3=GC, 4=Cmpgn");
   aiEcho("Map name is "+cRandomMapName);
   //xsSetContextPlayer(1);
   ////////////////Introduction////////////////
   int Player = -1; 
   int firstNonHumanplayer = -1;

   for (Player = 1; <cNumberPlayers)
   {
      if (kbIsPlayerHuman(Player) == false) 
      {
        firstNonHumanplayer = Player;
        break;
      }
   }
   /*
   if (cMyID == firstNonHumanplayer )
   {
      for (Player = 1; <cNumberPlayers)
      {  
         aiChat(Player, "AI changes made by SkyTeam,\nThis uses Felix Hermansson's Drauger AI as a base, but has\nvaried improvements. oh and artheru!");          
      }
   }*/
   ////////////////Introduction////////////////

   initArrays();              // Create the global arrays
   aiRandSetSeed(-1);         // Set our random seed.  "-1" is a random init.
   kbAreaCalculate();         // Analyze the map, create area matrix
   aiPopulatePoliticianList(); // Fill out the PoliticanLists.
   
   if ( (aiGetGameType() == cGameTypeCampaign) || (aiGetGameType() == cGameTypeScenario) )
      gSPC = true;
   else
      gSPC = false;  // RM game

   int intDifficulty = -1;
   float difficulty = aiGetWorldDifficulty();
   float diffRemainder = -1.0;
   intDifficulty = difficulty;
   diffRemainder = difficulty - intDifficulty;
   
   // Call the rule once as a function, to get all the pop limits set up.
   popManager();     
   
   aiEcho("I see "+kbUnitCount(cMyID, cUnitTypeHomeCityWaterSpawnFlag)+" water flags.");

   //-- setup the handicaps.
   // baseLineHandicap is a global multiplier that we can use to adjust all up or down.  Probably will remain at 1.0.
   // startingHandicap is the handicap set at game launch in the UI, i.e. boost this player 10% == 1.10.  That needs to be
   // multiplied by the appropriate difficulty for each level.
   float startingHandicap = kbGetPlayerHandicap(cMyID);
   switch(intDifficulty)
   {
	case cDifficultySandbox: // Sandbox
	{
	   kbSetPlayerHandicap( cMyID, startingHandicap * baselineHandicap * 0.3 );    // Set handicap to a small fraction of baseline, i.e. minus 70%.
           gDelayAttacks = true;      // Prevent attacks...actually stays that way, never turns true.
           cvOkToBuildForts = false;
 	   break;
	}
	case cDifficultyEasy: // Easiest
	{
           if (gSPC == true)
              kbSetPlayerHandicap( cMyID, startingHandicap * baselineHandicap * 0.5 ); // minus 50 percent for scenarios
           else
              kbSetPlayerHandicap( cMyID, startingHandicap * baselineHandicap * 0.4 ); // minus 60 percent
            
           gDelayAttacks = true;
           cvOkToBuildForts = false;
           xsEnableRule("delayAttackMonitor");    // Wait until I am attacked, then let slip the hounds of war.
	   break;
	}
	case cDifficultyModerate: // Moderate
	{
           if (gSPC == true)
              kbSetPlayerHandicap( cMyID, startingHandicap * baselineHandicap * 0.75 ); // minus 25% for scenarios
           else
              kbSetPlayerHandicap( cMyID, startingHandicap * baselineHandicap * 0.65 ); // minus 35%
	   break;
	}
	case cDifficultyHard: // Hard
	{
	   kbSetPlayerHandicap( cMyID, startingHandicap * baselineHandicap * 1.0 );    // 1.0 handicap at hard, i.e. no bonus
	   break;
	}
	case cDifficultyExpert: // Expert
	{
           kbSetPlayerHandicap( cMyID, startingHandicap * baselineHandicap * 1.5 );    // +50% boost.
           break;
	}
   }
   aiEcho("Handicap is "+kbGetPlayerHandicap(cMyID));
   aiEcho("Difficulty is "+aiGetWorldDifficulty());

   // Do some overrides for the SPC/campaign games before the loader file wakes up.
   SPCInit();

   // Find out what our personality is, init variables from it.
   initPersonality(); 
   
   // Allow loader file to change default values before we start.
   preInit();
   if (cvInactiveAI == true)
   {
      cvOkToSelectMissions = false;
      cvOkToTrainArmy = false;
      cvOkToAllyNatives = false;
      cvOkToClaimTrade = false;
      cvOkToGatherFood = false;
      cvOkToGatherGold = false;
      cvOkToGatherWood = false;
      cvOkToExplore = false;
      cvOkToResign  = false;
      cvOkToAttack = false;
   }
   
   // Figure out the starting conditions, and deal with them.
   if (gSPC == true)
   {     
      aiEcho("Start mode:  Scenario, details TBD after aiStart object is found.");
		// Wait for the aiStart unit to appear, then figure out what to do.
		// That rule will have to set the start mode to ScenarioTC or ScenarioNoTC.
      xsEnableRule("waitForStartup");     
   }
   else
   {  
      // RM or GC game
	aiSetRandomMap(true);
      // Check for a TC.
		if (kbUnitCount(cMyID, cUnitTypeTownCenter, cUnitStateAlive) > 0) 
      {  
			// TC start
         aiEcho("Start mode:  Land TC");
         gStartMode = cStartModeLandTC;
         // Call init directly.
			init();
      }
      else 
      {
         // Check for a Boat.
			if (kbUnitCount(cMyID, cUnitTypeAbstractWarShip, cUnitStateAlive) > 0) 
         {
            gStartMode = cStartModeBoat;
            aiEcho("Start mode: Boat");
            // Needed for first transport unloading 
				aiSetHandler("transportArrive", cXSHomeCityTransportArriveHandler);	

            // Rule that fires after 30 seconds in case
				// something goes wrong with unloading
				xsEnableRule("transportArriveFailsafe");	
         }
         else
         {  
				// This must be a land nomad start
            aiEcho("Start mode:  Land Wagon");
            gStartMode = cStartModeLandWagon;  
            // Call the function that sets up explore plans, etc.
				transportArrive();
         }
      }
   }

	//-- set the default Resource Selector factor.
	kbSetTargetSelectorFactor(cTSFactorDistance, gTSFactorDistance);
	kbSetTargetSelectorFactor(cTSFactorPoint, gTSFactorPoint);
	kbSetTargetSelectorFactor(cTSFactorTimeToDone, gTSFactorTimeToDone);
	kbSetTargetSelectorFactor(cTSFactorBase, gTSFactorBase);
	kbSetTargetSelectorFactor(cTSFactorDanger, gTSFactorDanger);
   
   xsEnableRule("autoSave");
   // Trigger first autosave immediately
	autoSave(); 
 
   // postInit() is called by transportArrive() or by the waitForStartup rule.
}



rule waitForStartup
inactive
minInterval 1
{
   if (kbUnitCount(cMyID, cUnitTypeAIStart, cUnitStateAny) < 1)
      return;
   xsDisableSelf();
   
   if (kbUnitCount(cMyID, cUnitTypeTownCenter, cUnitStateAlive) > 0)
   {
      aiEcho("Start mode:  Scenario TC.");
      gStartMode = cStartModeScenarioTC;
   }
   else
   {
      if (kbUnitCount(cMyID, gCoveredWagonUnit, cUnitStateAlive) > 0)
      {
         aiEcho("Start mode:  Scenario wagon.");
         gStartMode = cStartModeScenarioWagon;
      }
      else
      {
         aiEcho("Start mode:  Scenario, no TC.");
         gStartMode = cStartModeScenarioNoTC;
      }
   }
   if (cvInactiveAI == false)
      transportArrive();
}

void testHandler(int parm=-1)
{
   aiEcho("StateChanged EventHandlerCalled with PlanID " + parm);
}


//==============================================================================
// RULE fillInWallGaps
//==============================================================================
rule fillInWallGaps
   minInterval 15
   inactive
{
   //If we're not building walls, then start.
   if (gBuildWalls == false)
   {
      xsEnableRule("turtleUp");
      return;
   }

   //If we already have a build wall plan, don't make another one.
   if(aiPlanGetIDByTypeAndVariableType(cPlanBuildWall, cBuildWallPlanWallType, cBuildWallPlanWallTypeRing, true) >= 0)
      return;

   int wallPlanID=aiPlanCreate("FillInWallGaps", cPlanBuildWall);
   if (wallPlanID != -1)
   {
         aiPlanSetVariableInt(wallPlanID, cBuildWallPlanWallType, 0, cBuildWallPlanWallTypeRing);
         aiPlanAddUnitType(wallPlanID, gEconUnit, 1, 1, 1);
         aiPlanSetVariableVector(wallPlanID, cBuildWallPlanWallRingCenterPoint, 0, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
         aiPlanSetVariableFloat(wallPlanID, cBuildWallPlanWallRingRadius, 0.0, 55.0);
         aiPlanSetVariableInt(wallPlanID, cBuildWallPlanNumberOfGates, 0, 30);
         aiPlanSetBaseID(wallPlanID, kbBaseGetMainID(cMyID));
         aiPlanSetEscrowID(wallPlanID, cEconomyEscrowID);
         aiPlanSetDesiredPriority(wallPlanID,80);
         aiPlanSetActive(wallPlanID, true);
   }
}

//==============================================================================
// RULE fillInWallGapsAgressive
//==============================================================================
rule fillInWallGapsAgressive
   minInterval 36
   inactive
{
   //If we're not building walls, then start.
   if (gBuildWalls == false)
   {
      xsEnableRule("turtleUp");
      return;
   }

   //If we already have a build wall plan, don't make another one. (We try to build a second agressive wall after our first preliminary one now)
   if(aiPlanGetIDByTypeAndVariableType(cPlanBuildWall, cBuildWallPlanWallType, cBuildWallPlanWallTypeRing, true) >= 1)
      return;

   int wallPlanID=aiPlanCreate("FillInWallGapsAgressive", cPlanBuildWall);
   if (wallPlanID != -1)
   {
         aiPlanSetVariableInt(wallPlanID, cBuildWallPlanWallType, 0, cBuildWallPlanWallTypeRing);
         aiPlanAddUnitType(wallPlanID, gEconUnit, 1, 1, 1);
         aiPlanSetVariableVector(wallPlanID, cBuildWallPlanWallRingCenterPoint, 0, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
         aiPlanSetVariableFloat(wallPlanID, cBuildWallPlanWallRingRadius, 0.0, 70.0);
         aiPlanSetVariableInt(wallPlanID, cBuildWallPlanNumberOfGates, 0, 40);
         aiPlanSetBaseID(wallPlanID, kbBaseGetMainID(cMyID));
         aiPlanSetEscrowID(wallPlanID, cEconomyEscrowID);
         aiPlanSetDesiredPriority(wallPlanID,70);
         aiPlanSetActive(wallPlanID, true);
   }
}

void monopolyStartHandler(int teamID=-1)
{
   aiEcho("     ");
   aiEcho("     ");
   aiEcho("     ");
   aiEcho("MonopolyStartHandler:  Team "+teamID);
   if (teamID < 0)
      return;
   
   // If this is my team, congratulate teammates and taunt enemies
   if ( kbGetPlayerTeam(cMyID) == teamID)
   {
      sendStatement(cPlayerRelationAlly, cAICommPromptToAllyWhenWeGetMonopoly, cInvalidVector);
      sendStatement(cPlayerRelationEnemyNotGaia, cAICommPromptToEnemyWhenWeGetMonopoly, cInvalidVector);
   }
   else // Otherwise, snide comment to enemies and condolences to partners
   {
      sendStatement(cPlayerRelationAlly, cAICommPromptToAllyWhenEnemiesGetMonopoly, cInvalidVector);
      sendStatement(cPlayerRelationEnemyNotGaia, cAICommPromptToEnemyWhenTheyGetMonopoly, cInvalidVector);
   }      
   gIsMonopolyRunning = true;
   gMonopolyTeam = teamID;
   gMonopolyEndTime = xsGetTime() + 5*60*1000; 
   xsEnableRule("monopolyTimer");
}


void monopolyEndHandler(int teamID=-1)
{
   aiEcho("     ");
   aiEcho("     ");
   aiEcho("     ");
   aiEcho("MonopolyEndHandler:  Team "+teamID);
   if (teamID < 0)
      return;
   // If this is my team, console partners, and send defiant message to enemies
   if ( kbGetPlayerTeam(cMyID) == teamID)
   {
      sendStatement(cPlayerRelationAlly, cAICommPromptToAllyEnemyDestroyedMonopoly, cInvalidVector);
      sendStatement(cPlayerRelationEnemyNotGaia, cAICommPromptToEnemyTheyDestroyedMonopoly, cInvalidVector);
   }
   else // Otherwise, gloat at enemies
   {
      sendStatement(cPlayerRelationEnemyNotGaia, cAICommPromptToEnemyIDestroyedMonopoly, cInvalidVector);
   }         
   gIsMonopolyRunning = false;
   gMonopolyTeam = -1;
   gMonopolyEndTime = -1;
   xsDisableRule("monopolyTimer");
}

rule monopolyTimer
inactive
minInterval 5
{
   if ((gIsMonopolyRunning == false) || (gMonopolyEndTime < 0))
   {
      xsDisableSelf();
      return;
   }
   if (xsGetTime() > gMonopolyEndTime)
   {
      // If this is my team, congratulate teammates and taunt enemies
      if (kbGetPlayerTeam(cMyID) == gMonopolyTeam)
      {
         sendStatement(cPlayerRelationAlly, cAICommPromptToAlly1MinuteLeftOurMonopoly, cInvalidVector);
         sendStatement(cPlayerRelationEnemyNotGaia, cAICommPromptToEnemy1MinuteLeftOurMonopoly, cInvalidVector);
      }
      else // Otherwise, snide comment to enemies and panic to partners
      {
         sendStatement(cPlayerRelationAlly, cAICommPromptToAlly1MinuteLeftEnemyMonopoly, cInvalidVector);
         sendStatement(cPlayerRelationEnemyNotGaia, cAICommPromptToEnemy1MinuteLeftEnemyMonopoly, cInvalidVector);
      }       
      xsDisableSelf();
      return;
   }
}

rule monopolyManager
minInterval 21
inactive
group tcComplete
{
   if (aiTreatyActive() == true)
   {
      aiEcho("Monopoly delayed because treaty is active.");
      return;
   }
   if (aiIsMonopolyAllowed() == false)
   {
      aiEcho("Monopoly not allowed, terminating rule.");
      xsDisableSelf();
   }
   if ( kbUnitCount(cMyID, cUnitTypeTradingPost, cUnitStateAlive) < 1)
      return;     // Not allowed to research without a building...

   if (aiReadyForTradeMonopoly() == true)
   {
      aiEcho("Trade monopoly is available.");
      if (kbResourceGet(cResourceGold) >= kbTechCostPerResource(cTechTradeMonopoly, cResourceGold) && 
          kbResourceGet(cResourceFood) >= kbTechCostPerResource(cTechTradeMonopoly, cResourceFood) &&
          kbResourceGet(cResourceWood) >= kbTechCostPerResource(cTechTradeMonopoly, cResourceWood))
      {
         aiEcho("Attempting trade monopoly");
         if (aiDoTradeMonopoly() == true)
            kbEscrowAllocateCurrentResources();
      }
      else
      {
         aiEcho("....but I can't afford it.");
      }
   }
}


void KOTHVictoryStartHandler(int teamID=-1)
{
   int newOppID = -1;
   
   aiEcho("     ");
   aiEcho("     ");
   aiEcho("     ");
   aiEcho("KOTHStartHandler:  Team "+teamID);
   if (teamID < 0)
      return;
      
   gIsKOTHRunning = true;
   gKOTHTeam = teamID;
}


void KOTHVictoryEndHandler(int teamID=-1)
{
   aiEcho("     ");
   aiEcho("     ");
   aiEcho("     ");
   aiEcho("KOTHEndHandler:  Team "+teamID);
   if (teamID < 0)
      return;
      
   gIsKOTHRunning = false;
   gKOTHTeam = -1;
}


//==============================================================================
// New rules for the Draugur AI
//==============================================================================
/*rule escrowLeak
inactive
group tcComplete
minInterval 1
{ 
   // Watch escrows, breakpoint the second a leak is spotted
   static float biggestError = 1.0;  // Don't react to errors smaller than this, ratchet up as new leaks are found
   if (cMyID != 1)
   {
      xsDisableSelf();
      return;
   }
   int resource = 0;
   float error = 0.0;
   bool errorDetected = false;
   int maxEscrows = 10;
   int escrow = 0;
   float cumulativeAmount = 0.0;
   static int consecutiveFailures = 0;
   
   for (resource = 0; < 2)
   {
      cumulativeAmount = 0.0;
      for (escrow = 0; < maxEscrows)
      {
         if (kbEscrowGetAmount(escrow, resource) > 0.0)  // returns -1 if this account doesn't exist
            cumulativeAmount = cumulativeAmount + kbEscrowGetAmount(escrow, resource);
      }
      error = kbResourceGet(resource) - cumulativeAmount;
      if (error < 0)
         error = error * -1.0;      // Just care about absolute value
      if (error > biggestError)
      {
         errorDetected = true;
         if (consecutiveFailures >= 2)    // Don't react to transient timing errors...wait for an error that lasts 3 seconds.
         {
            biggestError = error * 1.1;   // Need to get 10% bigger before firing again.
            //breakpoint;
            aiEcho("Error for resource "+resource+" is "+error);
            aiEcho("Escrow total is "+cumulativeAmount+", actual total is "+kbResourceGet(resource));
            consecutiveFailures = 0;
         }
      }
   }
   if (errorDetected == true)
      consecutiveFailures = consecutiveFailures + 1;
   else
      consecutiveFailures = 0;
}

BHG: the AI cannot handle properly
rule idleFishingBoatCheck
minInterval 10
inactive
{   
   //Get a count of fish.
   int fishCount=kbUnitCount(0, cUnitTypeAbstractFish, cUnitStateAlive);
   if (fishCount > 0)
      return;

   //Firstly, create/get our query.
   //Secondly,find a idle fish Boat to delete.
   static int fishingBoatQuery=-1;
   if (fishingBoatQuery < 0)
   {
      fishingBoatQuery=kbUnitQueryCreate("fishingBoat");
      if (fishingBoatQuery < 0)
      {
         xsDisableSelf();
         return;
      }
   }
   kbUnitQuerySetPlayerID(fishingBoatQuery, cMyID);
   kbUnitQuerySetUnitType(fishingBoatQuery, gFishingUnit);
   kbUnitQuerySetState(fishingBoatQuery, cUnitStateAlive);
   kbUnitQueryResetResults(fishingBoatQuery);
   int numberFishingBoat = kbUnitQueryExecute(fishingBoatQuery);
   for (i=0; < numberFishingBoat)
   {
       int fishingBoatID=kbUnitQueryGetResult(fishingBoatQuery, i);
       if (aiTaskUnitDelete(fishingBoatID) == true)
          return;
   }
}
*/
/*
rule repairBuilding
minInterval 10
active
{   
  
   //Firstly, create/get our query.
   //Secondly,find a building to repair.
   static int buildingQuery=-1;
   if (buildingQuery < 0)
   {
      buildingQuery=kbUnitQueryCreate("building");
      if (buildingQuery < 0)
      {
         xsDisableSelf();
         return;
      }
   }
   kbUnitQuerySetPlayerID(buildingQuery, cMyID);
   kbUnitQuerySetUnitType(buildingQuery, cUnitTypeBuildingsThatShoot);
   kbUnitQuerySetState(buildingQuery, cUnitStateAlive);
   kbUnitQueryResetResults(buildingQuery);
   int numberBuilding = kbUnitQueryExecute(buildingQuery);
   for (i=0; < numberBuilding)
   {
       int buildingID=kbUnitQueryGetResult(buildingQuery, i);
       //if (aiTaskUnitRepair(buildingID) == true)
       if ( (kbUnitGetCurrentHitpoints(buildingID) <= 0) || (kbUnitGetHealth(buildingID) > 0.99) )
          return;
       else          
         aiTaskUnitRepair(buildingID, cUnitTypeBuilding); 
        return;
       //if (aiTaskUnitDelete(fishingBoatID) == true)
   }
}
*/

rule upgradeWallConnector
inactive
minInterval 30
{
   // Must be setup for wood and Gold before we do any of this.
   if ( (kbResourceGet(cResourceWood) < 400) && (kbResourceGet(cResourceGold) < 600) )
      return;

   if (kbTechGetStatus(cTechBastion) == cTechStatusActive)
   {
      xsDisableSelf();
      return;
   }
   int WallConnector = getUnit(cUnitTypeWallConnector, cMyID, cUnitStateAlive);
   if (WallConnector >= 0)
   {
      createSimpleResearchPlan(cTechBastion,WallConnector,cEconomyEscrowID, 80);
      xsDisableSelf();	
   }

} 

/*
rule priestMonitor
inactive
minInterval 10
{
   static int priestPlan = -1;

   // Create maintain plan (for European only)
   if ((cMyCiv == cCivBritish) || (cMyCiv == cCivFrench) || (cMyCiv == cCivRussians) || (cMyCiv == cCivGermans) || (cMyCiv == cCivDutch) || (cMyCiv == cCivPortuguese))
   {
      if (priestPlan < 0)
      {
         priestPlan = createSimpleMaintainPlan(cUnitTypePriest, 2, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when priest available
   if (kbUnitCount(cMyID, cUnitTypePriest) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}
*/

rule missionaryMonitor
inactive
minInterval 10
{
   static int missionaryPlan = -1;

   // Create maintain plan (for Spanish only)
   if (cMyCiv == cCivSpanish)
   {
      if (missionaryPlan < 0)
      {
         missionaryPlan = createSimpleMaintainPlan(cUnitTypeMissionary, 5, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when missionary available
   if (kbUnitCount(cMyID, cUnitTypeMissionary) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}

/*
rule imamMonitor
inactive
minInterval 10
{
   static int imamPlan = -1;

   // Create maintain plan (for Ottoman only)
   if (cMyCiv == cCivOttomans)
   {
      if (imamPlan < 0)
      {
         imamPlan = createSimpleMaintainPlan(cUnitTypeImam, 2, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when imam available
   if (kbUnitCount(cMyID, cUnitTypeImam) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}
*/

rule envoyMonitor
inactive
minInterval 10
{
   static int envoyPlan = -1;

   // Create maintain plan (for Dutch only)
   if (cMyCiv == cCivDutch)
   {
      if (envoyPlan < 0)
      {
         envoyPlan = createSimpleMaintainPlan(cUnitTypeEnvoy, 1, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when envoy available
   if ((kbUnitCount(cMyID, cUnitTypeEnvoy) == 0) || (cvOkToExplore == false))
   {
      return;
   }

   // Create explore plan
   int envoyExplore = aiPlanCreate("Envoy Explore", cPlanExplore);
   aiPlanSetDesiredPriority(envoyExplore, 99);
   aiPlanAddUnitType(envoyExplore, cUnitTypeEnvoy, 1, 1, 1);
   aiPlanSetEscrowID(envoyExplore, cEconomyEscrowID);
   aiPlanSetBaseID(envoyExplore, kbBaseGetMainID(cMyID));
   aiPlanSetVariableBool(envoyExplore, cExplorePlanDoLoops, 0, false);
   aiPlanSetActive(envoyExplore);

   // Disable rule
   xsDisableSelf();   
}


rule nativeScoutMonitor
inactive
minInterval 10
{
   static int nativeScoutPlan = -1;

   // Create maintain plan (for native only)
   if (civIsNative() == true)
   {
      if (nativeScoutPlan < 0)
      {
         nativeScoutPlan = createSimpleMaintainPlan(cUnitTypeNativeScout, 5, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when native scout available
   if ((kbUnitCount(cMyID, cUnitTypeNativeScout) == 0) || (cvOkToExplore == false))
   {
      return;
   }

   // Create explore plan
   int nativeExplore = aiPlanCreate("Native Explore", cPlanExplore);
   aiPlanSetDesiredPriority(nativeExplore, 99);
   aiPlanAddUnitType(nativeExplore, cUnitTypeNativeScout, 5, 1, 1);
   aiPlanSetEscrowID(nativeExplore, cEconomyEscrowID);
   aiPlanSetBaseID(nativeExplore, kbBaseGetMainID(cMyID));
   aiPlanSetVariableBool(nativeExplore, cExplorePlanDoLoops, 0, false);
   aiPlanSetActive(nativeExplore);

   // Disable rule
   xsDisableSelf();      
}


rule mongolScoutMonitor
inactive
minInterval 10
{
   // Create plan only when mongol scout available
   if ((kbUnitCount(cMyID, cUnitTypeypMongolScout) == 0) || (cvOkToExplore == false))
   {
      return;
   }

   // Create explore plan
   int mongolExplore = aiPlanCreate("Mongol Explore", cPlanExplore);
   aiPlanSetDesiredPriority(mongolExplore, 99);
   aiPlanAddUnitType(mongolExplore, cUnitTypeypMongolScout, 1, 1, 1);
   aiPlanSetEscrowID(mongolExplore, cEconomyEscrowID);
   aiPlanSetBaseID(mongolExplore, kbBaseGetMainID(cMyID));
   aiPlanSetVariableBool(mongolExplore, cExplorePlanDoLoops, 0, false);
   aiPlanSetActive(mongolExplore);

   // Disable rule
   xsDisableSelf();      
}
/*
rule musketeerMonitor
inactive
minInterval 20
{
   static int musketeerPlan = -1;

   // Create maintain plan (for Russians only)
   if (cMyCiv == cCivRussians)
   {
      if (musketeerPlan < 0)
      {
         musketeerPlan = createSimpleMaintainPlan(cUnitTypeMusketeer, 10, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when musketeer available
   if (kbUnitCount(cMyID, cUnitTypeMusketeer) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}

rule grenadierMonitor
inactive
minInterval 10
{
   static int grenadierPlan = -1;

   // Create maintain plan
   if ((cMyCiv == cCivBritish) || (cMyCiv == cCivRussians) || (cMyCiv == cCivOttomans))
   {
      if (grenadierPlan < 0)
      {
         grenadierPlan = createSimpleMaintainPlan(cUnitTypeGrenadier, 8, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when grenadier available
   if (kbUnitCount(cMyID, cUnitTypeGrenadier) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}


rule organgunMonitor
inactive
minInterval 10
{
   static int organgunPlan = -1;

   // Create maintain plan (for Portuguese only)
   if (cMyCiv == cCivPortuguese)
   {
      if (organgunPlan < 0)
      {
         organgunPlan = createSimpleMaintainPlan(cUnitTypeOrganGun, 5, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when organgun available
   if (kbUnitCount(cMyID, cUnitTypeOrganGun) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}

rule oprichnikMonitor
inactive
minInterval 20
{
   static int oprichnikPlan = -1;

   // Create maintain plan (for Russians only)
   if (cMyCiv == cCivRussians)
   {
      if (oprichnikPlan < 0)
      {
         oprichnikPlan = createSimpleMaintainPlan(cUnitTypeOprichnik, 10, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when oprichnik available
   if (kbUnitCount(cMyID, cUnitTypeOprichnik) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}


rule flamethrowerMonitor
inactive
minInterval 10
{
   static int flamethrowerPlan = -1;

   // Create maintain plan (for Chinese only)
   if ( (kbGetCiv() == cCivChinese) || (kbGetCiv() == cCivSPCChinese) ) 
   {
      if (flamethrowerPlan < 0)
      {
         flamethrowerPlan = createSimpleMaintainPlan(cUnitTypeypFlameThrower, 8, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when flamethrower available
   if (kbUnitCount(cMyID, cUnitTypeypFlameThrower) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}


rule fireshipMonitor
inactive
minInterval 60
{
   static int fireshipPlan = -1;

   // Create maintain plan (for Chinese only)
   if ( (kbGetCiv() == cCivChinese) || (kbGetCiv() == cCivSPCChinese) ) 
   {
      if (fireshipPlan < 0)
      {
         fireshipPlan = createSimpleMaintainPlan(cUnitTypeypFireship, 10, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when fireship available
   if (kbUnitCount(cMyID, cUnitTypeypFireship) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}
*/

rule daimyoMonitor
inactive
minInterval 10
{
   static int masamunePlan = -1;
   static int kiyomasaPlan = -1;
   static int mototadaPlan = -1;
   static int tokugawaPlan = -1;
      
   // Create maintain plan (for Japanese only)
   if ( (kbGetCiv() == cCivJapanese) || (kbGetCiv() == cCivSPCJapanese) ) 
   {
      if (masamunePlan < 0)
      {
         masamunePlan = createSimpleMaintainPlan(cUnitTypeypDaimyoMasamune, 1, false, kbBaseGetMainID(cMyID));
      }
   }
   // Create plan only when masamune available
   if (kbUnitCount(cMyID, cUnitTypeypDaimyoMasamune) == 0)
   {
      return;
   }
   
   // Create maintain plan (for Japanese only)
   if ( (kbGetCiv() == cCivJapanese) || (kbGetCiv() == cCivSPCJapanese) ) 
   {
      if (kiyomasaPlan < 0)
      {
         kiyomasaPlan = createSimpleMaintainPlan(cUnitTypeypDaimyoKiyomasa, 1, false, kbBaseGetMainID(cMyID));
      }
   }
   // Create plan only when kiyomasa available
   if (kbUnitCount(cMyID, cUnitTypeypDaimyoKiyomasa) == 0)
   {
      return;
   }
   
   // Create maintain plan (for Japanese only)
   if ( (kbGetCiv() == cCivJapanese) || (kbGetCiv() == cCivSPCJapanese) ) 
   {
      if (mototadaPlan < 0)
      {
         mototadaPlan = createSimpleMaintainPlan(cUnitTypeypDaimyoMototada, 1, false, kbBaseGetMainID(cMyID));
      }
   }
   // Create plan only when mototada available
   if (kbUnitCount(cMyID, cUnitTypeypDaimyoMototada) == 0)
   {
      return;
   }

   // Create maintain plan (for Japanese only)
   if ( (kbGetCiv() == cCivJapanese) || (kbGetCiv() == cCivSPCJapanese) ) 
   {
      if (tokugawaPlan < 0)
      {
         tokugawaPlan = createSimpleMaintainPlan(cUnitTypeypShogunTokugawa, 1, false, kbBaseGetMainID(cMyID));
      }
   }
   // Create plan only when mototada available
   if (kbUnitCount(cMyID, cUnitTypeypShogunTokugawa) == 0)
   {
      return;
   }   
         
   // Disable rule
   xsDisableSelf();   
}

rule daimyoMasamuneMonitor
inactive
group tcComplete
minInterval 60
{
   if (kbGetCiv() != cCivJapanese)
   {
      xsDisableSelf();
      return;
   }

  
   float totalResources = kbResourceGet(cResourceFood) + kbResourceGet(cResourceWood) + kbResourceGet(cResourceGold);
   
   //gotta find the masamune
   static int masamuneQuery=-1;
   if (masamuneQuery < 0)
   {
      masamuneQuery=kbUnitQueryCreate("Daimyomasamune");
      if (masamuneQuery < 0)
      {
         xsDisableSelf();
         return;
      }
   }
   kbUnitQuerySetPlayerID(masamuneQuery, cMyID);
   kbUnitQuerySetUnitType(masamuneQuery, cUnitTypeypDaimyoMasamune);
   kbUnitQuerySetState(masamuneQuery, cUnitStateAlive);
   kbUnitQueryResetResults(masamuneQuery);
   int numberFound = kbUnitQueryExecute(masamuneQuery);
   
   for (i=0; < numberFound)
   {      
      int daimyoMasamuneID=kbUnitQueryGetResult(masamuneQuery, i);   
	  
   int enemyCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationEnemyNotGaia, cUnitStateAlive, kbUnitGetPosition(daimyoMasamuneID), 40.0);
   
      //if ( (kbResourceGet(cResourceFood) > (totalResources / 10.0) ) && (kbResourceGet(cResourceGold) > (totalResources / 10.0)) )
	  if (enemyCount>=5){
        aiTaskUnitTrain(daimyoMasamuneID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoMasamuneID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoMasamuneID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoMasamuneID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoMasamuneID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoMasamuneID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoMasamuneID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoMasamuneID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoMasamuneID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoMasamuneID, cUnitTypeypAshigaru); 
		}
      // We need to set fast mode
      xsSetRuleMinIntervalSelf(1);
      aiEcho("Going to fast mode.");                                 
      return;
   }   
}

rule daimyoKiyomasaMonitor
inactive
group tcComplete
minInterval 60
{
   if (kbGetCiv() != cCivJapanese)
   {
      xsDisableSelf();
      return;
   }
      

   float totalResources = kbResourceGet(cResourceFood) + kbResourceGet(cResourceWood) + kbResourceGet(cResourceGold);
   
   //gotta find the kiyomasa
   static int kiyomasaQuery=-1;
   if (kiyomasaQuery < 0)
   {
      kiyomasaQuery=kbUnitQueryCreate("Daimyokiyomasa");
      if (kiyomasaQuery < 0)
      {
         xsDisableSelf();
         return;
      }
   }
   kbUnitQuerySetPlayerID(kiyomasaQuery, cMyID);
   kbUnitQuerySetUnitType(kiyomasaQuery, cUnitTypeypDaimyoKiyomasa);
   kbUnitQuerySetState(kiyomasaQuery, cUnitStateAlive);
   kbUnitQueryResetResults(kiyomasaQuery);
   int numberFound = kbUnitQueryExecute(kiyomasaQuery);

   for (i=0; < numberFound)
   {        
      int daimyokiyomasaID=kbUnitQueryGetResult(kiyomasaQuery, i);
   int enemyCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationEnemyNotGaia, cUnitStateAlive, kbUnitGetPosition(daimyokiyomasaID), 40.0);
   
      //if ( (kbResourceGet(cResourceFood) > (totalResources / 10.0) ) && (kbResourceGet(cResourceGold) > (totalResources / 10.0)) )
	  if (enemyCount>=5){
        aiTaskUnitTrain(daimyokiyomasaID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyokiyomasaID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyokiyomasaID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyokiyomasaID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyokiyomasaID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyokiyomasaID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyokiyomasaID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyokiyomasaID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyokiyomasaID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyokiyomasaID, cUnitTypeypAshigaru); 
		}
      // We need to set fast mode
      xsSetRuleMinIntervalSelf(1);
      aiEcho("Going to fast mode.");                       
      return;
   }   
}

rule daimyoMototadaMonitor
inactive
group tcComplete
minInterval 60
{
   if (kbGetCiv() != cCivJapanese) 
   {
      xsDisableSelf();
      return;
   }
  
   float totalResources = kbResourceGet(cResourceFood) + kbResourceGet(cResourceWood) + kbResourceGet(cResourceGold);
   
   //gotta find the daimyo
   static int daimyoQueryID=-1;
   //If we don't have the query yet, create one.
   if (daimyoQueryID < 0)
   {
      daimyoQueryID=kbUnitQueryCreate("daimyoGetUnitQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(daimyoQueryID, true);
   }
   //Define a query to get all matching units
   if (daimyoQueryID != -1) 
   {
      kbUnitQuerySetPlayerRelation(daimyoQueryID, -1);
      kbUnitQuerySetPlayerID(daimyoQueryID, cMyID);
      kbUnitQuerySetUnitType(daimyoQueryID, cUnitTypeypDaimyoMototada);      
      kbUnitQuerySetState(daimyoQueryID, cUnitStateAlive);
   }
   else 
   {  return;  }

    kbUnitQueryResetResults(daimyoQueryID);
    int numberFound = kbUnitQueryExecute(daimyoQueryID);
    
    for (i=0; < numberFound)
    {         
       int daimyoID=kbUnitQueryGetResult(daimyoQueryID, i);
   int enemyCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationEnemyNotGaia, cUnitStateAlive, kbUnitGetPosition(daimyoID), 40.0);
   
      //if ( (kbResourceGet(cResourceFood) > (totalResources / 10.0) ) && (kbResourceGet(cResourceGold) > (totalResources / 10.0)) )
	  if (enemyCount>=5){
        aiTaskUnitTrain(daimyoID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoID, cUnitTypeypAshigaru); 
        aiTaskUnitTrain(daimyoID, cUnitTypeypAshigaru); 
		}
       // We need to set fast mode
       xsSetRuleMinIntervalSelf(1);
       aiEcho("Going to fast mode.");              
       return;
    }
}

rule daimyoTokugawaMonitor
inactive
group tcComplete
minInterval 60
{
   if (kbGetCiv() != cCivJapanese) 
   {
      xsDisableSelf();
      return;
   }
  
   //gotta find the tokugawa
   static int tokugawaQueryID=-1;
   //If we don't have the query yet, create one.
   if (tokugawaQueryID < 0)
   {
      tokugawaQueryID=kbUnitQueryCreate("tokugawaGetUnitQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(tokugawaQueryID, true);
   }
   //Define a query to get all matching units
   if (tokugawaQueryID != -1) 
   {
      kbUnitQuerySetPlayerRelation(tokugawaQueryID, -1);
      kbUnitQuerySetPlayerID(tokugawaQueryID, cMyID);
      kbUnitQuerySetUnitType(tokugawaQueryID, cUnitTypeypShogunTokugawa);      
      kbUnitQuerySetState(tokugawaQueryID, cUnitStateAlive);
   }
   else 
   {  return;  }

    kbUnitQueryResetResults(tokugawaQueryID);
    int numberFound = kbUnitQueryExecute(tokugawaQueryID);
    
    for (i=0; < numberFound)
    {       
       int tokugawaID=kbUnitQueryGetResult(tokugawaQueryID, i);       
         aiTaskUnitTrain(tokugawaID, cUnitTypeypFlamingArrow); 
       // We need to set fast mode
       xsSetRuleMinIntervalSelf(1);
       aiEcho("Going to fast mode.");    
       return;
    }
}

/*
rule shogunMonitor
inactive
minInterval 10
{
   static int shogunPlan = -1;

   // Create maintain plan (for Japanese only)
   if ( (kbGetCiv() == cCivJapanese) || (kbGetCiv() == cCivSPCJapanese) ) 
   {
      if (shogunPlan < 0)
      {
         shogunPlan = createSimpleMaintainPlan(cUnitTypeypShogunTokugawa, 1, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when shogun available
   if (kbUnitCount(cMyID, cUnitTypeypShogunTokugawa) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}


rule arrowknightMonitor
inactive
minInterval 10
{
   static int arrowknightPlan = -1;

   // Create maintain plan (for Aztec only)
   if (cMyCiv == cCivXPAztec)
   {
      if (arrowknightPlan < 0)
      {
         arrowknightPlan = createSimpleMaintainPlan(cUnitTypexpArrowKnight, 10, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when arrowknight available
   if (kbUnitCount(cMyID, cUnitTypexpArrowKnight) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}

rule tlaloccanoeMonitor
inactive
minInterval 60
{
   static int tlaloccanoePlan = -1;

   // Create maintain plan (for Aztec only)
   if (cMyCiv == cCivXPAztec)
   {
      if (tlaloccanoePlan < 0)
      {
         tlaloccanoePlan = createSimpleMaintainPlan(cUnitTypexpTlalocCanoe, 5, false, kbBaseGetMainID(cMyID));
      }
   }

   // Create plan only when tlaloccanoe available
   if (kbUnitCount(cMyID, cUnitTypexpTlalocCanoe) == 0)
   {
      return;
   }

   // Disable rule
   xsDisableSelf();   
}
*/

rule churchUpgradeMonitor
inactive
minInterval 50
{
   int upgradePlanID = -1;

   // Disable rule for native or Asian civs
   if ((civIsNative() == true) || (civIsAsian() == true))
   {
      xsDisableSelf();
      return;
   }

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechChurchTownWatch) == cTechStatusActive) &&
       (kbTechGetStatus(cTechChurchGasLighting) == cTechStatusActive) &&
       (kbTechGetStatus(cTechChurchStandingArmy) == cTechStatusActive) &&
       (kbTechGetStatus(cTechChurchMassCavalry) == cTechStatusActive) &&
       (kbTechGetStatus(cTechChurchMercantilism) == cTechStatusActive) &&
       (kbTechGetStatus(cTechChurchStateReligion) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Get upgrades one at a time as they become available
   if (kbTechGetStatus(cTechChurchMercantilism) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchMercantilism);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChurchMercantilism, getUnit(cUnitTypeChurch), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechChurchTownWatch) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchTownWatch);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChurchTownWatch, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechChurchGasLighting) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchGasLighting);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChurchGasLighting, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechChurchStandingArmy) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchStandingArmy);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChurchStandingArmy, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechChurchMassCavalry) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchMassCavalry);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChurchMassCavalry, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
      return;
   }   
   if (kbTechGetStatus(cTechChurchStateReligion) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchStateReligion);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChurchStateReligion, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
      return;
   }
}


rule churchUpgradeAsianMonitor
inactive
minInterval 50
{
   int upgradePlanID = -1;

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechChurchTownWatch) == cTechStatusActive) &&
       (kbTechGetStatus(cTechChurchGasLighting) == cTechStatusActive) &&
       (kbTechGetStatus(cTechChurchStandingArmy) == cTechStatusActive) &&
       (kbTechGetStatus(cTechChurchMassCavalry) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Quit if there is no special church built from a wagon araound
   if (kbUnitCount(cMyID, cUnitTypeypChurch, cUnitStateAlive) < 1)
   {
      return;
   }

   // Get upgrades one at a time as they become available
   if (kbTechGetStatus(cTechChurchTownWatch) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchTownWatch);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChurchTownWatch, getUnit(cUnitTypeypChurch), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechChurchGasLighting) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchGasLighting);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChurchGasLighting, getUnit(cUnitTypeypChurch), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechChurchStandingArmy) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchStandingArmy);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChurchStandingArmy, getUnit(cUnitTypeypChurch), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechChurchMassCavalry) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchMassCavalry);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChurchMassCavalry, getUnit(cUnitTypeypChurch), cMilitaryEscrowID, 50);
      return;
   }
}


rule royalDecreeMonitor
inactive
minInterval 45
{
   int decreePlanID = -1;

   // Disable rule for native or Asian civs
   if ((civIsNative() == true) || (civIsAsian() == true))
   {
      xsDisableSelf();
      return;
   }

   if (kbUnitCount(cMyID, cUnitTypeChurch, cUnitStateAlive) < 1)
      return;

   switch(kbGetCiv())
   {
      case cCivBritish:
      {
         // Disable rule once all upgrades are available
         if ((kbTechGetStatus(cTechChurchThinRedLine) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchBlackWatch) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchRogersRangers) == cTechStatusActive))
         {
            xsDisableSelf();
            return;
         }

         // Get upgrades/troops as they become available
         if (kbTechGetStatus(cTechChurchThinRedLine) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchThinRedLine);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchThinRedLine, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchBlackWatch) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchBlackWatch);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchBlackWatch, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchRogersRangers) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchRogersRangers);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchRogersRangers, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         break;
      }
      case cCivDutch:
      {
         // Disable rule once all upgrades are available
         if ((kbTechGetStatus(cTechChurchCoffeeTrade) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchWaardgelders) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchStadholders) == cTechStatusActive))
         {
            xsDisableSelf();
            return;
         }

         // Get upgrades/troops as they become available
         if (kbTechGetStatus(cTechChurchCoffeeTrade) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchCoffeeTrade);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchCoffeeTrade, getUnit(cUnitTypeChurch), cEconomyEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchWaardgelders) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchWaardgelders);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchWaardgelders, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchStadholders) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchStadholders);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchStadholders, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         break;
      }
      case cCivFrench:
      {
         // Disable rule once all upgrades are available
         if ((kbTechGetStatus(cTechChurchCodeNapoleon) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchGardeImperial1) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchGardeImperial2) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchGardeImperial3) == cTechStatusActive))
         {
            xsDisableSelf();
            return;
         }

         // Get upgrades/troops as they become available
         if (kbTechGetStatus(cTechChurchCodeNapoleon) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchCodeNapoleon);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchCodeNapoleon, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if ((kbTechGetStatus(cTechChurchGardeImperial1) == cTechStatusObtainable) && (kbGetAge() >= cAge4))
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchGardeImperial1);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchGardeImperial1, getUnit(cUnitTypeChurch), cEconomyEscrowID, 50);
         }
         if ((kbTechGetStatus(cTechChurchGardeImperial2) == cTechStatusObtainable) && (kbGetAge() >= cAge4))
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchGardeImperial2);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchGardeImperial2, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if ((kbTechGetStatus(cTechChurchGardeImperial3) == cTechStatusObtainable) && (kbGetAge() >= cAge4))
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchGardeImperial3);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchGardeImperial3, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         break;
      }
      case cCivGermans:
      {
         // Disable rule once all upgrades are available
         if ((kbTechGetStatus(cTechChurchTillysDiscipline) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchZweihander) == cTechStatusActive))
         {
            xsDisableSelf();
            return;
         }

         // Get upgrades/troops as they become available
         if (kbTechGetStatus(cTechChurchTillysDiscipline) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchTillysDiscipline);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchTillysDiscipline, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchZweihander) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchZweihander);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchZweihander, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         break;
      }
      case cCivOttomans:
      {
         // Disable rule once all upgrades are available
         if ((kbTechGetStatus(cTechChurchTufanciCorps) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchTopcuCorps) == cTechStatusActive))
         {
            xsDisableSelf();
            return;
         }

         // Get upgrades/troops as they become available
         if (kbTechGetStatus(cTechChurchTufanciCorps) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchTufanciCorps);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchTufanciCorps, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchTopcuCorps) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchTopcuCorps);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchTopcuCorps, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         break;
      }
      case cCivPortuguese:
      {
         // Disable rule once all upgrades are available
         if ((kbTechGetStatus(cTechChurchBestieros) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchTowerAndSword) == cTechStatusActive))
         {
            xsDisableSelf();
            return;
         }

         // Get upgrades/troops as they become available
         if (kbTechGetStatus(cTechChurchBestieros) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchBestieros);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchBestieros, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchTowerAndSword) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchTowerAndSword);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchTowerAndSword, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         break;
      }
      case cCivRussians:
      {
         // Disable rule once all upgrades are available
         if ((kbTechGetStatus(cTechChurchWesternization) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchPetrineReforms) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchKalmucks) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchBashkirPonies) == cTechStatusActive))
         {
            xsDisableSelf();
            return;
         }

         // Get upgrades/troops as they become available
         if (kbTechGetStatus(cTechChurchWesternization) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchWesternization);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchWesternization, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchPetrineReforms) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchPetrineReforms);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchPetrineReforms, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchKalmucks) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchKalmucks);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchKalmucks, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchBashkirPonies) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchBashkirPonies);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchBashkirPonies, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         break;
      }
      case cCivSpanish:
      {
         // Disable rule once all upgrades are available
         if ((kbTechGetStatus(cTechChurchCorsolet) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchQuatrefage) == cTechStatusActive) &&
             (kbTechGetStatus(cTechChurchWildGeeseSpanish) == cTechStatusActive))
         {
            xsDisableSelf();
            return;
         }

         // Get upgrades/troops as they become available
         if (kbTechGetStatus(cTechChurchCorsolet) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchCorsolet);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchCorsolet, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchQuatrefage) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchQuatrefage);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchQuatrefage, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         if (kbTechGetStatus(cTechChurchWildGeeseSpanish) == cTechStatusObtainable)
         {
            decreePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChurchWildGeeseSpanish);
            if (decreePlanID >= 0)
               aiPlanDestroy(decreePlanID);
            createSimpleResearchPlan(cTechChurchWildGeeseSpanish, getUnit(cUnitTypeChurch), cMilitaryEscrowID, 50);
         }
         break;
      }
   }
}

rule spiesMonitor
inactive
minInterval 20
{
   if (aiGetWorldDifficulty() < cDifficultyModerate)
   {  // Easy and Sandbox will never research.    
      xsDisableSelf();
      return;
   }
  
   //If we can afford it, then get it.
   float goldCost=kbTechCostPerResource(cTechSpies, cResourceGold);
   float currentGold=kbResourceGet(cResourceGold);
   if(goldCost>currentGold)
      return;

   //Get Omniscience
   int spiesPID=aiPlanCreate("Get_Spies", cPlanProgression);
   if (spiesPID != 0)
   {
      aiPlanSetVariableInt(spiesPID, cProgressionPlanGoalTechID, 0, cTechSpies);
      aiPlanSetDesiredPriority(spiesPID, 50);
      aiPlanSetEscrowID(spiesPID, cMilitaryEscrowID);
      aiPlanSetActive(spiesPID);
   }  
   xsDisableSelf();
}

rule spiesNativeMonitor
inactive
minInterval 20
{
   if (aiGetWorldDifficulty() < cDifficultyModerate)
   {  // Easy and Sandbox will never research.    
      xsDisableSelf();
      return;
   }

   //If we can afford it, then get it.
   float goldCost=kbTechCostPerResource(cTechSpiesNative, cResourceGold);
   float currentGold=kbResourceGet(cResourceGold);
   if(goldCost>currentGold)
      return;

   //Get Omniscience
   int spiesPID=aiPlanCreate("Get_Spies", cPlanProgression);
   if (spiesPID != 0)
   {
      aiPlanSetVariableInt(spiesPID, cProgressionPlanGoalTechID, 0, cTechSpiesNative);
      aiPlanSetDesiredPriority(spiesPID, 50);
      aiPlanSetEscrowID(spiesPID, cMilitaryEscrowID);
      aiPlanSetActive(spiesPID);
   }  
   xsDisableSelf();
}

rule blockadeMonitor
inactive
minInterval 60
{
   if (aiGetWorldDifficulty() < cDifficultyModerate)
   {  // Easy and Sandbox will never research.    
      xsDisableSelf();
      return;
   }
 
   //If we can afford it, then get it.
   float goldCost=kbTechCostPerResource(cTechHCBlockade, cResourceGold);
   float currentGold=kbResourceGet(cResourceGold);
   if(goldCost>currentGold)
      return;

   //Get Blockade
   int hCBlockadePID=aiPlanCreate("Get_HC_Blockade", cPlanProgression);
   if (hCBlockadePID != 0)
   {
      aiPlanSetVariableInt(hCBlockadePID, cProgressionPlanGoalTechID, 0, cTechHCBlockade);
      aiPlanSetDesiredPriority(hCBlockadePID, 50);
      aiPlanSetEscrowID(hCBlockadePID, cMilitaryEscrowID);
      aiPlanSetActive(hCBlockadePID);
   }
   xsDisableSelf();
}

rule blockadeNativeMonitor
inactive
minInterval 60
{
   if (aiGetWorldDifficulty() < cDifficultyModerate)
   {  // Easy and Sandbox will never research.    
      xsDisableSelf();
      return;
   }

   //If we can afford it, then get it.
   float goldCost=kbTechCostPerResource(cTechHCBlockade, cResourceGold);
   float currentGold=kbResourceGet(cResourceGold);
   if(goldCost>currentGold)
      return;

   //Get Blockade
   int hCBlockadePID=aiPlanCreate("Get_HC_Blockade", cPlanProgression);
   if (hCBlockadePID != 0)
   {
      aiPlanSetVariableInt(hCBlockadePID, cProgressionPlanGoalTechID, 0, cTechHCBlockadeNative);
      aiPlanSetDesiredPriority(hCBlockadePID, 50);
      aiPlanSetEscrowID(hCBlockadePID, cMilitaryEscrowID);
      aiPlanSetActive(hCBlockadePID);
   }
   xsDisableSelf();
}

rule capitolUpgradeMonitor
inactive
minInterval 60
{
   int upgradePlanID = -1;

   // Disable rule for native or Asian civs
   if ((civIsNative() == true) || (civIsAsian() == true))
   {
      xsDisableSelf();
      return;
   }

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechImpKnighthood) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpPeerage) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpLargeScaleAgriculture) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpDeforestation) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpExcessiveTaxation) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpImmigrants) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpLegendaryNatives) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Get upgrades one at a time as they become available
   if (kbTechGetStatus(cTechImpLargeScaleAgriculture) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLargeScaleAgriculture);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLargeScaleAgriculture, getUnit(cUnitTypeCapitol), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpExcessiveTaxation) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpExcessiveTaxation);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpExcessiveTaxation, getUnit(cUnitTypeCapitol), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpDeforestation) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpDeforestation);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpDeforestation, getUnit(cUnitTypeCapitol), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpLegendaryNatives) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryNatives);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryNatives, getUnit(cUnitTypeCapitol), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpImmigrants) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpImmigrants);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpImmigrants, getUnit(cUnitTypeCapitol), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpKnighthood) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpKnighthood);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpKnighthood, getUnit(cUnitTypeCapitol), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpPeerage) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpPeerage);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpPeerage, getUnit(cUnitTypeCapitol), cMilitaryEscrowID, 50);
      return;
   }
}


rule europeanUpgradeMonitor
inactive
minInterval 60
{
   int upgradePlanID = -1;

   // Disable rule for native or Asian civs
   if ((civIsNative() == true) || (civIsAsian() == true))
   {
      xsDisableSelf();
      return;
   }

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechHuntingDogs) == cTechStatusActive) &&
       (kbTechGetStatus(cTechSteelTraps) == cTechStatusActive) &&
       (kbTechGetStatus(cTechSeedDrill) == cTechStatusActive) &&
       (kbTechGetStatus(cTechArtificialFertilizer) == cTechStatusActive) &&
       (kbTechGetStatus(cTechGangsaw) == cTechStatusActive) &&
       (kbTechGetStatus(cTechLogFlume) == cTechStatusActive) &&
       (kbTechGetStatus(cTechCircularSaw) == cTechStatusActive) &&
       (kbTechGetStatus(cTechBookkeeping) == cTechStatusActive) &&
       (kbTechGetStatus(cTechHomesteading) == cTechStatusActive) &&
       (kbTechGetStatus(cTechOreRefining) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Get upgrades one at a time as they become available
   if (kbTechGetStatus(cTechHuntingDogs) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechHuntingDogs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechHuntingDogs, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechSteelTraps) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechSteelTraps);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechSteelTraps, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechSeedDrill) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechSeedDrill);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechSeedDrill, getUnit(cUnitTypeMill), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechArtificialFertilizer) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechArtificialFertilizer);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechArtificialFertilizer, getUnit(cUnitTypeMill), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechGangsaw) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGangsaw);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGangsaw, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechLogFlume) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechLogFlume);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechLogFlume, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechCircularSaw) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechCircularSaw);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechCircularSaw, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechBookkeeping) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechBookkeeping);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechBookkeeping, getUnit(cUnitTypePlantation), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechHomesteading) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechHomesteading);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechHomesteading, getUnit(cUnitTypePlantation), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechOreRefining) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechOreRefining);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechOreRefining, getUnit(cUnitTypePlantation), cEconomyEscrowID, 50);
      return;
   }
}

rule bigMarketNewYearMonitor
inactive
minInterval 20
{
   int upgradePlanID = -1;
    
   // Disable rule for non-native civs
   if (civIsNative() == false)
   {
      xsDisableSelf();
      return;
   }
     
   // If we can afford it twice over, then get it.
   float foodCost=kbTechCostPerResource(cTechBigMarketNewYear, cResourceFood);
   float woodCost=kbTechCostPerResource(cTechBigMarketNewYear, cResourceWood);
   float goldCost=kbTechCostPerResource(cTechBigMarketNewYear, cResourceGold);

   float currentFood=kbResourceGet(cResourceFood);
   float currentWood=kbResourceGet(cResourceWood);
   float currentGold=kbResourceGet(cResourceGold);
   if ((foodCost>currentFood) && (woodCost>currentWood) && (goldCost>currentGold))
      return;

   int bigMarketNewYearPID=aiPlanCreate("Get_BigMarketNewYear", cPlanProgression);
   if (bigMarketNewYearPID != 0)
   {
      aiPlanSetVariableInt(bigMarketNewYearPID, cProgressionPlanGoalTechID, 0, cTechBigMarketNewYear);
      aiPlanSetDesiredPriority(bigMarketNewYearPID, 50);
      aiPlanSetEscrowID(bigMarketNewYearPID, cEconomyEscrowID);
      aiPlanSetActive(bigMarketNewYearPID);
   }  
   xsDisableSelf();
}

rule nativeUpgradeMonitor
inactive
minInterval 60
{
   int upgradePlanID = -1;

   // Disable rule for non-native civs
   if (civIsNative() == false)
   {
      xsDisableSelf();
      return;
   }

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechHuntingDogs) == cTechStatusActive) &&
       (kbTechGetStatus(cTechGreatFeast) == cTechStatusActive) &&
       (kbTechGetStatus(cTechHarvestCeremony) == cTechStatusActive) &&
       (kbTechGetStatus(cTechGreenCornCeremony) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpLargeScaleGathering) == cTechStatusActive) &&
       (kbTechGetStatus(cTechLumberCeremony) == cTechStatusActive) &&
       (kbTechGetStatus(cTechForestPeopleCeremony) == cTechStatusActive) &&
       (kbTechGetStatus(cTechForestSpiritCeremony) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpDeforestationNative) == cTechStatusActive) &&
       (kbTechGetStatus(cTechEarthCeremony) == cTechStatusActive) &&
       (kbTechGetStatus(cTechEarthGiftCeremony) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpExcessiveTributeNative) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpLegendaryNativesNatives) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpImmigrantsNative) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Get upgrades one at a time as they become available
   if (kbTechGetStatus(cTechHuntingDogs) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechHuntingDogs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechHuntingDogs, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechGreatFeast) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGreatFeast);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGreatFeast, getUnit(cUnitTypeFarm), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechHarvestCeremony) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechHarvestCeremony);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechHarvestCeremony, getUnit(cUnitTypeFarm), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechGreenCornCeremony) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGreenCornCeremony);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGreenCornCeremony, getUnit(cUnitTypeFarm), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpLargeScaleGathering) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLargeScaleGathering);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLargeScaleGathering, getUnit(cUnitTypeFarm), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechLumberCeremony) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechLumberCeremony);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechLumberCeremony, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechForestPeopleCeremony) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechForestPeopleCeremony);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechForestPeopleCeremony, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechForestSpiritCeremony) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechForestSpiritCeremony);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechForestSpiritCeremony, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpDeforestationNative) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpDeforestationNative);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpDeforestationNative, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechEarthCeremony) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEarthCeremony);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEarthCeremony, getUnit(cUnitTypePlantation), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechEarthGiftCeremony) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEarthGiftCeremony);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEarthGiftCeremony, getUnit(cUnitTypePlantation), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpExcessiveTributeNative) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpExcessiveTributeNative);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpExcessiveTributeNative, getUnit(cUnitTypePlantation), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpLegendaryNativesNatives) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryNativesNatives);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryNativesNatives, getUnit(cUnitTypeTownCenter), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpImmigrantsNative) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpImmigrantsNative);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpImmigrantsNative, getUnit(cUnitTypeTownCenter), cEconomyEscrowID, 50);
      return;
   }
}


rule asianUpgradeMonitor 
inactive
minInterval 60
{
   int upgradePlanID = -1;

   // Disable rule for non-Asian civilizations
   if (civIsAsian() == false) 
   {
      xsDisableSelf();
      return;
   }

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechypMarketHuntingDogs) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypMarketWheelbarrow) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypMarketWheelbarrow2) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypCultivateWasteland) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypWaterConservancy) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypIrrigationSystems) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypImpLargeScaleAgricultureAsian) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypMarketGangsaw) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypMarketLogFlume) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypMarketCircularSaw) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypImpDeforestationAsian) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypCropMarket) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypSharecropping) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypLandRedistribution) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypCooperative) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypImpExcessiveTributeAsian) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypImpLegendaryNatives2) == cTechStatusActive) &&
       (kbTechGetStatus(cTechImpImmigrantsNative) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Get upgrades one at a time as they become available
   if (kbTechGetStatus(cTechypMarketHuntingDogs) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMarketHuntingDogs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMarketHuntingDogs, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMarketWheelbarrow) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMarketWheelbarrow);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMarketWheelbarrow, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMarketWheelbarrow2) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMarketWheelbarrow2);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMarketWheelbarrow2, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypCultivateWasteland) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypCultivateWasteland);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypCultivateWasteland, getUnit(cUnitTypeypRicePaddy), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypWaterConservancy) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypWaterConservancy);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypWaterConservancy, getUnit(cUnitTypeypRicePaddy), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypIrrigationSystems) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypIrrigationSystems);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypIrrigationSystems, getUnit(cUnitTypeypRicePaddy), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypImpLargeScaleAgricultureAsian) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypImpLargeScaleAgricultureAsian);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypImpLargeScaleAgricultureAsian, getUnit(cUnitTypeypRicePaddy), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMarketGangsaw) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMarketGangsaw);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMarketGangsaw, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMarketLogFlume) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMarketLogFlume);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMarketLogFlume, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMarketCircularSaw) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMarketCircularSaw);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMarketCircularSaw, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypImpDeforestationAsian) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypImpDeforestationAsian);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypImpDeforestationAsian, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypCropMarket) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypCropMarket);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypCropMarket, getUnit(cUnitTypeypRicePaddy), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypSharecropping) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypSharecropping);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypSharecropping, getUnit(cUnitTypeypRicePaddy), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypLandRedistribution) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypLandRedistribution);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypLandRedistribution, getUnit(cUnitTypeypRicePaddy), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypCooperative) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypCooperative);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypCooperative, getUnit(cUnitTypeypRicePaddy), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypImpExcessiveTributeAsian) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypImpExcessiveTributeAsian);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypImpExcessiveTributeAsian, getUnit(cUnitTypeypRicePaddy), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypImpLegendaryNatives2) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypImpLegendaryNatives2);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypImpLegendaryNatives2, getUnit(cUnitTypeTownCenter), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechImpImmigrantsNative) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpImmigrantsNative);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpImmigrantsNative, getUnit(cUnitTypeTownCenter), cEconomyEscrowID, 50);
      return;
   }
}


rule rescueExplorer
inactive
minInterval 10
{
   static int rescuePlan = -1;

   // Disable rule for native civs, why?
   if (civIsNative() == true)
   {
      xsDisableSelf();
      return;
   }

   // Destroy old rescue plan (if any)
   if (rescuePlan >= 0)
   {
      aiPlanDestroy(rescuePlan);
      rescuePlan = -1;
      aiEcho("Killing old rescue plan");
   }

   // Use only in Age 2 and above
   if ((kbGetAge() < cAge2) || (aiGetFallenExplorerID() < 0))
   {
      aiEcho("No explorer to rescue");
      return;
   }

   // Use only when explorer is strong enough
   if (kbUnitGetHealth(aiGetFallenExplorerID()) < 0.3)
   {
      aiEcho("Explorer too weak to be rescued");
      return;
   }

   // Decide on which unit type to use for rescue attempt
   // If possible, cheap infantry is used
   int scoutType = -1;
   if (kbUnitCount(cMyID, cUnitTypeAbstractInfantry, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeAbstractInfantry;   
   else if (kbUnitCount(cMyID, cUnitTypeAbstractCavalry, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeAbstractCavalry;   
   else if (kbUnitCount(cMyID, cUnitTypeAbstractNativeWarrior, cUnitStateAlive) >= 1)
      scoutType = cUnitTypeAbstractNativeWarrior;
   else
      scoutType = cUnitTypeUnit;

   // Get position of fallen explorer and send scout unit there
   vector fallenExplorerLocation = kbUnitGetPosition(aiGetFallenExplorerID());
   rescuePlan = aiPlanCreate("Rescue Explorer", cPlanExplore);
   if (rescuePlan >= 0)
   {
      aiPlanAddUnitType(rescuePlan, scoutType, 1, 3, 10);
      aiPlanAddWaypoint(rescuePlan, fallenExplorerLocation);
      aiPlanSetVariableBool(rescuePlan, cExplorePlanDoLoops, 0, false);
      aiPlanSetVariableBool(rescuePlan, cExplorePlanAvoidingAttackedAreas, 0, false);
      aiPlanSetVariableInt(rescuePlan, cExplorePlanNumberOfLoops, 0, -1);
      aiPlanSetRequiresAllNeedUnits(rescuePlan, true);
      aiPlanSetDesiredPriority(rescuePlan, 99);
      aiPlanSetActive(rescuePlan);
      aiEcho("Trying to rescue explorer");
   }
}

/*
rule defendBase
inactive
group tcComplete
minInterval 60
{
   static int baseDefendPlan = -1;
   int baseDefensePop = 0;
   int ownMilitaryCount = 0;

   // Number of units for base defend plan, 10% of army
   ownMilitaryCount = kbUnitCount(cMyID, cUnitTypeLogicalTypeLandMilitary, cUnitStateAlive);
   if (ownMilitaryCount > 0)
   {
      baseDefensePop = ownMilitaryCount / 10;
   }
   else
   {
      baseDefensePop = 0;
   }

   switch (gForwardBaseState)
   {
      case cForwardBaseStateNone:
      {
         if (baseDefendPlan >= 0)
         {
            aiPlanDestroy(baseDefendPlan);
            baseDefendPlan = 0;
            aiEcho("Forward base destroyed, additional defend plan deleted");
         }
         else
         {
            aiEcho("No forward base found, no additional defend plan for main base");
         }
         break;
      }
      case cForwardBaseStateActive:
      {
         if (baseDefendPlan < 0)
         {
            baseDefendPlan = aiPlanCreate("Base Defend", cPlanDefend);
            aiPlanAddUnitType(baseDefendPlan, cUnitTypeLogicalTypeLandMilitary , baseDefensePop, baseDefensePop, baseDefensePop); 

            aiPlanSetVariableVector(baseDefendPlan, cDefendPlanDefendPoint, 0, kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID)));
            aiPlanSetVariableFloat(baseDefendPlan, cDefendPlanEngageRange, 0, cvDefenseReflexRadiusActive);  
            aiPlanSetVariableFloat(baseDefendPlan, cDefendPlanGatherDistance, 0, cvDefenseReflexRadiusActive - 10.0);
            aiPlanSetVariableBool(baseDefendPlan, cDefendPlanPatrol, 0, false);
            aiPlanSetVariableFloat(baseDefendPlan, cDefendPlanGatherDistance, 0, 40.0);
            aiPlanSetInitialPosition(baseDefendPlan, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
            aiPlanSetUnitStance(baseDefendPlan, cUnitStanceDefensive);
            aiPlanSetVariableInt(baseDefendPlan, cDefendPlanRefreshFrequency, 0, 5);
            aiPlanSetVariableInt(baseDefendPlan, cDefendPlanAttackTypeID, 0, cUnitTypeUnit);
            aiPlanSetDesiredPriority(baseDefendPlan, 95);  // High priority to keep units from being drafted into attack plans
            aiPlanSetActive(baseDefendPlan); 
            aiEcho("Creating base defend plan, "+baseDefensePop+" units assigned");
         }
         else
         {
            aiPlanAddUnitType(baseDefendPlan, cUnitTypeLogicalTypeLandMilitary , baseDefensePop, baseDefensePop, baseDefensePop); 
            aiEcho("Updating base defend plan, "+baseDefensePop+" units assigned");
         }
         break;
      }
      default: // cForwardBaseStateBuilding
      {
         aiEcho("Forward base being built, wait with additional defend plan for main base");
         break;
      }
   }
}
*/

rule stageCoachMonitor
inactive
minInterval 30
{
   static int stagecoachPlan = -1;
   static int stagecoachAttempts = 0;

   // Kill existing plan (cleanup)
   if (stagecoachPlan >= 0)
   {
      aiPlanDestroy(stagecoachPlan);
      stagecoachPlan = -1;
      aiEcho("Destroying old stage coach plan");
   }

   // Disable if upgrade has been attempted three times, assuming that only native TPs are left now
   // As the kbVPSiteGetType() function does not work properly, this is a workaround to keep the AI from 
   // wasting resources by constantly researching the upgrade at native TPs (which is actually possible)
   if (stagecoachAttempts >= 3)
      xsDisableSelf();

   // Check if trade route upgrade makes sense
   int ownTPList = kbVPSiteQuery(cVPTrade, cMyID, cVPStateCompleted);
   int alliedTPList = kbVPSiteQuery(cVPTrade, cPlayerRelationAlly, cVPStateCompleted);
   int numTeamTPs = xsArrayGetSize(ownTPList) + xsArrayGetSize(alliedTPList);

   // Team controlling two trade posts, ok to upgrade to stage coach
   if (numTeamTPs >= 2) 
   {
      aiEcho("Team controlling two TPs, ok to upgrade trade route to stage coach");
      if ((kbTechGetStatus(cTechTradeRouteUpgrade1) == cTechStatusObtainable) || (kbTechGetStatus(cTechypTradeRouteUpgrade1) == cTechStatusObtainable))
      {
         // Research stage coach tech at random TP
         if (kbUnitCount(cMyID, cUnitTypeTradingPost, cUnitStateAlive) > 0)  // Standard trade route
           stagecoachPlan = createSimpleResearchPlan(cTechTradeRouteUpgrade1, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
         else  // Asian map specific trade route
           stagecoachPlan = createSimpleResearchPlan(cTechypTradeRouteUpgrade1, getUnit(cUnitTypeypTradingPostAsian), cEconomyEscrowID, 50);
         if (stagecoachPlan >= 0)
         {
            aiEcho("Attempting trade route upgrade to stage coach");
            stagecoachAttempts = stagecoachAttempts + 1;
            return;
         }
      }
   }
}


rule ironHorseMonitor
inactive
minInterval 30
{
   static int ironhorsePlan = -1;
   static int ironhorseAttempts = 0;

   // Kill existing plan (cleanup)
   if (ironhorsePlan >= 0)
   {
      aiPlanDestroy(ironhorsePlan);
      ironhorsePlan = -1;
      aiEcho("Destroying old iron horse plan");
   }

   // Disable if upgrade has been attempted 1 time, assuming that only native TPs are left now
   // As the kbVPSiteGetType() function does not work properly, this is a workaround to keep the AI from 
   // wasting resources by constantly researching the upgrade at native TPs (which is actually possible)
   if (ironhorseAttempts >= 1)
      xsDisableSelf();

   // Check if trade route upgrade makes sense
   int ownTPList = kbVPSiteQuery(cVPTrade, cMyID, cVPStateCompleted);
   int alliedTPList = kbVPSiteQuery(cVPTrade, cPlayerRelationAlly, cVPStateCompleted);
   int numTeamTPs = xsArrayGetSize(ownTPList) + xsArrayGetSize(alliedTPList);

   // Team controlling one trade post, ok to upgrade to iron horse
   if (numTeamTPs >= 1) 
   {
      aiEcho("Team controlling one TP, ok to upgrade trade route to iron horse");
      if ((kbTechGetStatus(cTechTradeRouteUpgrade2) == cTechStatusObtainable) || (kbTechGetStatus(cTechypTradeRouteUpgrade2) == cTechStatusObtainable))
      {
         // Research iron horse tech at random TP
         if (kbUnitCount(cMyID, cUnitTypeTradingPost, cUnitStateAlive) > 0)  // Standard trade route
           ironhorsePlan = createSimpleResearchPlan(cTechTradeRouteUpgrade2, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
         else  // Asian map specific trade route
           ironhorsePlan = createSimpleResearchPlan(cTechypTradeRouteUpgrade2, getUnit(cUnitTypeypTradingPostAsian), cEconomyEscrowID, 50);
         if (ironhorsePlan >= 0)
         {
            aiEcho("Attempting trade route upgrade to iron horse");
            ironhorseAttempts = ironhorseAttempts + 1;
            return;
         }
      }
   }
}


rule livestockMonitor
inactive
group startup
minInterval 10
{
   static int livestockPlan = -1;

   // Livestock pen for Europeans, village for Chinese, shrine for Japanese
   // and sacred field for Indians, as defined in initEcon()
   if (civIsNative() == false)
   {
      if (kbUnitCount(cMyID, gLivestockPenUnit, cUnitStateAlive) > 0)
      {
         // Create herd plan
         if (livestockPlan < 0)
         {
            livestockPlan = aiPlanCreate("Livestock Plan", cPlanHerd);
            aiPlanSetDesiredPriority(livestockPlan, 99);
            aiPlanAddUnitType(livestockPlan, cUnitTypeHerdable, 0, 100, 100);
            aiPlanSetVariableInt(livestockPlan, cHerdPlanBuildingTypeID, 0, gLivestockPenUnit);
            aiPlanSetVariableFloat(livestockPlan, cHerdPlanDistance, 0, 0.0);
            aiPlanSetActive(livestockPlan);
         }
      }
      else
      {
         aiPlanDestroy(livestockPlan);  // Destroy plan to have it recreated with a new pen
         livestockPlan = -1;
      }
   }
   else // natives use second farm for livestock
   {
      if (kbUnitCount(cMyID, cUnitTypeFarm, cUnitStateAlive) > 1)
      {
         // Create herd plan
         if (livestockPlan < 0)
         {
            livestockPlan = aiPlanCreate("Livestock Plan", cPlanHerd);
            aiPlanSetDesiredPriority(livestockPlan, 99);
            aiPlanAddUnitType(livestockPlan, cUnitTypeHerdable, 0, 100, 100);
            aiPlanSetVariableInt(livestockPlan, cHerdPlanBuildingTypeID, 0, gLivestockPenUnit);
            aiPlanSetVariableFloat(livestockPlan, cHerdPlanDistance, 0, 0.0);
            aiPlanSetActive(livestockPlan);
         }
      }
      else
      {
         aiPlanDestroy(livestockPlan);  // Destroy plan to have it recreated with a new pen
         livestockPlan = -1;
      }
   }
}


rule herdableMonitor
inactive
group startup
minInterval 5
{
   int tempExplorePlan = -1;
   int envoyExplorePlan = -1;
   int mongolExplorePlan = -1;
   int nativeExplorePlan = -1;
   int herdableCount = kbUnitCount(0, cUnitTypeHerdable, cUnitStateAlive);

   if (herdableCount > 0)
   {
      vector herdVec = kbUnitGetPosition(getUnit(cUnitTypeHerdable, 0, cUnitStateAlive));

      int explorePlanCount = aiPlanGetNumber(cPlanExplore, -1, true);
      if (explorePlanCount > 1)
      {
         for (i=0; < explorePlanCount)
         {
            tempExplorePlan = aiPlanGetIDByIndex(cPlanExplore, -1, true, i);
            if (aiPlanGetNumberUnits(tempExplorePlan, cUnitTypeEnvoy) > 0)
               envoyExplorePlan = tempExplorePlan;
            if (aiPlanGetNumberUnits(tempExplorePlan, cUnitTypeypMongolScout) > 0)
               mongolExplorePlan = tempExplorePlan;
            if (aiPlanGetNumberUnits(tempExplorePlan, cUnitTypeNativeScout) > 0)
               nativeExplorePlan = tempExplorePlan;
         }
      }
      if (mongolExplorePlan > 0)
      {
         aiPlanAddWaypoint(mongolExplorePlan, herdVec);
      }
      else if (nativeExplorePlan > 0)
      {
         aiPlanAddWaypoint(nativeExplorePlan, herdVec);
      }
      else if (envoyExplorePlan > 0)
      {
         aiPlanAddWaypoint(envoyExplorePlan, herdVec);
      }
      else if (gLandExplorePlan > 0)
      {
         aiPlanAddWaypoint(gLandExplorePlan, herdVec);
      }
   }
}

rule slaughterGoatMonitor
inactive
group tcComplete
minInterval 15
{
   // Disable rule for Indians and Japanese
   if ((kbGetCiv() == cCivIndians) || (kbGetCiv() == cCivJapanese))
   {
      xsDisableSelf();
      return;
   }

   static int slaughterPlanID = -1;
   int numGoats = -1;
   int gatherersWanted = -1;
   vector homeBaseVec = cInvalidVector;

   // Don't slaughter goats in the early stages
   if ( (kbGetAge() < cAge3) || (xsGetTime() < 480000) )
   {
      return;
   }

   // If we have a main base, count the number of goats in it
   if (kbBaseGetMainID(cMyID) < 0)
      return;

   homeBaseVec = kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));
   numGoats = getUnitCountByLocation(cUnitTypeypGoat, cPlayerRelationAny, cUnitStateAny, homeBaseVec, 75.0);

   if (numGoats == 0)
   {
      gatherersWanted = 0;
   }
   else
   {
      gatherersWanted = 3;
   }

   if (aiPlanGetState(slaughterPlanID) == -1)
   {
      aiEcho("Goats gather plan "+slaughterPlanID+" is invalid.");
      aiPlanDestroy(slaughterPlanID);
      slaughterPlanID = -1;
   }
   if (slaughterPlanID < 0)
   {  // Initialize the plan
      slaughterPlanID = aiPlanCreate("Goats slaughter", cPlanGather);
      aiPlanSetBaseID(slaughterPlanID, kbBaseGetMainID(cMyID));
      aiPlanSetVariableInt(slaughterPlanID, cGatherPlanResourceUnitTypeFilter, 0, cUnitTypeypGoat);
      aiPlanSetVariableInt(slaughterPlanID, cGatherPlanResourceType, 0, cAllResources);
      aiPlanAddUnitType(slaughterPlanID, gEconUnit, gatherersWanted, gatherersWanted, 2*gatherersWanted); // 3-6 gatherers if there is cattle
      aiPlanSetDesiredPriority(slaughterPlanID, 85);
      aiPlanSetActive(slaughterPlanID);
      aiEcho("Activated Goats slaughter plan "+slaughterPlanID);
   }
   else
   {
      aiPlanAddUnitType(slaughterPlanID, gEconUnit, gatherersWanted, gatherersWanted, 2*gatherersWanted); // 3-6 gatherers if there is cattle
   }
}


rule ransomExplorer
inactive
minInterval 10
{
   // Disable rule for native or Asian civs
   if ((civIsNative() == true) || (civIsAsian() == true))
   {
      xsDisableSelf();
      return;
   }

   // Use only in Age 2 and above
   if ((kbGetAge() < cAge2) || (aiGetFallenExplorerID() < 0))
   {
      return;
   }
   else
   {
      aiRansomExplorer(aiGetFallenExplorerID(), cMilitaryEscrowID, 42);
      aiEcho("Ransoming explorer");
   }
}


rule localNuggetGathering
inactive
minInterval 30
{
   static int localNuggetPlanStartTime = 0;
   if (localNuggetPlanStartTime == 0)
   {
      localNuggetPlanStartTime = xsGetTime(); // set time and quit when rule is called for the first time
      return;
   }

   static int localNuggetPlan = -1;
   vector homeBaseVec = cInvalidVector;

   if (kbUnitCount(cMyID, cUnitTypeTownCenter, cUnitStateAlive) > 0)
   {
      homeBaseVec = kbUnitGetPosition(getUnit(cUnitTypeTownCenter, cMyID)); // use random own TC position as basis for plans
   }
   else
   {
      return; // quit if there is no TC
   }

   // If there already is a plan destroy it, re-initialize explorer control plan, and wait for next call
   if (localNuggetPlan >= 0)
   {
      aiPlanDestroy(localNuggetPlan);
      localNuggetPlan = -1;

      // Re-initialize explorer control plan
      if (gExplorerControlPlan < 0)
      {
         gExplorerControlPlan = aiPlanCreate("Explorer control plan", cPlanDefend);
         switch(kbGetCiv())
         {
            case cCivXPAztec:
            {
               aiPlanAddUnitType(gExplorerControlPlan, cUnitTypexpAztecWarchief, 1, 1, 1);
               break;
            }
            case cCivXPIroquois:
            {
               aiPlanAddUnitType(gExplorerControlPlan, cUnitTypexpIroquoisWarChief, 1, 1, 1);
               break;
            }
            case cCivXPSioux:
            {
               aiPlanAddUnitType(gExplorerControlPlan, cUnitTypexpLakotaWarchief, 1, 1, 1);
               break;
            }
            case cCivChinese:
            {
               aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkChinese, 1, 1, 1);
               break;
            }
            case cCivIndians:
            {
               aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkIndian, 1, 1, 1);
               aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkIndian2, 1, 1, 1);
               break;
            }
            case cCivJapanese:
            {
               aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkJapanese, 1, 1, 1);
               aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeypMonkJapanese2, 1, 1, 1);
               break;
            }
            default:
            {
               aiPlanAddUnitType(gExplorerControlPlan, cUnitTypeExplorer, 1, 1, 1);
               break;
            }
         }
         aiPlanSetVariableVector(gExplorerControlPlan, cDefendPlanDefendPoint, 0, homeBaseVec);
         aiPlanSetVariableFloat(gExplorerControlPlan, cDefendPlanEngageRange, 0, 20.0);    // Tight
         aiPlanSetVariableBool(gExplorerControlPlan, cDefendPlanPatrol, 0, false);
         aiPlanSetVariableFloat(gExplorerControlPlan, cDefendPlanGatherDistance, 0, 20.0);
         aiPlanSetInitialPosition(gExplorerControlPlan, homeBaseVec);
         aiPlanSetUnitStance(gExplorerControlPlan, cUnitStanceDefensive);
         aiPlanSetVariableInt(gExplorerControlPlan, cDefendPlanRefreshFrequency, 0, 30);
         aiPlanSetVariableInt(gExplorerControlPlan, cDefendPlanAttackTypeID, 0, cUnitTypeUnit); // Only units
         aiPlanSetDesiredPriority(gExplorerControlPlan, 90);    // Quite high, don't suck him into routine attack plans, etc.
         aiPlanSetActive(gExplorerControlPlan);      
      }
      return;
   }

   // Quit if no local nuggets are around, if nugget gathering is not allowed, if explorer is ko, 
   // or if the last plan was created less than 3 minutes ago
   int localNuggetCount = getUnitCountByLocation(cUnitTypeAbstractNugget, cPlayerRelationAny, cUnitStateABQ, homeBaseVec, 75.0);

   if ((localNuggetCount == 0) || 
       (cvOkToGatherNuggets == false) || 
       (aiGetFallenExplorerID() >= 0) ||
       (xsGetTime() - localNuggetPlanStartTime < 180000))
   {
      return;
   }
   else   
   {
      // Destroy explorer control plan
      aiPlanDestroy(gExplorerControlPlan);
      gExplorerControlPlan = -1;

      // Find a random local nugget
      int localNugget = getUnitByLocation(cUnitTypeAbstractNugget, cPlayerRelationAny, cUnitStateABQ, homeBaseVec, 75.0);
      vector localNuggetVec = kbUnitGetPosition(localNugget);

      // Create temporary explore plan to gather local nuggets
      localNuggetPlan = aiPlanCreate("Local Nuggets", cPlanExplore);
      aiPlanSetDesiredPriority(localNuggetPlan, 75);
      aiPlanSetInitialPosition(localNuggetPlan, localNuggetVec);
      switch(kbGetCiv())
      {
         case cCivXPAztec:
         {
            aiPlanAddUnitType(localNuggetPlan, cUnitTypexpAztecWarchief, 1, 1, 1);
            break;
         }
         case cCivXPIroquois:
         {
            aiPlanAddUnitType(localNuggetPlan, cUnitTypexpIroquoisWarChief, 1, 1, 1);
            break;
         }
         case cCivXPSioux:
         {
            aiPlanAddUnitType(localNuggetPlan, cUnitTypexpLakotaWarchief, 1, 1, 1);
            break;
         }
         case cCivChinese:
         {
            aiPlanAddUnitType(localNuggetPlan, cUnitTypeypMonkChinese, 1, 1, 1);
            break;
         }
         case cCivIndians:
         {
            aiPlanAddUnitType(localNuggetPlan, cUnitTypeypMonkIndian, 1, 1, 1);
            aiPlanAddUnitType(localNuggetPlan, cUnitTypeypMonkIndian2, 1, 1, 1);
            break;
         }
         case cCivJapanese:
         {
            aiPlanAddUnitType(localNuggetPlan, cUnitTypeypMonkJapanese, 1, 1, 1);
            aiPlanAddUnitType(localNuggetPlan, cUnitTypeypMonkJapanese2, 1, 1, 1);
            break;
         }
         default:
         {
            aiPlanAddUnitType(localNuggetPlan, cUnitTypeExplorer, 1, 1, 1);
            break;
         }
      }
      aiPlanSetVariableBool(localNuggetPlan, cExplorePlanOkToGatherNuggets, 0, true);
      aiPlanSetEscrowID(localNuggetPlan, cMilitaryEscrowID);
      aiPlanSetBaseID(localNuggetPlan, kbBaseGetMainID(cMyID));
      aiPlanSetVariableBool(localNuggetPlan, cExplorePlanDoLoops, 0, false);
      aiPlanSetActive(localNuggetPlan);

      // Set start time
      localNuggetPlanStartTime = xsGetTime();
   }
}


rule navyUpgradeMonitor
inactive
minInterval 60
{
   // Disable rule for native civs
   if (civIsNative() == true)
   {
      xsDisableSelf();
      return;
   }

   // Quit and disable immediately if we're not on a water map
   if (gNavyMap == false)
   {
      xsDisableSelf();
      return;
   }

   // Quit if there are not enough warships to make upgrades worthwhile
   int navySize = kbUnitCount(cMyID, cUnitTypeLogicalTypeNavalMilitary, cUnitStateAlive);
   if ( (navySize < 2) && (kbGetAge() < cAge2) )
   {
      return;
   }

   // Disable rule once both upgrades are available
   // (Percussion Lock is not researched as the AI never fires broadsides)
   if ((kbTechGetStatus(cTechGillNets) == cTechStatusActive) &&
       (kbTechGetStatus(cTechLongLines) == cTechStatusActive) &&
       (kbTechGetStatus(cTechCarronade) == cTechStatusActive) &&
       (kbTechGetStatus(cTechArmorPlating) == cTechStatusActive) &&
       (kbTechGetStatus(cTechShipHowitzers) == cTechStatusActive) &&
       (kbTechGetStatus(cTechPercussionLocks) == cTechStatusActive) &&
      ((kbTechGetStatus(cTechImperialManOWar) == cTechStatusActive) ||
       (kbTechGetStatus(cTechImperialMonitors) == cTechStatusActive)))
   {
      xsDisableSelf();
      return;
   }

   // Get upgrades one at a time as they become available
   int upgradePlanID = -1;

   if (kbTechGetStatus(cTechGillNets) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGillNets);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
         createSimpleResearchPlan(cTechGillNets, getUnit(cUnitTypeDock), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechLongLines) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechLongLines);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
         createSimpleResearchPlan(cTechLongLines, getUnit(cUnitTypeDock), cEconomyEscrowID, 50);        
      return;
   }
   if (kbTechGetStatus(cTechCarronade) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechCarronade);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
         createSimpleResearchPlan(cTechCarronade, getUnit(cUnitTypeDock), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechArmorPlating) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechArmorPlating);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
         createSimpleResearchPlan(cTechArmorPlating, getUnit(cUnitTypeDock), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechShipHowitzers) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeMonitor, cUnitStateAlive) >= 1))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechShipHowitzers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
         createSimpleResearchPlan(cTechShipHowitzers, getUnit(cUnitTypeDock), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechPercussionLocks) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractWarShip, cUnitStateAlive) >= 3))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechPercussionLocks);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
         createSimpleResearchPlan(cTechPercussionLocks, getUnit(cUnitTypeDock), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialManOWar) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeFrigate, cUnitStateAlive) >= 3))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialManOWar);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
         createSimpleResearchPlan(cTechImperialManOWar, getUnit(cUnitTypeDock), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialMonitors) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeMonitor, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialMonitors);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
         createSimpleResearchPlan(cTechImperialMonitors, getUnit(cUnitTypeDock), cMilitaryEscrowID, 50);
      return;
   }
}


rule healerMonitor
inactive
minInterval 30
{
   static int healerPlan = -1;

   int priestCount = kbUnitCount(cMyID, cUnitTypePriest, cUnitStateAlive);
   int missionaryCount = kbUnitCount(cMyID, cUnitTypeMissionary, cUnitStateAlive);
   int surgeonCount = kbUnitCount(cMyID, cUnitTypeSurgeon, cUnitStateAlive);
   int imamCount = kbUnitCount(cMyID, cUnitTypeImam, cUnitStateAlive);
   int natMedicineManCount = kbUnitCount(cMyID, cUnitTypeNatMedicineMan, cUnitStateAlive);
   int xpMedicineManCount = kbUnitCount(cMyID, cUnitTypexpMedicineMan, cUnitStateAlive);
   int xpMedicineManAztecCount = kbUnitCount(cMyID, cUnitTypexpMedicineManAztec, cUnitStateAlive);


   if (healerPlan < 0)
   {
      healerPlan = aiPlanCreate("Healer Control Plan", cPlanDefend);

      aiPlanAddUnitType(healerPlan, cUnitTypePriest, priestCount, priestCount, priestCount); 
      aiPlanAddUnitType(healerPlan, cUnitTypeMissionary, missionaryCount, missionaryCount, missionaryCount); 
      aiPlanAddUnitType(healerPlan, cUnitTypeSurgeon, surgeonCount, surgeonCount, surgeonCount); 
      aiPlanAddUnitType(healerPlan, cUnitTypeImam, imamCount, imamCount, imamCount); 
      aiPlanAddUnitType(healerPlan, cUnitTypeNatMedicineMan, natMedicineManCount, natMedicineManCount, natMedicineManCount); 
      aiPlanAddUnitType(healerPlan, cUnitTypexpMedicineMan, xpMedicineManCount, xpMedicineManCount, xpMedicineManCount); 
      if (kbUnitCount(cMyID, cUnitTypeFirePit, cUnitStateABQ) < 1) // Add warrior priest only if there is no fire pit to dance at
      {
         aiPlanAddUnitType(healerPlan, cUnitTypexpMedicineManAztec, xpMedicineManAztecCount, xpMedicineManAztecCount, xpMedicineManAztecCount); 
      }
      else
      {
         aiPlanAddUnitType(healerPlan, cUnitTypexpMedicineManAztec, 0, 0, 0); 
      }

      aiPlanSetVariableVector(healerPlan, cDefendPlanDefendPoint, 0, kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID)));
      aiPlanSetVariableFloat(healerPlan, cDefendPlanEngageRange, 0, cvDefenseReflexRadiusActive);  
      aiPlanSetVariableBool(healerPlan, cDefendPlanPatrol, 0, false);
      aiPlanSetVariableFloat(healerPlan, cDefendPlanGatherDistance, 0, 10.0);
      aiPlanSetInitialPosition(healerPlan, kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID)));
      aiPlanSetUnitStance(healerPlan, cUnitStanceDefensive);
      aiPlanSetVariableInt(healerPlan, cDefendPlanRefreshFrequency, 0, 5);
      aiPlanSetVariableInt(healerPlan, cDefendPlanAttackTypeID, 0, cUnitTypeUnit);
      aiPlanSetDesiredPriority(healerPlan, 95);  // High priority to keep units from being sucked into other plans
      aiPlanSetActive(healerPlan); 
      aiEcho("Creating healer plan");
   }
   else
   {
      aiPlanAddUnitType(healerPlan, cUnitTypePriest, priestCount, priestCount, priestCount); 
      aiPlanAddUnitType(healerPlan, cUnitTypeMissionary, missionaryCount, missionaryCount, missionaryCount); 
      aiPlanAddUnitType(healerPlan, cUnitTypeSurgeon, surgeonCount, surgeonCount, surgeonCount); 
      aiPlanAddUnitType(healerPlan, cUnitTypeImam, imamCount, imamCount, imamCount); 
      aiPlanAddUnitType(healerPlan, cUnitTypeNatMedicineMan, natMedicineManCount, natMedicineManCount, natMedicineManCount); 
      aiPlanAddUnitType(healerPlan, cUnitTypexpMedicineMan, xpMedicineManCount, xpMedicineManCount, xpMedicineManCount); 
      if (kbUnitCount(cMyID, cUnitTypeFirePit, cUnitStateABQ) < 1) // Add warrior priest only if there is no fire pit to dance at
      {
         aiPlanAddUnitType(healerPlan, cUnitTypexpMedicineManAztec, xpMedicineManAztecCount, xpMedicineManAztecCount, xpMedicineManAztecCount); 
      }
      else
      {
         aiPlanAddUnitType(healerPlan, cUnitTypexpMedicineManAztec, 0, 0, 0); 
      }
      aiEcho("Updating healer plan");
   }
}


rule useWarParties
inactive
group tcComplete
minInterval 10
{
   // Check to see if town is being overrun. If so, generate a plan
   // to research available war party. 

   // Disable rule for non-native civs
   if (civIsNative() == false)
   {
      xsDisableSelf();
      return;
   }
   
   static int partyPlan = -1;
   vector mainBaseVec = cInvalidVector;
   
   mainBaseVec =  kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));
   int enemyCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationEnemyNotGaia, cUnitStateAlive, mainBaseVec, 40.0);
   int allyCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationAlly, cUnitStateAlive, mainBaseVec, 40.0);

   if (enemyCount >= (allyCount+6)) // We're behind by 6 or more
   {
      aiEcho("***** Starting a party plan, there are "+enemyCount+" enemy units in my base against "+allyCount+" friendlies.");
      if (cMyCiv == cCivXPAztec)
      {
         if(kbTechGetStatus(cTechBigAztecScoutingParty) == cTechStatusObtainable)
            partyPlan = createSimpleResearchPlan(cTechBigAztecScoutingParty, getUnitByLocation(cUnitTypeTownCenter, cMyID, cUnitStateAlive, mainBaseVec, 40.0), cMilitaryEscrowID, 99);     // Extreme priority
         else if(kbTechGetStatus(cTechBigAztecRaidingParty) == cTechStatusObtainable)
            partyPlan = createSimpleResearchPlan(cTechBigAztecRaidingParty, getUnitByLocation(cUnitTypeTownCenter, cMyID, cUnitStateAlive, mainBaseVec, 40.0), cMilitaryEscrowID, 99);     // Extreme priority
         else if(kbTechGetStatus(cTechBigAztecWarParty) == cTechStatusObtainable)
            partyPlan = createSimpleResearchPlan(cTechBigAztecWarParty, getUnitByLocation(cUnitTypeTownCenter, cMyID, cUnitStateAlive, mainBaseVec, 40.0), cMilitaryEscrowID, 99);     // Extreme priority
      }
      else if (cMyCiv == cCivXPIroquois)
      {
         if(kbTechGetStatus(cTechBigIroquoisScoutingParty) == cTechStatusObtainable)
            partyPlan = createSimpleResearchPlan(cTechBigIroquoisScoutingParty, getUnitByLocation(cUnitTypeTownCenter, cMyID, cUnitStateAlive, mainBaseVec, 40.0), cMilitaryEscrowID, 99);     // Extreme priority
         else if(kbTechGetStatus(cTechBigIroquoisRaidingParty) == cTechStatusObtainable)
            partyPlan = createSimpleResearchPlan(cTechBigIroquoisRaidingParty, getUnitByLocation(cUnitTypeTownCenter, cMyID, cUnitStateAlive, mainBaseVec, 40.0), cMilitaryEscrowID, 99);     // Extreme priority
         else if(kbTechGetStatus(cTechBigIroquoisWarParty) == cTechStatusObtainable)
            partyPlan = createSimpleResearchPlan(cTechBigIroquoisWarParty, getUnitByLocation(cUnitTypeTownCenter, cMyID, cUnitStateAlive, mainBaseVec, 40.0), cMilitaryEscrowID, 99);     // Extreme priority
      }
      else // cMyCiv == cCivXPSioux
      {
         if(xsGetTime() > 20*60*1000) // Use only after at least 20 minutes of game time (i.e. 7 units)
            partyPlan = createSimpleResearchPlan(cTechBigSiouxDogSoldiers, getUnitByLocation(cUnitTypeTownCenter, cMyID, cUnitStateAlive, mainBaseVec, 40.0), cMilitaryEscrowID, 99);     // Extreme priority
      }
   }
}

rule ManorMonitor
inactive
minInterval 10
{
   if (kbGetBuildLimit(cMyID, gEconUnit) <= kbUnitCount(cMyID, gEconUnit, cUnitStateAlive))
      return;     // Don't build if we're at limit.

   static int ManorPlan = -1;
   int numUnits = 0;  
   int limit = 0;
       
   numUnits = kbGetBuildLimit(cMyID, gEconUnit);
   if (limit < 1)
      return;

   // Create/update maintain plan
   if (ManorPlan < 0)
   {
      ManorPlan = createSimpleMaintainPlan(gEconUnit, numUnits, true, kbBaseGetMainID(cMyID), 1);
   }
   else
   {
      aiPlanSetVariableInt(ManorPlan, cTrainPlanNumberToMaintain, 0, numUnits);
   }
}

rule GermantownFarmersMonitor
inactive
minInterval 10
{     
   if (kbGetBuildLimit(cMyID, cUnitTypeSettlerWagon) <= kbUnitCount(cMyID, cUnitTypeSettlerWagon, cUnitStateAlive))
      return;     // Don't build if we're at limit.

   static int SettlerWagonPlan = -1;  
   int numUnits = 0;
   int limit = 0;
        
   limit = kbGetBuildLimit(cMyID, cUnitTypeSettlerWagon);
   if (limit < 1)
      return;

   // Check number of Settler Wagon
   numUnits = kbGetBuildLimit(cMyID, cUnitTypeSettlerWagon);
 
   // Create/update maintain plan
   if (SettlerWagonPlan < 0)
   {
      SettlerWagonPlan = createSimpleMaintainPlan(cUnitTypeSettlerWagon, numUnits, true, kbBaseGetMainID(cMyID), 1);
   }
   else
   {
      aiPlanSetVariableInt(SettlerWagonPlan, cTrainPlanNumberToMaintain, 0, numUnits);
   }  
}

rule createHerdPlan
inactive
group tcComplete
minInterval 10
{
   // Create a herd plan to gather all herdables that we ecounter.
   gHerdPlanID = aiPlanCreate("GatherHerdable Plan", cPlanHerd);
   if (gHerdPlanID >= 0)
   {
      aiPlanAddUnitType(gHerdPlanID, cUnitTypeHerdable, 0, 100, 100);
      aiPlanSetVariableInt(gHerdPlanID, cHerdPlanBuildingTypeID, 0, cUnitTypeTownCenter);
      aiPlanSetVariableFloat(gHerdPlanID, cHerdPlanDistance, 0, 5.0);
      aiPlanSetActive(gHerdPlanID);
   }

   // Disable rule once it's been run
   xsDisableSelf();
}


rule minorTribeTechMonitor
inactive
minInterval 90
{
   int techPlanID = -1;

   // Get techs from different minor tribes one at a time as they become available
   // Unavailable tribes and techs are simply ignored
   // Research plans are "blindly" tried at different trading posts as there is no way to 
   // identify specific trading posts in the AI script

   // Apache techs
   if (kbTechGetStatus(cTechNatXPApacheCactus) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPApacheCactus);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPApacheCactus, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatXPApacheRaiding) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPApacheRaiding);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPApacheRaiding, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatXPApacheEndurance) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPApacheEndurance);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPApacheEndurance, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }

   // Carib techs
   if ((kbTechGetStatus(cTechNatCeremonialFeast) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatBlowgunWarrior, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatBlowgunAmbusher, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercBlowgunWarrior, cUnitStateAlive) >= 10))
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatCeremonialFeast);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatCeremonialFeast, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatKasiriBeer) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatKasiriBeer);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatKasiriBeer, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatCeremonialFeast) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatCeremonialFeast);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatCeremonialFeast, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatKasiriBeer) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatKasiriBeer);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatKasiriBeer, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ( (kbTechGetStatus(cTechNatBlowgunnerAmbush) == cTechStatusObtainable) && (kbGetAge() >= cAge3) )
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatBlowgunnerAmbush);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatBlowgunnerAmbush, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }

   // Cherokee techs
   if (kbTechGetStatus(cTechNatBasketweaving) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatBasketweaving);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatBasketweaving, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatSequoyahSyllabary) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatSequoyahSyllabary);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatSequoyahSyllabary, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatWarDance) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatWarDance);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatWarDance, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }

   // Cheyenne techs
   if (kbTechGetStatus(cTechNatXPCheyenneHuntingGrounds) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPCheyenneHuntingGrounds);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPCheyenneHuntingGrounds, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatXPCheyenneHorseTrading) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPCheyenneHorseTrading);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPCheyenneHorseTrading, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatXPCheyenneFury) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPCheyenneFury);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPCheyenneFury, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }

   // Comanche techs
   if (kbTechGetStatus(cTechNatTradeLanguage) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatTradeLanguage);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatTradeLanguage, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatHorseBreeding) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatHorseBreeding);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatHorseBreeding, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatMustangs) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatMustangs);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatMustangs, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }

   // Cree techs
   if (kbTechGetStatus(cTechNatTextileCraftsmanship) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatTextileCraftsmanship);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatTextileCraftsmanship, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatTanning) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatTanning);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatTanning, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }

   // Huron techs
   if ((kbTechGetStatus(cTechNatXPHuronTradeMonopoly) == cTechStatusObtainable) &&
       (xsGetTime() > 20*60*1000)) // Use only after at least 20 minutes of game time (i.e. 10 units)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPHuronTradeMonopoly);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPHuronTradeMonopoly, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }

   // Inca techs
   if (kbTechGetStatus(cTechNatMetalworking) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatMetalworking);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatMetalworking, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatChasquisMessengers) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatChasquisMessengers);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatChasquisMessengers, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatRoadbuilding) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatRoadbuilding);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatRoadbuilding, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }

   // Klamath techs
   if (kbTechGetStatus(cTechNatXPKlamathWorkEthos) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPKlamathWorkEthos);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPKlamathWorkEthos, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatXPKlamathStrategy) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPKlamathStrategy);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPKlamathStrategy, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechNatXPKlamathHuckleberryFeast) == cTechStatusObtainable) &&
       (xsGetTime() > 21*60*1000)) // Use only after at least 21 minutes of game time (i.e. 7 crates)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPKlamathHuckleberryFeast);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPKlamathHuckleberryFeast, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }

   // Mapuche techs
   if (kbTechGetStatus(cTechNatXPMapucheTactics) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPMapucheTactics);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPMapucheTactics, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatXPMapucheAdMapu) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPMapucheAdMapu);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPMapucheAdMapu, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechNatXPMapucheTreatyOfQuillin) == cTechStatusObtainable) &&
       (xsGetTime() > 20*60*1000)) // Use only after at least 20 minutes of game time (i.e. 10 crates)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPMapucheTreatyOfQuillin);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPMapucheTreatyOfQuillin, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }

   // Maya techs
   if (kbTechGetStatus(cTechNatCalendar) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatCalendar);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatCalendar, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatCottonArmor) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatCottonArmor);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatCottonArmor, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }

   // Navajo techs
   if (kbTechGetStatus(cTechNatXPNavajoCraftsmanship) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPNavajoCraftsmanship);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPNavajoCraftsmanship, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }

   // Seminole techs
   if (kbTechGetStatus(cTechNatBowyery) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatBowyery);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatBowyery, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }

   // Tupi techs
   if (kbTechGetStatus(cTechNatPoisonArrowFrogs) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatPoisonArrowFrogs);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatPoisonArrowFrogs, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatForestBurning) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatForestBurning);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatForestBurning, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatAnimalLore) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatAnimalLore);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatAnimalLore, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   // Zapotec techs
   if (kbTechGetStatus(cTechNatXPZapotecCultOfTheDead) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPZapotecCultOfTheDead);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPZapotecCultOfTheDead, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechNatXPZapotecFoodOfTheGods) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPZapotecFoodOfTheGods);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPZapotecFoodOfTheGods, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechNatXPZapotecCloudPeople) == cTechStatusObtainable) &&
       (xsGetTime() > 20*60*1000)) // Use only after at least 20 minutes of game time (i.e. 10 crates)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechNatXPZapotecCloudPeople);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechNatXPZapotecCloudPeople, getUnit(cUnitTypeTradingPost), cEconomyEscrowID, 50);
      return;
   }
}


rule minorAsianTribeTechMonitor
inactive
minInterval 90
{
   int techPlanID = -1;

   // Get techs from different minor Asian tribes one at a time as they become available
   // Unavailable tribes and techs are simply ignored
   // Research plans are "blindly" tried at different trading posts as there is no way to 
   // identify specific trading posts in the AI script

   // Bhakti techs
   if (kbTechGetStatus(cTechYPNatBhaktiYoga) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatBhaktiYoga);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatBhaktiYoga, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPNatBhaktiReinforcedGuantlets) == cTechStatusObtainable) && (kbGetAge() > cAge3) && (kbUnitCount(cMyID, cUnitTypeypNatTigerClaw, cUnitStateAlive) >= 10)) 
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatBhaktiReinforcedGuantlets);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatBhaktiReinforcedGuantlets, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }

   // Jesuit techs
   if (kbTechGetStatus(cTechYPNatJesuitSmokelessPowder) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatJesuitSmokelessPowder);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatJesuitSmokelessPowder, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechYPNatJesuitFlyingButtress) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatJesuitFlyingButtress);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatJesuitFlyingButtress, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }

   // Shaolin techs
   if (kbTechGetStatus(cTechYPNatShaolinWoodClearing) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatShaolinWoodClearing);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatShaolinWoodClearing, getUnit(cUnitTypeypTradingPostAsian), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechYPNatShaolinClenchedFist) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatShaolinClenchedFist);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatShaolinClenchedFist, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPNatShaolinDimMak) == cTechStatusObtainable) && (kbGetAge() > cAge3) && (kbUnitCount(cMyID, cUnitTypeypNatRattanShield, cUnitStateAlive) >= 10)) 
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatShaolinDimMak);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatShaolinDimMak, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }

   // Sufi techs
   if (kbTechGetStatus(cTechYPNatSufiFasting) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatSufiFasting);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatSufiFasting, getUnit(cUnitTypeypTradingPostAsian), cEconomyEscrowID, 50);
      return;
   }

   // Udasi techs
   if (kbTechGetStatus(cTechYPNatUdasiNewYear) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatUdasiNewYear);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatUdasiNewYear, getUnit(cUnitTypeypTradingPostAsian), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechYPNatUdasiGurus) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatUdasiGurus);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatUdasiGurus, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPNatUdasiArmyOfThePure) == cTechStatusObtainable) && (kbGetAge() > cAge3) && (kbUnitCount(cMyID, cUnitTypeypNatChakram, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercChakram, cUnitStateAlive) >= 10)) 
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatUdasiArmyOfThePure);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatUdasiArmyOfThePure, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }

   // Zen techs
   if (kbTechGetStatus(cTechYPNatZenMasterLessons) == cTechStatusObtainable)
   {
      techPlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPNatZenMasterLessons);
      if (techPlanID >= 0)
         aiPlanDestroy(techPlanID);
      createSimpleResearchPlan(cTechYPNatZenMasterLessons, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
}


rule balloonMonitor
inactive
minInterval 10
{
   // Create plan only when balloon available and exploring allowed
   if ((kbUnitCount(cMyID, cUnitTypexpAdvancedBalloon) == 0) || (cvOkToExplore == false))
   {
      return;
   }

   // Create explore plan
   int balloonExplore = aiPlanCreate("Balloon Explore", cPlanExplore);
   aiPlanSetDesiredPriority(balloonExplore, 99);
   aiPlanAddUnitType(balloonExplore, cUnitTypexpAdvancedBalloon, 1, 1, 1);
   aiPlanSetEscrowID(balloonExplore, cEconomyEscrowID);
   aiPlanSetBaseID(balloonExplore, kbBaseGetMainID(cMyID));
   aiPlanSetVariableBool(balloonExplore, cExplorePlanDoLoops, 0, false);
   aiPlanSetActive(balloonExplore);

   // Disable rule
   xsDisableSelf();   
}


rule aztecWarhutUpgradeMonitor
inactive
minInterval 90
{
   int aztecWarhutUpgradePlan = -1;

   // Disable rule for anyone but Aztecs
   if (kbGetCiv() != cCivXPAztec)
   {
      xsDisableSelf();
      return;
   }

   // Quit if no fortifications are allowed
   if (cvOkToFortify == false)
   {
      return; 
   }

   if (kbGetAge() < cAge3)  //unavailable until age 3.
   {
      return; 
   }

   // Disable rule once both upgrades are available
   if ((kbTechGetStatus(cTechStrongWarHut) == cTechStatusActive) &&
       (kbTechGetStatus(cTechMightyWarHut) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Research both upgrades as they become available, but only if there are enough war huts around
   if ((kbTechGetStatus(cTechStrongWarHut) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateABQ) >= 3))
   {
      aztecWarhutUpgradePlan = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechStrongWarHut);
      if (aztecWarhutUpgradePlan >= 0)
         aiPlanDestroy(aztecWarhutUpgradePlan);
      createSimpleResearchPlan(cTechStrongWarHut, -1, cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechMightyWarHut) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeWarHut, cUnitStateABQ) >= 5))
   {
      aztecWarhutUpgradePlan = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechMightyWarHut);
      if (aztecWarhutUpgradePlan >= 0)
         aiPlanDestroy(aztecWarhutUpgradePlan);
      createSimpleResearchPlan(cTechMightyWarHut, -1, cMilitaryEscrowID, 50);
      return;
   }
}


rule settlerUpgradeMonitor
inactive
minInterval 30 // research to be started 3 minutes into Age 2
{
   int upgradePlanID = -1;

   // Disable rule once the upgrades are available
   if (civIsNative() == true)
   {
      if (kbTechGetStatus(cTechSpiritMedicine) == cTechStatusActive)
      {
         xsDisableSelf();
         return;
      }
   }
   else if (civIsAsian() == true)
   {
      if (kbTechGetStatus(cTechypMarketSpiritMedicine) == cTechStatusActive)
      {
         xsDisableSelf();
         return;
      }
   }
   else
   {
      if ((kbTechGetStatus(cTechGreatCoat) == cTechStatusActive) &&
          (kbTechGetStatus(cTechBlunderbuss) == cTechStatusActive))
      {
         xsDisableSelf();
         return;
      }
   }

   // Get upgrades one at a time
   if (kbTechGetStatus(cTechSpiritMedicine) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechSpiritMedicine);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechSpiritMedicine, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypMarketSpiritMedicine) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypMarketSpiritMedicine);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypMarketSpiritMedicine, getUnit(cUnitTypeypTradeMarketAsian), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechGreatCoat) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGreatCoat);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGreatCoat, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechBlunderbuss) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechBlunderbuss);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechBlunderbuss, getUnit(cUnitTypeMarket), cEconomyEscrowID, 50);
      return;
   }
}


rule arsenalUpgradeMonitor
inactive
minInterval 60
{
   int upgradePlanID = -1;

   // Disable rule for native or Asian civs
   if ((civIsNative() == true) || (civIsAsian() == true))
   {
      xsDisableSelf();
      return;
   }

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechRifling) == cTechStatusActive) &&
       (kbTechGetStatus(cTechInfantryBreastplate) == cTechStatusActive) &&
       (kbTechGetStatus(cTechBayonet) == cTechStatusActive) &&
       (kbTechGetStatus(cTechCavalryCuirass) == cTechStatusActive) &&
       (kbTechGetStatus(cTechCaracole) == cTechStatusActive) &&
       (kbTechGetStatus(cTechGunnersQuadrant) == cTechStatusActive) &&
       ((kbTechGetStatus(cTechHeatedShot) == cTechStatusActive) || (getUnit(cUnitTypeHomeCityWaterSpawnFlag) <= 0)))
   {
      xsDisableSelf();
      return;
   }

   // Quit if there is no arsenal
   if (kbUnitCount(cMyID, cUnitTypeArsenal, cUnitStateAlive) < 1)
   {
      return;
   }

   // Get 'Heated Shot' upgrade on water maps
   if ((kbTechGetStatus(cTechHeatedShot) == cTechStatusObtainable) && (getUnit(cUnitTypeHomeCityWaterSpawnFlag) > 0))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechHeatedShot);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechHeatedShot, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }

   // Get other upgrades one at the time, provided a sufficient number of units to be improved are available
   if ((kbTechGetStatus(cTechGunnersQuadrant) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractArtillery, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGunnersQuadrant);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGunnersQuadrant, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRifling) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeSkirmisher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeCacadore, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatRifleman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatMercRifleman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeMercJaeger, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeStrelet, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatTracker, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatMercTracker, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeAbusGun, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpMusketWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpWarRifle, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatKlamathRifleman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatNavajoRifleman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRifling);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRifling, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechBayonet) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeMusketeer, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeJanissary, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeGrenadier, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeMercHighlander, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeMercFusilier, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypAshigaru, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateGuerreiros, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateStadhouders, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechBayonet);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechBayonet, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechCaracole) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractLightCavalry, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechCaracole);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechCaracole, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechCavalryCuirass) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHeavyCavalry, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechCavalryCuirass);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechCavalryCuirass, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechInfantryBreastplate) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHandInfantry, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeCrossbowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBlackwoodArcher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatMercBlackwoodArcher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBlowgunWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBolasWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpEagleKnight, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatSharktoothBowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeLongbowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpWarBow, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpAenna, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpArrowKnight, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpMacehualtin, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypYumi, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypShinobiHorse, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateShinobi, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateBestieros, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechInfantryBreastplate);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechInfantryBreastplate, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
}


rule arsenalUpgradeAsianMonitor
inactive
minInterval 60
{
   int upgradePlanID = -1;

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechInfantryBreastplate) == cTechStatusActive) &&
       (kbTechGetStatus(cTechBayonet) == cTechStatusActive) &&
       (kbTechGetStatus(cTechCavalryCuirass) == cTechStatusActive) &&
       (kbTechGetStatus(cTechGunnersQuadrant) == cTechStatusActive) &&
       ((kbTechGetStatus(cTechHeatedShot) == cTechStatusActive) || (getUnit(cUnitTypeHomeCityWaterSpawnFlag) <= 0)))
   {
      xsDisableSelf();
      return;
   }

   // Quit if there is no special arsenal built from a wagon around
   if (kbUnitCount(cMyID, cUnitTypeypArsenalAsian, cUnitStateAlive) < 1)
   {
      return;
   }

   // Get 'Heated Shot' upgrade on water maps
   if ((kbTechGetStatus(cTechHeatedShot) == cTechStatusObtainable) && (getUnit(cUnitTypeHomeCityWaterSpawnFlag) > 0))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechHeatedShot);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechHeatedShot, getUnit(cUnitTypeypArsenalAsian), cMilitaryEscrowID, 50);
      return;
   }

   // Get other upgrades one at the time, provided a sufficient number of units to be improved are available
   if ((kbTechGetStatus(cTechGunnersQuadrant) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractArtillery, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGunnersQuadrant);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGunnersQuadrant, getUnit(cUnitTypeypArsenalAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechBayonet) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeMusketeer, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeJanissary, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeGrenadier, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeMercHighlander, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeMercFusilier, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypAshigaru, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateGuerreiros, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateStadhouders, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechBayonet);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechBayonet, getUnit(cUnitTypeypArsenalAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechCavalryCuirass) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHeavyCavalry, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechCavalryCuirass);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechCavalryCuirass, getUnit(cUnitTypeypArsenalAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechInfantryBreastplate) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHandInfantry, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeCrossbowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBlackwoodArcher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatMercBlackwoodArcher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBlowgunWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBolasWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpEagleKnight, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatSharktoothBowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeLongbowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpWarBow, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpAenna, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpArrowKnight, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpMacehualtin, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypYumi, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypShinobiHorse, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateShinobi, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateBestieros, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechInfantryBreastplate);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechInfantryBreastplate, getUnit(cUnitTypeypArsenalAsian), cMilitaryEscrowID, 50);
      return;
   }
}


rule advancedArsenalUpgradeMonitor
inactive
minInterval 60
{
   int upgradePlanID = -1;

   // Disable rule for native or Asian civs
   if ((civIsNative() == true) || (civIsAsian() == true))
   {
      xsDisableSelf();
      return;
   }

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechPaperCartridge) == cTechStatusActive) &&
       (kbTechGetStatus(cTechFlintlock) == cTechStatusActive) &&
       (kbTechGetStatus(cTechMilitaryDrummers) == cTechStatusActive) &&
       (kbTechGetStatus(cTechProfessionalGunners) == cTechStatusActive) &&
       (kbTechGetStatus(cTechTrunion) == cTechStatusActive) &&
       (kbTechGetStatus(cTechPillage) == cTechStatusActive) &&
       (kbTechGetStatus(cTechIncendiaryGrenades) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Quit if there is no arsenal
   if (kbUnitCount(cMyID, cUnitTypeArsenal, cUnitStateAlive) < 1)
   {
      return;
   }

   // Get upgrades one at the time, provided a sufficient number of units to be improved are available
   if ((kbTechGetStatus(cTechPaperCartridge) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractGunpowderTrooper, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechPaperCartridge);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechPaperCartridge, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechFlintlock) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractGunpowderTrooper, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechFlintlock);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechFlintlock, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechMilitaryDrummers) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractInfantry, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechMilitaryDrummers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechMilitaryDrummers, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechProfessionalGunners) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractArtillery, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechProfessionalGunners);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechProfessionalGunners, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechTrunion) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractArtillery, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechTrunion);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechTrunion, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechPillage) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHeavyCavalry, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechPillage);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechPillage, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechIncendiaryGrenades) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeGrenadier, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechIncendiaryGrenades);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechIncendiaryGrenades, getUnit(cUnitTypeArsenal), cMilitaryEscrowID, 50);
      return;
   }
}


rule goldenPavillionUpgradeMonitor
inactive
minInterval 60
{
   int upgradePlanID = -1;
   int pavillionType = -1;

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechPaperCartridge) == cTechStatusActive) &&
       (kbTechGetStatus(cTechFlintlock) == cTechStatusActive) &&
       (kbTechGetStatus(cTechProfessionalGunners) == cTechStatusActive) &&
       (kbTechGetStatus(cTechPillage) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Check for golden pavillion
   if (kbUnitCount(cMyID, cUnitTypeypWJGoldenPavillion2, cUnitStateAlive) > 0)
   {
      pavillionType = cUnitTypeypWJGoldenPavillion2;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWJGoldenPavillion3, cUnitStateAlive) > 0)
   {
      pavillionType = cUnitTypeypWJGoldenPavillion3;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWJGoldenPavillion4, cUnitStateAlive) > 0)
   {
      pavillionType = cUnitTypeypWJGoldenPavillion4;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWJGoldenPavillion5, cUnitStateAlive) > 0)
   {
      pavillionType = cUnitTypeypWJGoldenPavillion5;
   }

   // Quit if there is no golden pavillion
   if (pavillionType < 0)
   {
      return;
   }

   // Get upgrades one at the time, provided a sufficient number of units to be improved are available
   if ((kbTechGetStatus(cTechPaperCartridge) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractGunpowderTrooper, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechPaperCartridge);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechPaperCartridge, getUnit(pavillionType), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechFlintlock) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractGunpowderTrooper, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechFlintlock);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechFlintlock, getUnit(pavillionType), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechProfessionalGunners) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractArtillery, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechProfessionalGunners);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechProfessionalGunners, getUnit(pavillionType), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechPillage) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHeavyCavalry, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechPillage);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechPillage, getUnit(pavillionType), cMilitaryEscrowID, 50);
      return;
   }
}


rule newWayIroquoisMonitor
inactive
minInterval 90
{
   int upgradePlanID = -1;

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechRifling) == cTechStatusActive) &&
       (kbTechGetStatus(cTechInfantryBreastplate) == cTechStatusActive) &&
       (kbTechGetStatus(cTechCavalryCuirass) == cTechStatusActive) &&
       (kbTechGetStatus(cTechCaracole) == cTechStatusActive) &&
       ((kbTechGetStatus(cTechHeatedShot) == cTechStatusActive) || (getUnit(cUnitTypeHomeCityWaterSpawnFlag) <= 0)))
   {
      xsDisableSelf();
      return;
   }

   // Get 'Heated Shot' upgrade on water maps
   if ((kbTechGetStatus(cTechHeatedShot) == cTechStatusObtainable) && (getUnit(cUnitTypeHomeCityWaterSpawnFlag) > 0))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechHeatedShot);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechHeatedShot, getUnit(cUnitTypeLonghouse), cMilitaryEscrowID, 50);
      return;
   }

   // Get other upgrades one at the time, provided a sufficient number of units to be improved are available
   if ((kbTechGetStatus(cTechRifling) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeSkirmisher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeCacadore, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatRifleman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatMercRifleman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeMercJaeger, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeStrelet, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatTracker, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatMercTracker, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeAbusGun, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpMusketWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpWarRifle, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatKlamathRifleman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatNavajoRifleman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRifling);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRifling, getUnit(cUnitTypeLonghouse), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechCaracole) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractLightCavalry, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechCaracole);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechCaracole, getUnit(cUnitTypeLonghouse), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechCavalryCuirass) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHeavyCavalry, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechCavalryCuirass);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechCavalryCuirass, getUnit(cUnitTypeLonghouse), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechInfantryBreastplate) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHandInfantry, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeCrossbowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBlackwoodArcher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatMercBlackwoodArcher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBlowgunWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBolasWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpEagleKnight, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatSharktoothBowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeLongbowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpWarBow, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpAenna, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpArrowKnight, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpMacehualtin, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypYumi, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypShinobiHorse, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateShinobi, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateBestieros, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechInfantryBreastplate);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechInfantryBreastplate, getUnit(cUnitTypeLonghouse), cMilitaryEscrowID, 50);
      return;
   }
}


rule newWaySiouxMonitor
inactive
minInterval 90
{
   int upgradePlanID = -1;

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechRifling) == cTechStatusActive) &&
       (kbTechGetStatus(cTechInfantryBreastplate) == cTechStatusActive) &&
       (kbTechGetStatus(cTechCavalryCuirass) == cTechStatusActive) &&
       (kbTechGetStatus(cTechCaracole) == cTechStatusActive) &&
       (kbTechGetStatus(cTechPillage) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Get upgrades one at the time, provided a sufficient number of units to be improved are available
   if ((kbTechGetStatus(cTechCaracole) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractLightCavalry, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechCaracole);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechCaracole, getUnit(cUnitTypeTeepee), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechPillage) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHeavyCavalry, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechPillage);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechPillage, getUnit(cUnitTypeTeepee), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechCavalryCuirass) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHeavyCavalry, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechCavalryCuirass);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechCavalryCuirass, getUnit(cUnitTypeTeepee), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRifling) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeSkirmisher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeCacadore, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatRifleman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatMercRifleman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeMercJaeger, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeStrelet, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatTracker, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatMercTracker, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeAbusGun, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpMusketWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpWarRifle, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatKlamathRifleman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatNavajoRifleman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRifling);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRifling, getUnit(cUnitTypeTeepee), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechInfantryBreastplate) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeAbstractHandInfantry, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeCrossbowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBlackwoodArcher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatMercBlackwoodArcher, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBlowgunWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatBolasWarrior, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpEagleKnight, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeNatSharktoothBowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeLongbowman, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpWarBow, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpAenna, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpArrowKnight, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypexpMacehualtin, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypYumi, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypShinobiHorse, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateShinobi, cUnitStateAlive) +
        kbUnitCount(cMyID, cUnitTypeypConsulateBestieros, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechInfantryBreastplate);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechInfantryBreastplate, getUnit(cUnitTypeTeepee), cMilitaryEscrowID, 50);
      return;
   }
}


rule veteranUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule for native or Asian civs
   if ((civIsNative() == true) || (civIsAsian() == true))
   {
      xsDisableSelf();
      return;
   }

   // Get veteran upgrades one at the time, provided a sufficient number of units to be improved are available

   // Stable units
   if ((kbTechGetStatus(cTechVeteranHussars) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHussar, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranHussars);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranHussars, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechVeteranUhlans) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeUhlan, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranUhlans);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranUhlans, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }

   // Artillery depot units
   if ((kbTechGetStatus(cTechVeteranAbusGuns) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbusGun, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranAbusGuns);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranAbusGuns, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechVeteranGrenadiers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeGrenadier, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranGrenadiers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranGrenadiers, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }

   // Barracks units
   if ((kbTechGetStatus(cTechVeteranMusketeers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeMusketeer, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranMusketeers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranMusketeers, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechVeteranJanissaries) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeJanissary, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranJanissaries);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranJanissaries, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechVeteranLongbowmen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeLongbowman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranLongbowmen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranLongbowmen, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechVeteranDopplesoldners) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeDopplesoldner, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranDopplesoldners);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranDopplesoldners, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechVeteranRodeleros) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeRodelero, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranRodeleros);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranRodeleros, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechVeteranCrossbowmen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeCrossbowman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranCrossbowmen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranCrossbowmen, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechVeteranPikemen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypePikeman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechVeteranPikemen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechVeteranPikemen, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
}


rule guardUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule for native or Asian civs
   if ((civIsNative() == true) || (civIsAsian() == true))
   {
      xsDisableSelf();
      return;
   }

   // Get guard upgrades one at the time, provided a sufficient number of units to be improved are available

   // Stable units
   if ((kbTechGetStatus(cTechGuardWarWagons) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeWarWagon, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardWarWagons);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardWarWagons, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardDragoons) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeDragoon, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardDragoons);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardDragoons, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGJinetes) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeDragoon, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGJinetes);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGJinetes, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGGendarmes) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeCuirassier, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGGendarmes);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGGendarmes, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardHussars) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHussar, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardHussars);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardHussars, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGLifeGuardHussars) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHussar, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGLifeGuardHussars);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGLifeGuardHussars, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGGardener) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHussar, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGGardener);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGGardener, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGCzapkaUhlans) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeUhlan, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGCzapkaUhlans);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGCzapkaUhlans, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardRuyters) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeRuyter, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardRuyters);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardRuyters, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGCarabineer) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeRuyter, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGCarabineer);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGCarabineer, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardCavalryArchers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeCavalryArcher, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardCavalryArchers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardCavalryArchers, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGTartarLoyalists) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeCavalryArcher, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGTartarLoyalists);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGTartarLoyalists, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardOprichniks) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeOprichnik, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardOprichniks);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardOprichniks, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }

   // Artillery depot units
   if ((kbTechGetStatus(cTechGuardAbusGuns) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbusGun, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardAbusGuns);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardAbusGuns, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardGrenadiers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeGrenadier, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardGrenadiers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardGrenadiers, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGBaratcuCorps) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeGrenadier, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGBaratcuCorps);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGBaratcuCorps, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGPavlovGrenadiers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeGrenadier, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGPavlovGrenadiers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGPavlovGrenadiers, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }

   // Barracks units
   if ((kbTechGetStatus(cTechGuardMusketeers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeMusketeer, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardMusketeers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardMusketeers, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGRedcoats) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeMusketeer, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGRedcoats);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGRedcoats, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGGuerreiros) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeMusketeer, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGGuerreiros);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGGuerreiros, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardSkirmishers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeSkirmisher, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardSkirmishers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardSkirmishers, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGVoltigeur) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeSkirmisher, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGVoltigeur);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGVoltigeur, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGPrussianNeedleGun) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeSkirmisher, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGPrussianNeedleGun);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGPrussianNeedleGun, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardJanissaries) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeJanissary, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardJanissaries);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardJanissaries, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardCacadores) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeCacadore, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardCacadores);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardCacadores, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardLongbowmen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeLongbowman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardLongbowmen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardLongbowmen, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardDopplesoldners) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeDopplesoldner, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardDopplesoldners);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardDopplesoldners, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardHalberdiers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHalberdier, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardHalberdiers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardHalberdiers, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGNassausLinearTactics) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHalberdier, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGNassausLinearTactics);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGNassausLinearTactics, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGuardPikemen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypePikeman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGuardPikemen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGuardPikemen, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGTercio) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypePikeman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGTercio);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGTercio, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
}


rule imperialUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule for native or Asian civs
   if ((civIsNative() == true) || (civIsAsian() == true))
   {
      xsDisableSelf();
      return;
   }

   // Get imperial upgrades one at the time, provided a sufficient number of units to be improved are available

   // Stable units
   if ((kbTechGetStatus(cTechImperialWarWagons) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeWarWagon, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialWarWagons);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialWarWagons, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialGardener) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHussar, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialGardener);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialGardener, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialHussars) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHussar, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialHussars);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialHussars, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialLifeGuard) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHussar, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialLifeGuard);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialLifeGuard, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialCzapkaUhlans) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeUhlan, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialCzapkaUhlans);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialCzapkaUhlans, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialJinetes) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeDragoon, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialJinetes);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialJinetes, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialDragoons) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeDragoon, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialDragoons);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialDragoons, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialGendarme) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeCuirassier, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialGendarme);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialGendarme, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGGarrochista) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeLancer, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGGarrochista);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGGarrochista, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialCarabineer) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeRuyter, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialCarabineer);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialCarabineer, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialCavalryArchers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeCavalryArcher, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialCavalryArchers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialCavalryArchers, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialTartarLoyalist) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeCavalryArcher, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialTartarLoyalist);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialTartarLoyalist, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialOprichniks) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeOprichnik, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialOprichniks);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialOprichniks, getUnit(cUnitTypeStable), cMilitaryEscrowID, 50);
      return;
   }

   // Artillery depot units
   if ((kbTechGetStatus(cTechImperialAbusGun) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbusGun, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialAbusGun);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialAbusGun, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialPavlovs) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeGrenadier, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialPavlovs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialPavlovs, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialGrenadiers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeGrenadier, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialGrenadiers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialGrenadiers, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialBaratcu) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeGrenadier, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialBaratcu);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialBaratcu, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   // Barracks units
   if ((kbTechGetStatus(cTechImperialRedcoat) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeMusketeer, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialRedcoat);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialRedcoat, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialGuerreiros) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeMusketeer, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialGuerreiros);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialGuerreiros, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialMusketeers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeMusketeer, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialMusketeers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialMusketeers, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialJanissaries) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeJanissary, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialJanissaries);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialJanissaries, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialCacadores) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeCacadore, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialCacadores);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialCacadores, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialVoltigeur) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeSkirmisher, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialVoltigeur);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialVoltigeur, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialNeedleGun) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeSkirmisher, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialNeedleGun);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialNeedleGun, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialSkirmishers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeSkirmisher, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialSkirmishers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialSkirmishers, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialLongbowmen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeLongbowman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialLongbowmen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialLongbowmen, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialDopplesoldner) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeDopplesoldner, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialDopplesoldner);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialDopplesoldner, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRGEspadachins) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeRodelero, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRGEspadachins);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRGEspadachins, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialHalberdiers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHalberdier, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialHalberdiers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialHalberdiers, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialNassauers) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeHalberdier, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialNassauers);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialNassauers, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialTercio) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypePikeman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialTercio);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialTercio, getUnit(cUnitTypeBarracks), cMilitaryEscrowID, 50);
      return;
   }

   // Dock units
   if ((kbTechGetStatus(cTechImperialManOWar) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeFrigate, cUnitStateAlive) >= 1))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialManOWar);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialManOWar, getUnit(cUnitTypeDock), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialMonitors) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeMonitor, cUnitStateAlive) >= 1))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialMonitors);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialMonitors, getUnit(cUnitTypeDock), cMilitaryEscrowID, 50);
      return;
   }
}


rule artilleryUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule for Asians, Aztecs and Sioux 
   if ((civIsAsian() == true) || (kbGetCiv() == cCivXPAztec) || (kbGetCiv() == cCivXPSioux))
   {
      xsDisableSelf();
      return;
   }

   // Get artillery upgrades one at the time, provided a sufficient number of units to be improved are available
   if ((kbTechGetStatus(cTechFieldGun) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeFalconet, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechFieldGun);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechFieldGun, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialFieldGun) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeFalconet, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialFieldGun);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialFieldGun, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechGrapeShot) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeCulverin, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechGrapeShot);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechGrapeShot, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechHeavyHorseArtillery) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpHorseArtillery, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechHeavyHorseArtillery);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechHeavyHorseArtillery, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialHorseArtillery) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpHorseArtillery, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialHorseArtillery);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialHorseArtillery, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechRabauld) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeOrganGun, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRabauld);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRabauld, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialRabaulds) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeOrganGun, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialRabaulds);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialRabaulds, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechHowitzer) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeMortar, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechHowitzer);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechHowitzer, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImperialHowitzer) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeMortar, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialHowitzer);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialHowitzer, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechFieldCannon) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpLightCannon, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechFieldCannon);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechFieldCannon, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryLightCannon) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpLightCannon, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryLightCannon);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryLightCannon, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
}


rule eliteUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule for non-native civs
   if (civIsNative() == false)
   {
      xsDisableSelf();
      return;
   }

   // Get elite upgrades one at the time, provided a sufficient number of units to be improved are available

   // Corral units
   if ((kbTechGetStatus(cTechEliteHorsemen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpHorseman, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEliteHorsemen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEliteHorsemen, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechEliteAxeRiders) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpAxeRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEliteAxeRiders);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEliteAxeRiders, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechEliteBowRider) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpBowRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEliteBowRider);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEliteBowRider, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }

   // War hut units
   if ((kbTechGetStatus(cTechEliteAennas) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpAenna, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEliteAennas);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEliteAennas, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechEliteTomahawks) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpTomahawk, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEliteTomahawks);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEliteTomahawks, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechEliteWarBows) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpWarBow, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEliteWarBows);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEliteWarBows, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechEliteWarClubs) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpWarClub, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEliteWarClubs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEliteWarClubs, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechEliteCoyotemen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpCoyoteMan, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEliteCoyotemen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEliteCoyotemen, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechEliteMacehualtins) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpMacehualtin, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechEliteMacehualtins);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechEliteMacehualtins, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechElitePumaMen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpPumaMan, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechElitePumaMen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechElitePumaMen, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
}


rule championUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule for non-native civs
   if (civIsNative() == false)
   {
      xsDisableSelf();
      return;
   }

   // Get champion upgrades one at the time, provided a sufficient number of units to be improved are available

   // Corral units
   if ((kbTechGetStatus(cTechChampionMusketRiders) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpMusketRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionMusketRiders);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionMusketRiders, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionRifleRiders) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpRifleRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionRifleRiders);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionRifleRiders, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionHorsemen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpHorseman, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionHorsemen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionHorsemen, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionAxeRiders) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpAxeRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionAxeRiders);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionAxeRiders, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionBowRider) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpBowRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionBowRider);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionBowRider, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionCoupRiders) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpCoupRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionCoupRiders);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionCoupRiders, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }

   // War hut units
   if ((kbTechGetStatus(cTechChampionWarRifles) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpWarRifle, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionWarRifles);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionWarRifles, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionMusketWarriors) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpMusketWarrior, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionMusketWarriors);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionMusketWarriors, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionAennas) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpAenna, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionAennas);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionAennas, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionTomahawk) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpTomahawk, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionTomahawk);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionTomahawk, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionWarBows) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpWarBow, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionWarBows);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionWarBows, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionWarClubs) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpWarClub, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionWarClubs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionWarClubs, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionCoyotemen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpCoyoteMan, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionCoyotemen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionCoyotemen, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionMacehualtins) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpMacehualtin, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionMacehualtins);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionMacehualtins, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionPumaMen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpPumaMan, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionPumaMen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionPumaMen, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }

   // Artillery depot units
   if ((kbTechGetStatus(cTechChampionMantlets) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpMantlet, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionMantlets);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionMantlets, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionRams) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpRam, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionRams);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionRams, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }

   // Nobles hut units
   if ((kbTechGetStatus(cTechChampionJaguarKnight) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpJaguarKnight, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionJaguarKnight);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionJaguarKnight, getUnit(cUnitTypeNoblesHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionArrowKnight) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpArrowKnight, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionArrowKnight);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionArrowKnight, getUnit(cUnitTypeNoblesHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionEagleKnight) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpEagleKnight, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionEagleKnight);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionEagleKnight, getUnit(cUnitTypeNoblesHut), cMilitaryEscrowID, 50);
      return;
   }
}


rule legendaryUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule for non-native civs
   if (civIsNative() == false)
   {
      xsDisableSelf();
      return;
   }

   // Get legendary upgrades one at the time, provided a sufficient number of units to be improved are available

   // Corral units
   if ((kbTechGetStatus(cTechImpLegendaryMusketRiders) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpMusketRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryMusketRiders);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryMusketRiders, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryRifleRiders) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpRifleRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryRifleRiders);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryRifleRiders, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryHorsemen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpHorseman, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryHorsemen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryHorsemen, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryAxeRiders) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpAxeRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryAxeRiders);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryAxeRiders, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryBowRider) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpBowRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryBowRider);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryBowRider, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryCoupRiders) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpCoupRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryCoupRiders);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryCoupRiders, getUnit(cUnitTypeCorral), cMilitaryEscrowID, 50);
      return;
   }

   // War hut units
   if ((kbTechGetStatus(cTechImpLegendaryWarRifles) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpWarRifle, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryWarRifles);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryWarRifles, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryMusketWarriors) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpMusketWarrior, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryMusketWarriors);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryMusketWarriors, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryAennas) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpAenna, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryAennas);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryAennas, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryTomahawks) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpTomahawk, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryTomahawks);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryTomahawks, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryWarBows) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpWarBow, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryWarBows);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryWarBows, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryWarClubs) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpWarClub, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryWarClubs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryWarClubs, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryMacehualtins) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpMacehualtin, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryMacehualtins);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryMacehualtins, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryPumaMen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpPumaMan, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryPumaMen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryPumaMen, getUnit(cUnitTypeWarHut), cMilitaryEscrowID, 50);
      return;
   }

   // Artillery depot units
   if ((kbTechGetStatus(cTechImpLegendaryMantlets) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpMantlet, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryMantlets);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryMantlets, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryRams) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpRam, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryRams);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryRams, getUnit(cUnitTypeArtilleryDepot), cMilitaryEscrowID, 50);
      return;
   }

   // Nobles hut units
   if ((kbTechGetStatus(cTechImpLegendaryJaguarKnights) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpJaguarKnight, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryJaguarKnights);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryJaguarKnights, getUnit(cUnitTypeNoblesHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryArrowKnights) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpArrowKnight, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryArrowKnights);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryArrowKnights, getUnit(cUnitTypeNoblesHut), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechImpLegendaryEagleKnights) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypexpEagleKnight, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImpLegendaryEagleKnights);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImpLegendaryEagleKnights, getUnit(cUnitTypeNoblesHut), cMilitaryEscrowID, 50);
      return;
   }
}


rule disciplinedUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule for non-Asian civs
   if (civIsAsian() == false)
   {
      xsDisableSelf();
      return;
   }

   // Get disciplined upgrades one at the time, provided a sufficient number of units to be improved are available

   // War academy units
   if ((kbTechGetStatus(cTechYPDisciplinedChuKoNu) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypChuKoNu, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedChuKoNu);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedChuKoNu, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPDisciplinedQiangPikeman) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypQiangPikeman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedQiangPikeman);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedQiangPikeman, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPDisciplinedSteppeRider) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypSteppeRider, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedSteppeRider);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedSteppeRider, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPDisciplinedKeshik) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypKeshik, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedKeshik);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedKeshik, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }

   // Caravanserai units
   if ((kbTechGetStatus(cTechYPDisciplinedCamel) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractSowar, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedCamel);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedCamel, getUnit(cUnitTypeypCaravanserai), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPDisciplinedCamelGun) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractZamburak, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedCamelGun);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedCamelGun, getUnit(cUnitTypeypCaravanserai), cMilitaryEscrowID, 50);
      return;
   }

   // Stable units
   if ((kbTechGetStatus(cTechYPDisciplinedNaginataRider) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypNaginataRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedNaginataRider);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedNaginataRider, getUnit(cUnitTypeypStableJapanese), cMilitaryEscrowID, 50);
      return;
   }

   // Indian barracks units
   if ((kbTechGetStatus(cTechYPDisciplinedSepoy) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractSepoy, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedSepoy);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedSepoy, getUnit(cUnitTypeYPBarracksIndian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPDisciplinedGurkha) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractGurkha, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedGurkha);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedGurkha, getUnit(cUnitTypeYPBarracksIndian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPDisciplinedRajput) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractRajput, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedRajput);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedRajput, getUnit(cUnitTypeYPBarracksIndian), cMilitaryEscrowID, 50);
      return;
   }

   // Japanese barracks units
   if ((kbTechGetStatus(cTechYPDisciplinedAshigaru) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypAshigaru, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedAshigaru);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedAshigaru, getUnit(cUnitTypeypBarracksJapanese), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPDisciplinedYumi) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypYumi, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedYumi);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedYumi, getUnit(cUnitTypeypBarracksJapanese), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPDisciplinedSamurai) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypKensei, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedSamurai);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedSamurai, getUnit(cUnitTypeypBarracksJapanese), cMilitaryEscrowID, 50);
      return;
   }

   // Castle units
   if ((kbTechGetStatus(cTechYPDisciplinedFlameThrower) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypFlameThrower, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedFlameThrower);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedFlameThrower, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPDisciplinedFlailElephant) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractMercFlailiphant, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPDisciplinedFlailElephant);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPDisciplinedFlailElephant, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
}


rule honoredUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule for non-Asian civs
   if (civIsAsian() == false)
   {
      xsDisableSelf();
      return;
   }

   // Get honored upgrades one at the time, provided a sufficient number of units to be improved are available

   // War academy units
   if ((kbTechGetStatus(cTechYPHonoredIronFlail) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypIronFlail, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredIronFlail);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredIronFlail, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredMeteorHammer) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypMeteorHammer, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredMeteorHammer);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredMeteorHammer, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredArquebusier) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypArquebusier, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredArquebusier);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredArquebusier, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredChangdao) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypChangdao, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredChangdao);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredChangdao, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredChuKoNu) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypChuKoNu, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredChuKoNu);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredChuKoNu, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredQiangPikeman) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypQiangPikeman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredQiangPikeman);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredQiangPikeman, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredSteppeRider) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypSteppeRider, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredSteppeRider);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredSteppeRider, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredKeshik) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypKeshik, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredKeshik);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredKeshik, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }

   // Caravanserai units
   if ((kbTechGetStatus(cTechYPHonoredCamel) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractSowar, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredCamel);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredCamel, getUnit(cUnitTypeypCaravanserai), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredCamelGun) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractZamburak, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredCamelGun);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredCamelGun, getUnit(cUnitTypeypCaravanserai), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredMahout) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractMahout, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredMahout);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredMahout, getUnit(cUnitTypeypCaravanserai), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredHowdah) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractHowdah, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredHowdah);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredHowdah, getUnit(cUnitTypeypCaravanserai), cMilitaryEscrowID, 50);
      return;
   }

   // Stable units
   if ((kbTechGetStatus(cTechYPHonoredNaginataRider) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypNaginataRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredNaginataRider);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredNaginataRider, getUnit(cUnitTypeypStableJapanese), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredYabusame) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypYabusame, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredYabusame);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredYabusame, getUnit(cUnitTypeypStableJapanese), cMilitaryEscrowID, 50);
      return;
   }

   // Indian barracks units
   if ((kbTechGetStatus(cTechYPHonoredSepoy) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractSepoy, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredSepoy);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredSepoy, getUnit(cUnitTypeYPBarracksIndian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredGurkha) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractGurkha, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredGurkha);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredGurkha, getUnit(cUnitTypeYPBarracksIndian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredRajput) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractRajput, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredRajput);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredRajput, getUnit(cUnitTypeYPBarracksIndian), cMilitaryEscrowID, 50);
      return;
   }

   // Japanese barracks units
   if ((kbTechGetStatus(cTechYPHonoredAshigaru) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypAshigaru, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredAshigaru);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredAshigaru, getUnit(cUnitTypeypBarracksJapanese), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredYumi) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypYumi, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredYumi);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredYumi, getUnit(cUnitTypeypBarracksJapanese), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredSamurai) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypKensei, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredSamurai);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredSamurai, getUnit(cUnitTypeypBarracksJapanese), cMilitaryEscrowID, 50);
      return;
   }

   // Castle units
   if ((kbTechGetStatus(cTechYPHonoredFlameThrower) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypFlameThrower, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredFlameThrower);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredFlameThrower, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredHandMortar) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypHandMortar, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredHandMortar);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredHandMortar, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredFlailElephant) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractMercFlailiphant, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredFlailElephant);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredFlailElephant, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredSiegeElephant) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractSiegeElephant, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredSiegeElephant);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredSiegeElephant, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredFlamingArrow) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypFlamingArrow, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredFlamingArrow);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredFlamingArrow, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPHonoredMorutaru) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypMorutaru, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPHonoredMorutaru);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPHonoredMorutaru, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
}


rule exaltedUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule for non-Asian civs
   if (civIsAsian() == false)
   {
      xsDisableSelf();
      return;
   }

   // Get exalted upgrades one at the time, provided a sufficient number of units to be improved are available

   // War academy units
   if ((kbTechGetStatus(cTechYPExaltedIronFlail) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypIronFlail, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedIronFlail);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedIronFlail, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedMeteorHammer) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypMeteorHammer, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedMeteorHammer);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedMeteorHammer, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedArquebusier) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypArquebusier, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedArquebusier);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedArquebusier, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedChangdao) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypChangdao, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedChangdao);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedChangdao, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedChuKoNu) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypChuKoNu, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedChuKoNu);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedChuKoNu, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedQiangPikeman) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypQiangPikeman, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedQiangPikeman);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedQiangPikeman, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedSteppeRider) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypSteppeRider, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedSteppeRider);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedSteppeRider, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedKeshik) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypKeshik, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedKeshik);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedKeshik, getUnit(cUnitTypeypWarAcademy), cMilitaryEscrowID, 50);
      return;
   }

   // Caravanserai units
   if ((kbTechGetStatus(cTechYPExaltedCamel) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractSowar, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedCamel);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedCamel, getUnit(cUnitTypeypCaravanserai), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedCamelGun) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractZamburak, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedCamelGun);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedCamelGun, getUnit(cUnitTypeypCaravanserai), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedMahout) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractMahout, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedMahout);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedMahout, getUnit(cUnitTypeypCaravanserai), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedHowdah) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractHowdah, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedHowdah);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedHowdah, getUnit(cUnitTypeypCaravanserai), cMilitaryEscrowID, 50);
      return;
   }

   // Stable units
   if ((kbTechGetStatus(cTechYPExaltedNaginataRider) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypNaginataRider, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedNaginataRider);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedNaginataRider, getUnit(cUnitTypeypStableJapanese), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedYabusame) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypYabusame, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedYabusame);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedYabusame, getUnit(cUnitTypeypStableJapanese), cMilitaryEscrowID, 50);
      return;
   }

   // Indian barracks units
   if ((kbTechGetStatus(cTechYPExaltedSepoy) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractSepoy, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedSepoy);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedSepoy, getUnit(cUnitTypeYPBarracksIndian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedGurkha) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractGurkha, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedGurkha);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedGurkha, getUnit(cUnitTypeYPBarracksIndian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedRajput) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractRajput, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedRajput);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedRajput, getUnit(cUnitTypeYPBarracksIndian), cMilitaryEscrowID, 50);
      return;
   }

   // Japanese barracks units
   if ((kbTechGetStatus(cTechYPExaltedAshigaru) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypAshigaru, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedAshigaru);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedAshigaru, getUnit(cUnitTypeypBarracksJapanese), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedYumi) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypYumi, cUnitStateAlive) >= 12))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedYumi);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedYumi, getUnit(cUnitTypeypBarracksJapanese), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedSamurai) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypKensei, cUnitStateAlive) >= 8))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedSamurai);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedSamurai, getUnit(cUnitTypeypBarracksJapanese), cMilitaryEscrowID, 50);
      return;
   }

   // Castle units
   if ((kbTechGetStatus(cTechYPExaltedFlameThrower) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypFlameThrower, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedFlameThrower);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedFlameThrower, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedHandMortar) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypHandMortar, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedHandMortar);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedHandMortar, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedFlailElephant) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractMercFlailiphant, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedFlailElephant);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedFlailElephant, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedSiegeElephant) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeAbstractSiegeElephant, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedSiegeElephant);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedSiegeElephant, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedFlamingArrow) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypFlamingArrow, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedFlamingArrow);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedFlamingArrow, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedMorutaru) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypMorutaru, cUnitStateAlive) >= 2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedMorutaru);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedMorutaru, getUnit(cUnitTypeypCastle), cMilitaryEscrowID, 50);
      return;
   }

   // Dock units
   if ((kbTechGetStatus(cTechYPExaltedFuchuan) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypFuchuan, cUnitStateAlive) >= 1))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedFuchuan);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedFuchuan, getUnit(cUnitTypeYPDockAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechYPExaltedTekkousen) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeypTekkousen, cUnitStateAlive) >= 1))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechYPExaltedTekkousen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechYPExaltedTekkousen, getUnit(cUnitTypeYPDockAsian), cMilitaryEscrowID, 50);
      return;
   }
}


rule warriorSocietyUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Get warrior society upgrades one at the time, provided a sufficient number of units to be improved are available
   // Research plans are "blindly" tried at different trading posts as there is no way to identify specific trading posts in the AI script

   if ((kbTechGetStatus(cTechWarriorSocietyAztecs) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatJaguarWarrior, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatEagleWarrior, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyAztecs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyAztecs, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyCaribs) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatBlowgunWarrior, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatBlowgunAmbusher, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercBlowgunWarrior, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyCaribs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyCaribs, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyCherokee) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatRifleman, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercRifleman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyCherokee);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyCherokee, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyComanche) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatHorseArcher, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercHorseArcher, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyComanche);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyComanche, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyCree) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatTracker, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercTracker, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyCree);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyCree, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyInca) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatBolasWarrior, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatHuaminca, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyInca);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyInca, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyIroquois) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatTomahawk, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMantlet, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyIroquois);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyIroquois, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
   }
   if ((kbTechGetStatus(cTechWarriorSocietyLakota) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatAxeRider, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyLakota);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyLakota, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyMaya) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatHolcanSpearman, cUnitStateAlive)+ kbUnitCount(cMyID, cUnitTypeNatMercHolcanSpearman, cUnitStateAlive)  >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyMaya);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyMaya, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyNootka) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatClubman, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercClubman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyNootka);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyNootka, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietySeminoles) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatSharktoothBowman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietySeminoles);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietySeminoles, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyTupi) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatBlackwoodArcher, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercBlackwoodArcher, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyTupi);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyTupi, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyHuron) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatHuronMantlet, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercHuronMantlet, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyHuron);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyHuron, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyZapotec) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatLightningWarrior, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercLightningWarrior, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyZapotec);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyZapotec, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyKlamath) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatKlamathRifleman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyKlamath);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyKlamath, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
   }
   if ((kbTechGetStatus(cTechWarriorSocietyApache) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatApacheCavalry, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyApache);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyApache, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyNavajo) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatNavajoRifleman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyNavajo);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyNavajo, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyCheyenne) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatCheyenneRider, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercCheyenneRider, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyCheyenne);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyCheyenne, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechWarriorSocietyMapuche) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatMapucheClubman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechWarriorSocietyMapuche);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechWarriorSocietyMapuche, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
}


rule minorNativeChampionUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Get minor native champion upgrades one at the time, provided a sufficient number of units to be improved are available
   // Research plans are "blindly" tried at different trading posts as there is no way to identify specific trading posts in the AI script

   if ((kbTechGetStatus(cTechChampionAztecs) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatJaguarWarrior, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatEagleWarrior, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionAztecs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionAztecs, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionCaribs) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatBlowgunWarrior, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatBlowgunAmbusher, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercBlowgunWarrior, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionCaribs);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionCaribs, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionCherokee) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatRifleman, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercRifleman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionCherokee);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionCherokee, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionComanche) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatHorseArcher, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercHorseArcher, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionComanche);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionComanche, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionCree) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatTracker, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercTracker, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionCree);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionCree, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionInca) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatBolasWarrior, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatHuaminca, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionInca);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionInca, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionIroquois) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeNatTomahawk, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMantlet, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionIroquois);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionIroquois, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionLakota) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatAxeRider, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionLakota);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionLakota, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionMaya) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatHolcanSpearman, cUnitStateAlive)+ kbUnitCount(cMyID, cUnitTypeNatMercHolcanSpearman, cUnitStateAlive)  >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionMaya);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionMaya, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionNootka) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatClubman, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercClubman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionNootka);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionNootka, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionSeminoles) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatSharktoothBowman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionSeminoles);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionSeminoles, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionTupi) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatBlackwoodArcher, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercBlackwoodArcher, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionTupi);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionTupi, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionHuron) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatHuronMantlet, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercHuronMantlet, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionHuron);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionHuron, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionZapotec) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatLightningWarrior, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercLightningWarrior, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionZapotec);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionZapotec, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionKlamath) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatKlamathRifleman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionKlamath);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionKlamath, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionApache) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatApacheCavalry, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionApache);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionApache, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionNavajo) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatNavajoRifleman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionNavajo);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionNavajo, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionCheyenne) == cTechStatusObtainable) &&
       (kbUnitCount(cMyID, cUnitTypeNatCheyenneRider, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeNatMercCheyenneRider, cUnitStateAlive) >= 6))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionCheyenne);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionCheyenne, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechChampionMapuche) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeNatMapucheClubman, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechChampionMapuche);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechChampionMapuche, getUnit(cUnitTypeTradingPost), cMilitaryEscrowID, 50);
      return;
   }
}


rule minorAsianDisciplinedUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Get disciplined upgrades for minor Asian civilizations one at the time, provided a sufficient number of units to be improved are available
   // Research plans are "blindly" tried at different trading posts as there is no way to identify specific trading posts in the AI script

   if ((kbTechGetStatus(cTechypNatDisciplinedBhakti) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatTigerClaw, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercTigerClaw, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatDisciplinedBhakti);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatDisciplinedBhakti, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypNatDisciplinedJesuit) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatConquistador, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercConquistador, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatDisciplinedJesuit);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatDisciplinedJesuit, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypNatDisciplinedShaolin) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatRattanShield, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercRattanShield, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatDisciplinedShaolin);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatDisciplinedShaolin, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypNatDisciplinedSufi) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatWarElephant, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercWarElephant, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatDisciplinedSufi);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatDisciplinedSufi, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypNatDisciplinedUdasi) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatChakram, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercChakram, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatDisciplinedUdasi);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatDisciplinedUdasi, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypNatDisciplinedZen) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatSohei, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercSohei, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatDisciplinedZen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatDisciplinedZen, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
}


rule minorAsianHonoredUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Get honored upgrades for minor Asian civilizations one at the time, provided a sufficient number of units to be improved are available
   // Research plans are "blindly" tried at different trading posts as there is no way to identify specific trading posts in the AI script

   if ((kbTechGetStatus(cTechypNatHonoredBhakti) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatTigerClaw, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercTigerClaw, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatHonoredBhakti);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatHonoredBhakti, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypNatHonoredJesuit) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatConquistador, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercConquistador, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatHonoredJesuit);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatHonoredJesuit, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypNatHonoredShaolin) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatRattanShield, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercRattanShield, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatHonoredShaolin);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatHonoredShaolin, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypNatHonoredSufi) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatWarElephant, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercWarElephant, cUnitStateAlive) >= 4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatHonoredSufi);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatHonoredSufi, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypNatHonoredUdasi) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatChakram, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercChakram, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatHonoredUdasi);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatHonoredUdasi, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypNatHonoredZen) == cTechStatusObtainable) && 
       (kbUnitCount(cMyID, cUnitTypeypNatSohei, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypNatMercSohei, cUnitStateAlive) >= 10))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypNatHonoredZen);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypNatHonoredZen, getUnit(cUnitTypeypTradingPostAsian), cMilitaryEscrowID, 50);
      return;
   }
}


rule maintainCreeCoureurs
inactive
mininterval 30
{
   static int creePlan = -1;
   static int ambusherPlan = -1;
   int limit = 0;

   // Check build limit, exit if no cree coureurs are available
   limit = kbGetBuildLimit(cMyID, cUnitTypeCoureurCree);
   if (limit < 1)
      return;

   // Create/update maintain plan
   if (creePlan < 0)
   {
      creePlan = createSimpleMaintainPlan(cUnitTypeCoureurCree, limit, true, kbBaseGetMainID(cMyID), 1);
   }
   else
   {
      aiPlanSetVariableInt(creePlan, cTrainPlanNumberToMaintain, 0, limit);
   }
   //Spanish war dog maintain plan.
   if ( (kbGetCiv() == cCivSpanish) && (aiGetFallenExplorerID() < 0) && (kbResourceGet(cResourceFood) > 75) && (kbGetAge() >= cAge2) )
   {
      createSimpleMaintainPlanGivenBuilding(cUnitTypeWarDog, kbGetBuildLimit(cMyID, cUnitTypeWarDog), false, kbBaseGetMainID(cMyID), 5, getUnit(cUnitTypeExplorer));
   }
   // Create/update maintain plan of Pet Cougar from TC after a Tupi techs researched.
   if ( (kbGetAge() >= cAge2) && (kbResourceGet(cResourceFood) > 100) && (kbTechGetStatus(cTechNatAnimalLore) == cTechStatusActive) )
   {
      createSimpleMaintainPlanGivenBuilding(cUnitTypePetCougar, kbGetBuildLimit(cMyID, cUnitTypePetCougar), false, kbBaseGetMainID(cMyID), 5, getUnit(cUnitTypeTownCenter));
   }
   // Create/update maintain plan of Carib Ambusher.
   if ( (ambusherPlan < 0) && (kbTechGetStatus(cTechNatBlowgunnerAmbush) == cTechStatusActive) && (kbResourceGet(cResourceFood) > 65) && (kbResourceGet(cResourceWood) > 35) )
   {
      ambusherPlan = createSimpleMaintainPlanGivenBuilding(cUnitTypeNatBlowgunAmbusher, kbGetBuildLimit(cMyID, cUnitTypeNatBlowgunAmbusher), false, kbBaseGetMainID(cMyID), 5, getUnit(gExplorerUnit));
   }
   else
   {
      aiPlanSetVariableInt(ambusherPlan, cTrainPlanNumberToMaintain, 0, kbGetBuildLimit(cMyID, cUnitTypeNatBlowgunAmbusher));
   }
   //Chinese disciple maintain plan.
   if ( (kbGetCiv() == cCivChinese) && (aiGetFallenExplorerID() < 0) && (kbResourceGet(cResourceFood) > 80) && (kbGetAge() >= cAge2) )
   {
      createSimpleMaintainPlanGivenBuilding(cUnitTypeypMonkDisciple, kbGetBuildLimit(cMyID, cUnitTypeypMonkDisciple), false, kbBaseGetMainID(cMyID), 5, getUnit(cUnitTypeAbstractChineseMonk));
   }
}


rule setRevolutionFlag
inactive
mininterval 1
{
   if (kbUnitCount(cMyID, cUnitTypexpColonialMilitia, cUnitStateAlive) > 0)
   {
      gRevolutionFlag = true;
      xsDisableSelf();
      return;
   }
}


rule revolutionMonitor
inactive
mininterval 30
{
   int revolutionary = -1;
   int revoltPlan = -1;

   //Are we greater age than our most hated enemy?
   int myAge=kbGetAge();
   int hatedPlayerAge=kbGetAgeForPlayer(aiGetMostHatedPlayerID());

   bool emergency = false;
   bool okToRevolt = false;

   // Quit and disable upon reaching Age 5
   if (kbGetAge() == cAge5)
   {
      xsDisableSelf();
      return;
   }

   // Quit and disable if any player (including myself) has already revolted,
   // i.e. if colonial militia, gatling guns or ironclads have been spotted
   for (player=0; <cNumberPlayers)
   {
      if ((kbUnitCount(player, cUnitTypexpColonialMilitia, cUnitStateAlive) > 0) ||
          (kbUnitCount(player, cUnitTypexpGatlingGun, cUnitStateAlive) > 0) ||
          (kbUnitCount(player, cUnitTypexpIronclad, cUnitStateAlive) > 0))
      {
         xsDisableSelf();
         return;
      }
   }

   // Check if revolution is feasible

   // Revolution aimed at delaying certain defeat
   if (checkRevolutionLastStand() == true)
   {
      emergency = true;
      okToRevolt = true;
   }
   // Revolution aimed at defending an overrun main base
   if (checkRevolutionMegaLevy() == true)
   {
      emergency = true;
      okToRevolt = true;
   }
   // Revolution aimed at breaking an opponent's trade monopoly in team games
   if (checkRevolutionMonopolyBreaker() == true)
   {
      emergency = true;
      okToRevolt = true;
   }
   // Revolution aimed at my greater age than our most hated enemy
   /*if ( (myAge > hatedPlayerAge) && (checkRevolutionLastPush() == true) )
   {  
      emergency = true;
      okToRevolt = true;
   }*/
   
   // Revolt if revolution is both feasible and affordable
   if (okToRevolt == true)
   {
      // Choose designated revolutionary based on situation
      // No non-emergency situations are implemeted in this AI version
      revolutionary = chooseRevolutionary(emergency);

      if (kbCanAffordTech(revolutionary, cEmergencyEscrowID) == true)
      {
         if (revoltPlan < 0)
         {
            revoltPlan = createSimpleResearchPlan(revolutionary, getUnit(cUnitTypeTownCenter), cEmergencyEscrowID, 99);
            aiEcho("Revolting with politician "+kbGetTechName(revolutionary));
         }
      }
   }
}


rule autoFeedRevolutionary
inactive
mininterval 60
{
   int playerToFeed = -1;

   // Quit and disable if I have revolted myself
   if (gRevolutionFlag == true)
   {
      xsDisableSelf();
      return;
   }

   // Check for a non-human ally who has revolted (there should be only one)
   for (player=0; <cNumberPlayers)
   {
      if (kbUnitCount(player, cUnitTypexpColonialMilitia, cUnitStateAlive) > 0)
      {
         if ((kbIsPlayerAlly(player) == true) && (kbIsPlayerHuman(player) == false) && (kbHasPlayerLost(player) == false))
         {
            playerToFeed = player;
         }
      }
   }

   if ((playerToFeed >= 0) && (playerToFeed != cMyID))
   {
      gFeedFoodTo = playerToFeed;
      gFeedWoodTo = playerToFeed;
      gFeedGoldTo = playerToFeed;

      if (xsIsRuleEnabled("monitorFeeding") == false)
      {
         xsEnableRule("monitorFeeding");
         monitorFeeding();
      }
   }
}

rule autoFeedLowestAlly
inactive
mininterval 90
{  
   if (getHighestResourceAmount() < 5000)
     return;
   
   int lowestAgeAlly = cAge5;
   int totalScoreAlly = 0;
   int averageScoreAlly = 0;
   int player = 1;

   for (player=0; < cNumberPlayers)
   {
      if (kbIsPlayerAlly(player) == true)
      {
	 totalScoreAlly = totalScoreAlly + aiGetScore(player);

	 if (kbGetAgeForPlayer(player) < lowestAgeAlly)
	  lowestAgeAlly = kbGetAgeForPlayer(player); 
      }
   }
   averageScoreAlly = totalScoreAlly / (getAllyCount() + 1);
   
   
for (player=0; < cNumberPlayers)
   {
      if (player == cMyID)
	continue;      
      if (kbIsPlayerAlly(player) == true)
      {
         if ( (kbGetAge() >= cAge2) && 
              (xsGetTime() > 900000) && 
              (gRevolutionFlag == false) && 
              (kbGetPopCap() - kbGetPop() < 5) && 
              (((kbGetAgeForPlayer(player) == lowestAgeAlly) && 
              (kbGetAgeForPlayer(player) < cAge5)) || 
              (aiGetScore(player) < averageScoreAlly * 0.8)) && 
              (kbHasPlayerLost(player) == false) ) 
	 {
            if (kbResourceGet(cResourceFood) >= 5000)
	      aiTribute(player, cResourceFood, 500);
            if (kbResourceGet(cResourceWood) >= 5000)
	      aiTribute(player, cResourceWood, 500);
            if (kbResourceGet(cResourceGold) >= 5000)
	      aiTribute(player, cResourceGold, 500);
	 }
      }
   }
} 

rule fortUpgradeMonitor
inactive
minInterval 60
{
   int upgradePlanID = -1;

   // Disable rule once both upgrades are available
   if ((kbTechGetStatus(cTechRevetment) == cTechStatusActive) &&
       (kbTechGetStatus(cTechStarFort) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Quit if there is no fort
   if (kbUnitCount(cMyID, cUnitTypeFortFrontier, cUnitStateAlive) < 1)
   {
      return;
   }

   // Get upgrades one at a time as they become available
   if (kbTechGetStatus(cTechRevetment) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechRevetment);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechRevetment, getUnit(cUnitTypeFortFrontier), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechStarFort) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechStarFort);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechStarFort, getUnit(cUnitTypeFortFrontier), cMilitaryEscrowID, 50);
      return;
   }
}


rule agraFortUpgradeMonitor
inactive
minInterval 60
{
   int upgradePlanID = -1;
   int agraFortType = -1;

   // Disable rule once both upgrades are available
   if ((kbTechGetStatus(cTechypFrontierAgra) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypFortifiedAgra) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Check for agra fort
   if (kbUnitCount(cMyID, cUnitTypeypWIAgraFort2, cUnitStateAlive) > 0)
   {
      agraFortType = cUnitTypeypWIAgraFort2;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWIAgraFort3, cUnitStateAlive) > 0)
   {
      agraFortType = cUnitTypeypWIAgraFort3;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWIAgraFort4, cUnitStateAlive) > 0)
   {
      agraFortType = cUnitTypeypWIAgraFort4;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWIAgraFort5, cUnitStateAlive) > 0)
   {
      agraFortType = cUnitTypeypWIAgraFort5;
   }

   // Quit if there is no agra fort
   if (agraFortType < 0)
   {
      return;
   }

   // Get upgrades one at a time as they become available
   if (kbTechGetStatus(cTechypFrontierAgra) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypFrontierAgra);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypFrontierAgra, getUnit(agraFortType), cMilitaryEscrowID, 50);
      return;
   }
   if (kbTechGetStatus(cTechypFortifiedAgra) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypFortifiedAgra);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypFortifiedAgra, getUnit(agraFortType), cMilitaryEscrowID, 50);
      return;
   }
}


rule shrineUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;
   int limit = 0;

   // Disable rule once the upgrade is available
   if (kbTechGetStatus(cTechypShrineFortressUpgrade) == cTechStatusActive) 
   {
      xsDisableSelf();
      return;
   }

   // Quit if there are not at least 16 shrines, or a toshogu shrine and at least 10 normal ones
   if ((kbUnitCount(cMyID, cUnitTypeypWJToshoguShrine2, cUnitStateAlive) > 0) ||
       (kbUnitCount(cMyID, cUnitTypeypWJToshoguShrine3, cUnitStateAlive) > 0) ||
       (kbUnitCount(cMyID, cUnitTypeypWJToshoguShrine4, cUnitStateAlive) > 0) ||
       (kbUnitCount(cMyID, cUnitTypeypWJToshoguShrine5, cUnitStateAlive) > 0))
   {
      limit = 10;
   }
   else
   {
      limit = 16;
   }
   if (kbUnitCount(cMyID, cUnitTypeypShrineJapanese, cUnitStateAlive) < limit)
   {
      return;
   }

   // Get upgrade
   if (kbTechGetStatus(cTechypShrineFortressUpgrade) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypShrineFortressUpgrade);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypShrineFortressUpgrade, getUnit(cUnitTypeypShrineJapanese), cEconomyEscrowID, 50);
      return;
   }
}


rule dojoUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Disable rule once the upgrade is available
   if (kbTechGetStatus(cTechypDojoUpgrade1) == cTechStatusActive) 
   {
      xsDisableSelf();
      return;
   }

   // Quit if there is no dojo
   if (kbUnitCount(cMyID, cUnitTypeypDojo, cUnitStateAlive) < 1)
   {
      return;
   }

   // Get upgrade
   if (kbTechGetStatus(cTechypDojoUpgrade1) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypDojoUpgrade1);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypDojoUpgrade1, getUnit(cUnitTypeypDojo), cMilitaryEscrowID, 50);
      return;
   }
}


rule villageUpgradeMonitor
inactive
group tcComplete
minInterval 15
{
   int upgradePlanID = -1;

   // Disable rule for anybody but Chinese
   if ((cMyCiv != cCivChinese) && (cMyCiv != cCivSPCChinese))
   {
      xsDisableSelf();
      return;
   }

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechypVillagePopCapIncrease) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypVillagePopCapIncrease2) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypVillagePopCapIncrease3) == cTechStatusActive) &&
       (kbTechGetStatus(cTechypVillagePopCapIncrease4) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }

   // Quit if there is no village around
   if (kbUnitCount(cMyID, cUnitTypeypVillage, cUnitStateAlive) < 1)
   {
      return;
   }

   // Get upgrades one at a time upon advancing in age
   if ((kbTechGetStatus(cTechypVillagePopCapIncrease) == cTechStatusObtainable) && (kbGetAge() >= cAge2))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypVillagePopCapIncrease);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypVillagePopCapIncrease, getUnit(cUnitTypeypVillage), cEconomyEscrowID, 85);
      return;
   }
   if ((kbTechGetStatus(cTechypVillagePopCapIncrease2) == cTechStatusObtainable) && (kbGetAge() >= cAge3))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypVillagePopCapIncrease2);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypVillagePopCapIncrease2, getUnit(cUnitTypeypVillage), cEconomyEscrowID, 85);
      return;
   }
   if ((kbTechGetStatus(cTechypVillagePopCapIncrease3) == cTechStatusObtainable) && (kbGetAge() >= cAge4))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypVillagePopCapIncrease3);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypVillagePopCapIncrease3, getUnit(cUnitTypeypVillage), cEconomyEscrowID, 50);
      return;
   }
   if ((kbTechGetStatus(cTechypVillagePopCapIncrease4) == cTechStatusObtainable) && (kbGetAge() >= cAge5))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypVillagePopCapIncrease4);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypVillagePopCapIncrease4, getUnit(cUnitTypeypVillage), cEconomyEscrowID, 50);
      return;
   }
}


rule factoryEconUpgradeMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Quit if there is no factory around
   if (kbUnitCount(cMyID, cUnitTypeFactory, cUnitStateAlive) < 1)
   {
      return;
   }

   // Disable rule once all upgrades are available
   if ((kbTechGetStatus(cTechFactoryCannery) == cTechStatusActive) &&
       (kbTechGetStatus(cTechFactoryWaterPower) == cTechStatusActive) &&
       (kbTechGetStatus(cTechFactorySteamPower) == cTechStatusActive) &&
       (kbTechGetStatus(cTechFactoryMassProduction) == cTechStatusActive))
   {
      xsDisableSelf();
      return;
   }
   
   // Get upgrades as they become useful
   if (kbTechGetStatus(cTechFactoryCannery) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechFactoryCannery);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechFactoryCannery, getUnit(cUnitTypeFactory), cEconomyEscrowID, 85);
      return;
   }
   if (kbTechGetStatus(cTechFactoryWaterPower) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechFactoryWaterPower);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechFactoryWaterPower, getUnit(cUnitTypeFactory), cEconomyEscrowID, 85);
      return;
   }
   if ((kbTechGetStatus(cTechFactorySteamPower) == cTechStatusObtainable) && (kbUnitCount(cMyID, cUnitTypeFactory, cUnitStateAlive) > 1))
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechFactorySteamPower);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechFactorySteamPower, getUnit(cUnitTypeFactory), cEconomyEscrowID, 85);
      return;
   }
   if (kbTechGetStatus(cTechFactoryMassProduction) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechFactoryMassProduction);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechFactoryMassProduction, getUnit(cUnitTypeFactory), cMilitaryEscrowID, 85);
      return;
   }
}

rule techImperialBombardMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Quit if there is no factory around
   if (kbUnitCount(cMyID, cUnitTypeFactory, cUnitStateAlive) < 1)
   {
      return;
   }

   // Disable rule once upgrades are available
   if (kbTechGetStatus(cTechImperialBombard) == cTechStatusActive)
   {
      xsDisableSelf();
      return;
   }

   if (kbTechGetStatus(cTechImperialBombard) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialBombard);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialBombard, getUnit(cUnitTypeFactory), cMilitaryEscrowID, 50);
      return;
   }
}

rule techImperialCannonMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Quit if there is no factory around
   if (kbUnitCount(cMyID, cUnitTypeFactory, cUnitStateAlive) < 1)
   {
      return;
   }

   // Disable rule once upgrades are available
   if (kbTechGetStatus(cTechImperialCannon) == cTechStatusActive)
   {
      xsDisableSelf();
      return;
   }

   if (kbTechGetStatus(cTechImperialCannon) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialCannon);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialCannon, getUnit(cUnitTypeFactory), cMilitaryEscrowID, 50);
      return;
   }
}

rule techImperialRocketMonitor
inactive
minInterval 30
{
   int upgradePlanID = -1;

   // Quit if there is no factory around
   if (kbUnitCount(cMyID, cUnitTypeFactory, cUnitStateAlive) < 1)
   {
      return;
   }

   // Disable rule once upgrades are available
   if (kbTechGetStatus(cTechImperialRocket) == cTechStatusActive)
   {
      xsDisableSelf();
      return;
   }

   if (kbTechGetStatus(cTechImperialRocket) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechImperialRocket);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechImperialRocket, getUnit(cUnitTypeFactory), cMilitaryEscrowID, 50);
      return;
   }
}

rule sheepBritishMonitor
inactive
minInterval 30
{

   static int sheepBritishPlan = -1;
   int numSheep = 0;

   // Build a livestockpen if there is none
   if (kbUnitCount(cMyID, cUnitTypeLivestockPen, cUnitStateAlive) < 1)
   {
      createSimpleBuildPlan(cUnitTypeLivestockPen, 1, 50, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
      return;
   }

   // Check number of sheep as necessary to bring total number to 20
   numSheep = 20;

   // Create/update maintain plan
   if (sheepBritishPlan < 0)
   {
      sheepBritishPlan = createSimpleMaintainPlan(cUnitTypeSheep, numSheep, true, kbBaseGetMainID(cMyID), 1);
   }
   else
   {
      aiPlanSetVariableInt(sheepBritishPlan, cTrainPlanNumberToMaintain, 0, numSheep);
   }

   int upgradePlanID = -1;

   // Get selective breeding upgrade
   if (kbTechGetStatus(cTechSelectiveBreeding) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechSelectiveBreeding);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechSelectiveBreeding, getUnit(cUnitTypeLivestockPen), cMilitaryEscrowID, 50);
      return;
   }
}


rule sheepIroquoisMonitor
inactive
minInterval 30
{

   static int sheepIroquoisPlan = -1;
   int numSheep = 0;

   // Build a farm if there is none
   if (kbUnitCount(cMyID, cUnitTypeFarm, cUnitStateAlive) < 1)
   {
      createSimpleBuildPlan(cUnitTypeFarm, 1, 50, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
      return;
   }

   // Check number of sheep as necessary to bring total number to 20
   numSheep = 20;

   // Create/update maintain plan
   if (sheepIroquoisPlan < 0)
   {
      sheepIroquoisPlan = createSimpleMaintainPlan(cUnitTypeSheep, numSheep, true, kbBaseGetMainID(cMyID), 1);
   }
   else
   {
      aiPlanSetVariableInt(sheepIroquoisPlan, cTrainPlanNumberToMaintain, 0, numSheep);
   }

   int upgradePlanID = -1;

   // Get selective breeding upgrade
   if (kbTechGetStatus(cTechSelectiveBreeding) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechSelectiveBreeding);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechSelectiveBreeding, getUnit(cUnitTypeFarm), cMilitaryEscrowID, 50);
      return;
   }
}



rule goatMonitor
inactive
minInterval 30
{

   static int goatPlan = -1;
   int numHerdables = 0;
   int numGoats = 0;

   // Build a village if there is none
   if (kbUnitCount(cMyID, cUnitTypeypVillage, cUnitStateAlive) < 1)
   {
      createSimpleBuildPlan(cUnitTypeypVillage, 1, 50, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
      return;
   }

   // Check number of captured herdables, add goats as necessary to bring total number to 20
   numHerdables = kbUnitCount(cMyID, cUnitTypeHerdable, cUnitStateAlive) - kbUnitCount(cMyID, cUnitTypeypGoat, cUnitStateAlive);
   if (numHerdables < 0)
      numHerdables = 0;
   numGoats = 20 - numHerdables;
   if (numGoats > 0)
   {
      // Create/update maintain plan
      if (goatPlan < 0)
      {
         goatPlan = createSimpleMaintainPlan(cUnitTypeypGoat, numGoats, true, kbBaseGetMainID(cMyID), 1);
      }
      else
      {
         aiPlanSetVariableInt(goatPlan, cTrainPlanNumberToMaintain, 0, numGoats);
      }
   }

   int upgradePlanID = -1;

   // Get selective breeding upgrade
   if (kbTechGetStatus(cTechSelectiveBreeding) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechSelectiveBreeding);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechSelectiveBreeding, getUnit(cUnitTypeypVillage), cMilitaryEscrowID, 50);
      return;
   }
}



rule sacredFieldMonitor
inactive
minInterval 30
{

   static int cowPlan = -1;
   int numCows = 0;

   // Build a sacred field if there is none
   if (kbUnitCount(cMyID, cUnitTypeypSacredField, cUnitStateAlive) < 1)
   {
      createSimpleBuildPlan(cUnitTypeypSacredField, 1, 50, true, cEconomyEscrowID, kbBaseGetMainID(cMyID), 1);
      return;
   }

   // Check number of sacred cows as necessary to bring total number to 20
   numCows = 20;
   if (numCows > 0)
   {
      // Create/update maintain plan
      if (cowPlan < 0)
      {  cowPlan = createSimpleMaintainPlan(cUnitTypeypSacredCow, numCows, true, kbBaseGetMainID(cMyID), 1);   }
      else
      {  aiPlanSetVariableInt(cowPlan, cTrainPlanNumberToMaintain, 0, numCows);  }
   }

   int upgradePlanID = -1;

   // Get XP upgrade
   if (kbTechGetStatus(cTechypLivestockHoliness) == cTechStatusObtainable)
   {
      upgradePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypLivestockHoliness);
      if (upgradePlanID >= 0)
         aiPlanDestroy(upgradePlanID);
      createSimpleResearchPlan(cTechypLivestockHoliness, getUnit(cUnitTypeypSacredField), cMilitaryEscrowID, 50);
      return;
   }
}


//Beautiful Wagon Monitor
int arrBuilder=-1;
int arrBuilds=-1;
int nBB=0; 

void initWagon(){
arrBuilder=xsArrayCreateInt(23,0,"Builder");
arrBuilds=xsArrayCreateInt(23,0,"Builder Building");
nBB=23;
xsArraySetInt(arrBuilder,0,cUnitTypeBankWagon);
xsArraySetInt(arrBuilds,0,cUnitTypeBank);

xsArraySetInt(arrBuilder,1,cUnitTypeCoveredWagon);
xsArraySetInt(arrBuilds,1,cUnitTypeTownCenter);

xsArraySetInt(arrBuilder,2,cUnitTypeFactoryWagon);
xsArraySetInt(arrBuilds,2,cUnitTypeFactory);

xsArraySetInt(arrBuilder,3,cUnitTypeOutpostWagon);
xsArraySetInt(arrBuilds,3,cUnitTypeOutpost);

xsArraySetInt(arrBuilder,4,cUnitTypeypArsenalWagon);
xsArraySetInt(arrBuilds,4,cUnitTypeypArsenalAsian);

xsArraySetInt(arrBuilder,5,cUnitTypeypBankWagon);
xsArraySetInt(arrBuilds,5,cUnitTypeypBankAsian);

xsArraySetInt(arrBuilder,6,cUnitTypeYPBerryWagon1);
xsArraySetInt(arrBuilds,6,cUnitTypeypBerryBuilding);

xsArraySetInt(arrBuilder,7,cUnitTypeypBlockhouseWagon);
xsArraySetInt(arrBuilds,7,cUnitTypeBlockhouse);

xsArraySetInt(arrBuilder,8,cUnitTypeYPCastleWagon);
xsArraySetInt(arrBuilds,8,cUnitTypeypCastle);

xsArraySetInt(arrBuilder,9,cUnitTypeypChurchWagon);
xsArraySetInt(arrBuilds,9,cUnitTypeypChurch);

xsArraySetInt(arrBuilder,10,cUnitTypeYPDockWagon);
xsArraySetInt(arrBuilds,10,cUnitTypeYPDockAsian);

xsArraySetInt(arrBuilder,11,cUnitTypeYPDojoWagon);
xsArraySetInt(arrBuilds,11,cUnitTypeypDojo);

xsArraySetInt(arrBuilder,12,cUnitTypeYPGroveWagon);
xsArraySetInt(arrBuilds,12,cUnitTypeypGroveBuilding);

xsArraySetInt(arrBuilder,13,cUnitTypeypMarketWagon);
xsArraySetInt(arrBuilds,13,cUnitTypeypTradeMarketAsian);

xsArraySetInt(arrBuilder,14,cUnitTypeYPMonasteryWagon);
xsArraySetInt(arrBuilds,14,cUnitTypeypMonastery);

xsArraySetInt(arrBuilder,15,cUnitTypeYPRicePaddyWagon);
xsArraySetInt(arrBuilds,15,cUnitTypeypRicePaddy);

xsArraySetInt(arrBuilder,16,cUnitTypeYPSacredFieldWagon);
xsArraySetInt(arrBuilds,16,cUnitTypeypSacredField);

xsArraySetInt(arrBuilder,17,cUnitTypeypShrineWagon);
xsArraySetInt(arrBuilds,17,cUnitTypeypShrineJapanese);

xsArraySetInt(arrBuilder,18,cUnitTypeypTradingPostWagon);
xsArraySetInt(arrBuilds,18,cUnitTypeTradingPost);

xsArraySetInt(arrBuilder,19,cUnitTypeYPVillageWagon);
xsArraySetInt(arrBuilds,19,cUnitTypeypVillage);

xsArraySetInt(arrBuilder,20,cUnitTypeFarmTravois);
xsArraySetInt(arrBuilds,20,cUnitTypeFarm);

xsArraySetInt(arrBuilder,21,cUnitTypeWarHutTravois);
xsArraySetInt(arrBuilds,21,cUnitTypeWarHut);

xsArraySetInt(arrBuilder,22,cUnitTypeNoblesHutTravois);
xsArraySetInt(arrBuilds,22,cUnitTypeNoblesHut);
}

rule wagonMonitor
active
group tcComplete
minInterval 10
{
	if (nBB==0) initWagon();
	int planID = -1;
	int i=0;
	int tmpID=-1;
	int tmpBuilder=-1;
	int tmpBuilds=-1;
	int builder=-1;
	int debug=0;
		
	string tmp="";
	for(i=0;<nBB){
		tmpBuilder=xsArrayGetInt(arrBuilder,i);
		if (kbUnitCount(cMyID, tmpBuilder , cUnitStateAlive) > 0){
			tmpID=getUnit(tmpBuilder,cMyID,cUnitStateAlive);
			if (aiPlanGetID("Wagon Build Plan "+tmpID) < 0){
				tmpBuilds=xsArrayGetInt(arrBuilds,i);
				
				planID=aiPlanCreate("Wagon Build Plan "+tmpID,cPlanBuild);				
				aiPlanSetVariableInt(planID, cBuildPlanBuildingTypeID, 0, tmpBuilds);
				aiPlanSetVariableFloat(planID, cBuildPlanBuildingBufferSpace, 0, 4.0);
				aiPlanSetDesiredPriority(planID, 99);
				aiPlanSetEconomy(planID, true);
				aiPlanSetMilitary(planID, false);
				aiPlanSetEscrowID(planID, cEconomyEscrowID);
				
				aiPlanAddUnitType(planID,tmpBuilder,1,1,1);
				aiPlanAddUnit(planID, tmpID);
				
				aiPlanSetBaseID(planID, kbBaseGetMainID(cMyID));
				aiPlanSetActive(planID);
				
				debug=aiPlanGetNumberUnits(planID,tmpBuilder);
				tmp=tmp+tmpBuilder+":"+kbGetProtoUnitName(tmpBuilder)+"->"+kbGetProtoUnitName(tmpBuilds)+debug+"|";
			} 
		}
	}  
	
	if (i!=0) echoMessage(tmp);
	
}


rule brigadeMonitor
inactive
minInterval 90
{
   // Quit if there is no consulate
   if (kbUnitCount(cMyID, cUnitTypeypConsulate, cUnitStateAlive) < 1)
   {
      return;
   }

   // Research brigade technologies
   // Unavailable ones are simply ignored
   int brigadePlanID = -1;

   // British brigade
   if (kbTechGetStatus(cTechypConsulateBritishBrigade) == cTechStatusObtainable)
   {
      brigadePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateBritishBrigade);
      if (brigadePlanID >= 0)
         aiPlanDestroy(brigadePlanID);
      createSimpleResearchPlan(cTechypConsulateBritishBrigade, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }

   // Dutch brigade
   if (kbTechGetStatus(cTechypConsulateDutchBrigade) == cTechStatusObtainable)
   {
      brigadePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateDutchBrigade);
      if (brigadePlanID >= 0)
         aiPlanDestroy(brigadePlanID);
      createSimpleResearchPlan(cTechypConsulateDutchBrigade, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }

   // French brigade
   if (kbTechGetStatus(cTechypConsulateFrenchBrigade) == cTechStatusObtainable)
   {
      brigadePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateFrenchBrigade);
      if (brigadePlanID >= 0)
         aiPlanDestroy(brigadePlanID);
      createSimpleResearchPlan(cTechypConsulateFrenchBrigade, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }

   // German brigade
   if (kbTechGetStatus(cTechypConsulateGermansBrigade) == cTechStatusObtainable)
   {
      brigadePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateGermansBrigade);
      if (brigadePlanID >= 0)
         aiPlanDestroy(brigadePlanID);
      createSimpleResearchPlan(cTechypConsulateGermansBrigade, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }

   // Ottoman brigade
   if (kbTechGetStatus(cTechypConsulateOttomansBrigade) == cTechStatusObtainable)
   {
      brigadePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateOttomansBrigade);
      if (brigadePlanID >= 0)
         aiPlanDestroy(brigadePlanID);
      createSimpleResearchPlan(cTechypConsulateOttomansBrigade, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }

   // Portuguese brigade
   if (kbTechGetStatus(cTechypConsulatePortugueseBrigade) == cTechStatusObtainable)
   {
      brigadePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulatePortugueseBrigade);
      if (brigadePlanID >= 0)
         aiPlanDestroy(brigadePlanID);
      createSimpleResearchPlan(cTechypConsulatePortugueseBrigade, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }

   // Russian brigade
   if (kbTechGetStatus(cTechypConsulateRussianBrigade) == cTechStatusObtainable)
   {
      brigadePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateRussianBrigade);
      if (brigadePlanID >= 0)
         aiPlanDestroy(brigadePlanID);
      createSimpleResearchPlan(cTechypConsulateRussianBrigade, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }

   // Spanish brigade
   if (kbTechGetStatus(cTechypConsulateSpanishBrigade) == cTechStatusObtainable)
   {
      brigadePlanID = aiPlanGetIDByTypeAndVariableType(cPlanResearch, cResearchPlanTechID, cTechypConsulateSpanishBrigade);
      if (brigadePlanID >= 0)
         aiPlanDestroy(brigadePlanID);
      createSimpleResearchPlan(cTechypConsulateSpanishBrigade, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 50);
      return;
   }
}


rule consulateLevy
inactive
minInterval 120
{
   // Check to see if town is being overrun. If so, generate a plan
   // to research Ottoman levy at the consulate. 

   int levyPlan = -1;
   vector mainBaseVec = cInvalidVector;
   
   mainBaseVec =  kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID));
   int enemyCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationEnemyNotGaia, cUnitStateAlive, mainBaseVec, 40.0);
   int allyCount = getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationAlly, cUnitStateAlive, mainBaseVec, 40.0);

   if (enemyCount >= (allyCount+6)) // We're behind by 6 or more
   {
      aiEcho("***** Starting consulate levy plan, there are "+enemyCount+" enemy units in my base against "+allyCount+" friendlies.");
      if (kbTechGetStatus(cTechypConsulateOttomansSettlerCombat) == cTechStatusObtainable)
         levyPlan = createSimpleResearchPlan(cTechypConsulateOttomansSettlerCombat, getUnit(cUnitTypeypConsulate), cMilitaryEscrowID, 99); // Extreme priority
   }
}


rule porcelainTowerTacticMonitor
inactive
group tcComplete
mininterval 60
{
   // Disable rule for anybody but Chinese
   if (kbGetCiv() != cCivChinese)
   {
      xsDisableSelf();
      return;
   }

   int porcelainTowerType = -1;
   static int resourceType = -1;

   // Check for porcelain tower
   if (kbUnitCount(cMyID, cUnitTypeypWCPorcelainTower2, cUnitStateAlive) > 0)
   {
      porcelainTowerType = cUnitTypeypWCPorcelainTower2;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWCPorcelainTower3, cUnitStateAlive) > 0)
   {
      porcelainTowerType = cUnitTypeypWCPorcelainTower3;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWCPorcelainTower4, cUnitStateAlive) > 0)
   {
      porcelainTowerType = cUnitTypeypWCPorcelainTower4;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWCPorcelainTower5, cUnitStateAlive) > 0)
   {
      porcelainTowerType = cUnitTypeypWCPorcelainTower5;
   }

   if (porcelainTowerType > 0)
   {
      int porcelainTowerQueryID = -1;
      porcelainTowerQueryID = kbUnitQueryCreate("porcelainTowerQueryID");
      kbUnitQuerySetIgnoreKnockedOutUnits(porcelainTowerQueryID, true);
      if (porcelainTowerQueryID != -1)
      {
         kbUnitQuerySetPlayerRelation(porcelainTowerQueryID, -1);
         kbUnitQuerySetPlayerID(porcelainTowerQueryID, cMyID);
         kbUnitQuerySetUnitType(porcelainTowerQueryID, porcelainTowerType);
         kbUnitQuerySetState(porcelainTowerQueryID, cUnitStateAlive);
         kbUnitQueryResetResults(porcelainTowerQueryID);
         int numberFound = kbUnitQueryExecute(porcelainTowerQueryID);

         // Cycle resource generation through all three resources
         // (resources types are 0 - food, 1 - wood, 2 - coin)
         if (numberFound > 0)
         {
            resourceType = resourceType + 1;
            if (resourceType > 2)
               resourceType = 0;
            switch (resourceType)
            {
               case 0:
               {
                  aiUnitSetTactic(kbUnitQueryGetResult(porcelainTowerQueryID, 0), cTacticWonderFood);
                  break;
               }
               case 1:
               {
                  aiUnitSetTactic(kbUnitQueryGetResult(porcelainTowerQueryID, 0), cTacticWonderWood);
                  break;
               }
               case 2:
               {
                  aiUnitSetTactic(kbUnitQueryGetResult(porcelainTowerQueryID, 0), cTacticWonderCoin);
                  break;
               }
               default: // catch-all, should never happen
               {
                  aiUnitSetTactic(kbUnitQueryGetResult(porcelainTowerQueryID, 0), cTacticWonderRainbow);
                  break;
               }
            }
         }
      }
   }
}


rule summerPalaceTacticMonitor
inactive
mininterval 10
{
   int summerPalaceType = -1;
   int randomizer = -1;

   // Check for summer palace
   if (kbUnitCount(cMyID, cUnitTypeypWCSummerPalace2, cUnitStateAlive) > 0)
   {
      summerPalaceType = cUnitTypeypWCSummerPalace2;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWCSummerPalace3, cUnitStateAlive) > 0)
   {
      summerPalaceType = cUnitTypeypWCSummerPalace3;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWCSummerPalace4, cUnitStateAlive) > 0)
   {
      summerPalaceType = cUnitTypeypWCSummerPalace4;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWCSummerPalace5, cUnitStateAlive) > 0)
   {
      summerPalaceType = cUnitTypeypWCSummerPalace5;
   }

   if (summerPalaceType > 0)
   {
      int summerPalaceQueryID = -1;
      summerPalaceQueryID = kbUnitQueryCreate("summerPalaceQueryID");
      kbUnitQuerySetIgnoreKnockedOutUnits(summerPalaceQueryID, true);
      if (summerPalaceQueryID != -1)
      {
         kbUnitQuerySetPlayerRelation(summerPalaceQueryID, -1);
         kbUnitQuerySetPlayerID(summerPalaceQueryID, cMyID);
         kbUnitQuerySetUnitType(summerPalaceQueryID, summerPalaceType);
         kbUnitQuerySetState(summerPalaceQueryID, cUnitStateAlive);
         kbUnitQueryResetResults(summerPalaceQueryID);
         int numberFound = kbUnitQueryExecute(summerPalaceQueryID);

         // In Age 2 and above, spawn ming army
         if ((numberFound > 0) && (kbGetAge() >= cAge2))
         {
            aiUnitSetTactic(kbUnitQueryGetResult(summerPalaceQueryID, 0), cTacticMingArmy);
            xsDisableSelf();
         }
      }
   }
}


rule goldenPavillionTacticMonitor
inactive
group tcComplete
mininterval 60
{
   // Disable rule for anybody but Japanese
   if (kbGetCiv() != cCivJapanese)
   {
      xsDisableSelf();
      return;
   }

   int goldenPavillionType = -1;

   // Check for golden pavillion
   if (kbUnitCount(cMyID, cUnitTypeypWJGoldenPavillion2, cUnitStateAlive) > 0)
   {
      goldenPavillionType = cUnitTypeypWJGoldenPavillion2;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWJGoldenPavillion3, cUnitStateAlive) > 0)
   {
      goldenPavillionType = cUnitTypeypWJGoldenPavillion3;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWJGoldenPavillion4, cUnitStateAlive) > 0)
   {
      goldenPavillionType = cUnitTypeypWJGoldenPavillion4;
   }
   else if (kbUnitCount(cMyID, cUnitTypeypWJGoldenPavillion5, cUnitStateAlive) > 0)
   {
      goldenPavillionType = cUnitTypeypWJGoldenPavillion5;
   }

   if (goldenPavillionType > 0)
   {
      int goldenPavillionQueryID = -1;
      goldenPavillionQueryID = kbUnitQueryCreate("goldenPavillionQueryID");
      kbUnitQuerySetIgnoreKnockedOutUnits(goldenPavillionQueryID, true);
      if (goldenPavillionQueryID != -1)
      {
         kbUnitQuerySetPlayerRelation(goldenPavillionQueryID, -1);
         kbUnitQuerySetPlayerID(goldenPavillionQueryID, cMyID);
         kbUnitQuerySetUnitType(goldenPavillionQueryID, goldenPavillionType);
         kbUnitQuerySetState(goldenPavillionQueryID, cUnitStateAlive);
         kbUnitQueryResetResults(goldenPavillionQueryID);
         int numberFound = kbUnitQueryExecute(goldenPavillionQueryID);

         // Activate land military hitpoint bonus and disable rule
         if (numberFound > 0)
         {
            aiUnitSetTactic(kbUnitQueryGetResult(goldenPavillionQueryID, 0), cTacticUnitHitpoints);
            xsDisableSelf();
         }
      }
   }
}


rule dojoTacticMonitor
inactive
minInterval 10
{
   int randomizer = -1;
   static int dojoTactic1 = -1;
   static int dojoTactic2 = -1;

   // Randomize unit generation option for first dojo
   if (dojoTactic1 < 0)
   {
      randomizer = aiRandInt(2);
      switch (randomizer)
      {
         case 0:
         {
            dojoTactic1 = cTacticSamurai;
            break;
         }
         default:
         {
            dojoTactic1 = cTacticYabusame;
            break;
         }
      }
   }

   // Randomize unit generation option for second dojo
   if (dojoTactic2 < 0)
   {
      randomizer = aiRandInt(2);
      switch (randomizer)
      {
         case 0:
         {
            dojoTactic2 = cTacticSamurai;
            break;
         }
         default:
         {
            dojoTactic2 = cTacticYabusame;
            break;
         }
      }
   }

   // Define a query to get all matching units
   int dojoQueryID=-1;
   dojoQueryID=kbUnitQueryCreate("dojoGetUnitQuery");
   kbUnitQuerySetIgnoreKnockedOutUnits(dojoQueryID, true);
   if (dojoQueryID != -1)
   {
      kbUnitQuerySetPlayerRelation(dojoQueryID, -1);
      kbUnitQuerySetPlayerID(dojoQueryID, cMyID);
      kbUnitQuerySetUnitType(dojoQueryID, cUnitTypeypDojo);
      kbUnitQuerySetState(dojoQueryID, cUnitStateAlive);
      kbUnitQueryResetResults(dojoQueryID);
      int numberFound=kbUnitQueryExecute(dojoQueryID);
      if (numberFound == 1)
      {
         aiUnitSetTactic(kbUnitQueryGetResult(dojoQueryID, 0), dojoTactic1);
      }
      else if (numberFound == 2)
      {
         aiUnitSetTactic(kbUnitQueryGetResult(dojoQueryID, 0), dojoTactic1);
         aiUnitSetTactic(kbUnitQueryGetResult(dojoQueryID, 1), dojoTactic2);
         xsDisableSelf();
      }
   }
}


rule factoryTacticMonitor
inactive
minInterval 10
{
   //gotta get all of the factories
   static int factoryQueryID=-1;
   
   //If we don't have the query yet, create one.
   if (factoryQueryID < 0)
   {
      factoryQueryID=kbUnitQueryCreate("factoryGetUnitQuery");
      kbUnitQuerySetIgnoreKnockedOutUnits(factoryQueryID, true);
   }

   //Define a query to get all matching units
   if (factoryQueryID != -1)
   {
      kbUnitQuerySetPlayerRelation(factoryQueryID, -1);
      kbUnitQuerySetPlayerID(factoryQueryID, cMyID);
      kbUnitQuerySetUnitType(factoryQueryID, cUnitTypeFactory);
      kbUnitQuerySetState(factoryQueryID, cUnitStateAlive);
   }
   else
      return;

   kbUnitQueryResetResults(factoryQueryID);
   int numberFound=kbUnitQueryExecute(factoryQueryID);
   int index = 0;   

   float percentOnFood = aiGetResourceGathererPercentage(cResourceFood, cRGPActual);
   float percentOnWood = aiGetResourceGathererPercentage(cResourceWood, cRGPActual);
   float percentOnGold = aiGetResourceGathererPercentage(cResourceGold, cRGPActual);
   float totalResources = kbResourceGet(cResourceFood) + kbResourceGet(cResourceWood) + kbResourceGet(cResourceGold);

   //Get our current resources.
   float currentFood=kbResourceGet(cResourceFood);
   float currentWood=kbResourceGet(cResourceWood);
   float currentGold=kbResourceGet(cResourceGold);

   // Select a tactic
   if (gRevolutionFlag == true)
   {
      for (index = 0; < numberFound) 
      {
        // change to Cannon
        aiUnitSetTactic(kbUnitQueryGetResult(factoryQueryID, index), cTacticCannon);
      }
   }
   else
   {
      if (kbResourceGet(cResourceFood) < 7000 )         
      {
		for (index = 0; < numberFound) 
		{
			//change to Food
			aiUnitSetTactic(kbUnitQueryGetResult(factoryQueryID, index), cTacticFood);
		}
      }
   

      if (kbResourceGet(cResourceWood) < 2500 )  
      {
		for (index = 0; < numberFound) 
		{
			//change to Wood
			aiUnitSetTactic(kbUnitQueryGetResult(factoryQueryID, index), cTacticWood);
		} 
      }

      if (kbResourceGet(cResourceGold) < 7000)  
      {
		for (index = 0; < numberFound) 
		{
			//change to Gold
			aiUnitSetTactic(kbUnitQueryGetResult(factoryQueryID, index), cTacticNormal);
		}
      }
      if (kbResourceGet(cResourceFood) < 1000 )         
      {
		for (index = 0; < numberFound) 
		{
			//change to Food
			aiUnitSetTactic(kbUnitQueryGetResult(factoryQueryID, index), cTacticFood);
		}
      }
   

      if (kbResourceGet(cResourceWood) < 500 )  
      {
		for (index = 0; < numberFound) 
		{
			//change to Wood
			aiUnitSetTactic(kbUnitQueryGetResult(factoryQueryID, index), cTacticWood);
		} 
      }

      if (kbResourceGet(cResourceGold) < 1000)  
      {
		for (index = 0; < numberFound) 
		{
			//change to Gold
			aiUnitSetTactic(kbUnitQueryGetResult(factoryQueryID, index), cTacticNormal);
		}
      }
   }
}


rule mansabdarMonitor
inactive
minInterval 10
{
   static int mansabdarGurkhaPlan = -1;
   static int mansabdarSepoyPlan = -1;
   static int mansabdarZamburakPlan = -1;
   static int mansabdarSiegeElephantPlan = -1;
   static int mansabdarFlailiphantPlan = -1;

   int numGurkhas = -1;
   int numSepoys = -1;
   int numZamburaks = -1;
   int numSiegeElephants = -1;
   int numFlailiphants = -1;

   // Check number of gurkhas, maintain mansabdar gurkha as long as there are at least 10
   numGurkhas = kbUnitCount(cMyID, cUnitTypeypNatMercGurkha, cUnitStateAlive);
   if (numGurkhas >= 10)
   {
      // Create/update maintain plan
      if (mansabdarGurkhaPlan < 0)
      {
         mansabdarGurkhaPlan = createSimpleMaintainPlan(cUnitTypeypNatMercGurkhaJemadar, 1, false, kbBaseGetMainID(cMyID), 1);
      }
      else
      {
         aiPlanSetVariableInt(mansabdarGurkhaPlan , cTrainPlanNumberToMaintain, 0, 1);
      }
   }
   else
   {
      // Update maintain plan, provided it exists
      if (mansabdarGurkhaPlan >= 0)
      {
         aiPlanSetVariableInt(mansabdarGurkhaPlan , cTrainPlanNumberToMaintain, 0, 0);
      }
   }
   // Check number of sepoys, maintain mansabdar sepoy as long as there are at least 10
   numSepoys = kbUnitCount(cMyID, cUnitTypeypSepoy, cUnitStateAlive);
   if (numSepoys >= 10)
   {
      // Create/update maintain plan
      if (mansabdarSepoyPlan < 0)
      {
         mansabdarSepoyPlan = createSimpleMaintainPlan(cUnitTypeypSepoyMansabdar, 1, false, kbBaseGetMainID(cMyID), 1);
      }
      else
      {
         aiPlanSetVariableInt(mansabdarSepoyPlan , cTrainPlanNumberToMaintain, 0, 1);
      }
   }
   else
   {
      // Update maintain plan, provided it exists
      if (mansabdarSepoyPlan >= 0)
      {
         aiPlanSetVariableInt(mansabdarSepoyPlan , cTrainPlanNumberToMaintain, 0, 0);
      }
   }
   // Check number of zamburaks, maintain mansabdar zamburak as long as there are at least 10
   numZamburaks = kbUnitCount(cMyID, cUnitTypeypZamburak, cUnitStateAlive);
   if (numZamburaks >= 10)
   {
      // Create/update maintain plan
      if (mansabdarZamburakPlan < 0)
      {
         mansabdarZamburakPlan = createSimpleMaintainPlan(cUnitTypeypZamburakMansabdar, 1, false, kbBaseGetMainID(cMyID), 1);
      }
      else
      {
         aiPlanSetVariableInt(mansabdarZamburakPlan , cTrainPlanNumberToMaintain, 0, 1);
      }
   }
   else
   {
      // Update maintain plan, provided it exists
      if (mansabdarZamburakPlan >= 0)
      {
         aiPlanSetVariableInt(mansabdarZamburakPlan , cTrainPlanNumberToMaintain, 0, 0);
      }
   }
   // Check number of siegeelephants, maintain mansabdar siegeelephant as long as there are at least 2
   numSiegeElephants = kbUnitCount(cMyID, cUnitTypeypSiegeElephant, cUnitStateAlive);
   if (numSiegeElephants >= 2)
   {
      // Create/update maintain plan
      if (mansabdarSiegeElephantPlan < 0)
      {
         mansabdarSiegeElephantPlan = createSimpleMaintainPlan(cUnitTypeypSiegeElephantMansabdar, 1, false, kbBaseGetMainID(cMyID), 1);
      }
      else
      {
         aiPlanSetVariableInt(mansabdarSiegeElephantPlan , cTrainPlanNumberToMaintain, 0, 1);
      }
   }
   else
   {
      // Update maintain plan, provided it exists
      if (mansabdarSiegeElephantPlan >= 0)
      {
         aiPlanSetVariableInt(mansabdarSiegeElephantPlan , cTrainPlanNumberToMaintain, 0, 0);
      }
   }
   // Check number of flailiphants, maintain mansabdar flailiphant as long as there are at least 10
   numFlailiphants = kbUnitCount(cMyID, cUnitTypeAbstractMercFlailiphant, cUnitStateAlive);
   if (numFlailiphants >= 10)
   {
      // Create/update maintain plan
      if (mansabdarFlailiphantPlan < 0)
      {
         mansabdarFlailiphantPlan = createSimpleMaintainPlan(cUnitTypeypMercFlailiphantMansabdar, 1, false, kbBaseGetMainID(cMyID), 1);
      }
      else
      {
         aiPlanSetVariableInt(mansabdarFlailiphantPlan , cTrainPlanNumberToMaintain, 0, 1);
      }
   }
   else
   {
      // Update maintain plan, provided it exists
      if (mansabdarFlailiphantPlan >= 0)
      {
         aiPlanSetVariableInt(mansabdarFlailiphantPlan , cTrainPlanNumberToMaintain, 0, 0);
      }
   }
}

rule sendChatToMyAllies
inactive
mininterval 10
{
    static bool agingUpTo2ChatSent = false;
    static bool agingUpTo3ChatSent = false;
    static bool agingUpTo4ChatSent = false;
    static bool agingUpTo5ChatSent = false;

    if (agingUpTo2ChatSent == false)
    {
       if (agingUpTo(cAge2) == true)
       {
	   sendChatToAllies("Up to Age II");
	   econMaster();
	   xsEnableRule("age2Monitor");
	   agingUpTo2ChatSent = true;
       }
    }
    if (agingUpTo3ChatSent == false)
    {
       if (agingUpTo(cAge3) == true)
       { 
	  sendChatToAllies("Up to Age III");
	  econMaster();        
	  xsEnableRule("age3Monitor");
	  agingUpTo3ChatSent = true;
       }
     }
     if (agingUpTo4ChatSent == false)
     {
	if (agingUpTo(cAge4) == true)
	{
	   sendChatToAllies("Up to Age IV");
	   econMaster();
	   xsEnableRule("age4Monitor");
	   agingUpTo4ChatSent = true;
	}
     }
     if (agingUpTo5ChatSent == false)
     {
	if (agingUpTo(cAge5) == true)
	{ 
	   sendChatToAllies("Up to Age V");
	   econMaster();
	   xsEnableRule("age5Monitor");
	   agingUpTo5ChatSent = true;
	}
    }

    static bool strategyChatSent = false;
    if (strategyChatSent == false)
    {
       if (xsGetTime() > 10000)
       {
	  strategyChatSent = true; /*
		  if (kbGetAge() <= cAge2)
		  {
			 if (btRushBoom <= 0)
			sendChatToAllies("Target Strategy: Turtle");
			 if (btRushBoom > 0)
			sendChatToAllies("Target Strategy: Rushing");		
			  }*/
       }
    } 
}

rule harassMonitor
inactive
group tcComplete
minInterval 5
{
    if (kbGetAge() < cAge2)
      return;

    if (kbUnitCount(cMyID, cUnitTypeLogicalTypeLandMilitary, cUnitStateAlive) < 3)
      return;

    static int enemyPointQuery = -1;  

    int i = 0;
    int targetID = -1;
    int targetPlayerID = -1;
    int targetBaseID = -1;
    vector targetLocation = cInvalidVector;
    vector targetBaseLocation = cInvalidVector; 
    int militaryCount = kbUnitCount(cMyID, cUnitTypeLogicalTypeLandMilitary, cUnitStateAlive);
    float militaryEquivalence = militaryCount + kbUnitCount(cMyID, cUnitTypeDopplesoldner, cUnitStateAlive) + kbUnitCount(cMyID, cUnitTypeypKensei, cUnitStateAlive);

    ////////////////military stance setting//////////////
    static int stancePlan = -1;
    if (stancePlan < 0)
    {
       stancePlan = aiPlanCreate("stancePlan", cPlanAttack);
       if (kbGetCiv() == cCivSpanish)
         aiPlanAddUnitType(stancePlan, cUnitTypeExplorerDog, 1, 3, 5);
       if (kbGetCiv() == cCivChinese)
         aiPlanAddUnitType(stancePlan, cUnitTypeypMonkDisciple, 1, 3, 5);
       aiPlanAddUnitType(stancePlan, cUnitTypeLogicalTypeLandMilitary, 1, 3, 5);
       aiPlanAddUnitType(stancePlan, cUnitTypexpMedicineManAztec, 0, 0, 0);
					
       aiPlanSetUnitStance(stancePlan, cUnitStanceAggressive);
       //aiPlanSetUnitStance(stancePlan, cUnitStanceDefensive);

       aiPlanSetDesiredPriority(stancePlan, 100);
       aiPlanSetVariableInt(stancePlan, cAttackPlanRefreshFrequency, 0, 2);
       aiPlanSetActive(stancePlan);
    }
    else
    {
       if (kbGetCiv() == cCivSpanish)
         aiPlanAddUnitType(stancePlan, cUnitTypeExplorerDog, 1, 3, 5);
       if (kbGetCiv() == cCivChinese)
         aiPlanAddUnitType(stancePlan, cUnitTypeypMonkDisciple, 1, 3, 5);
       aiPlanAddUnitType(stancePlan, cUnitTypeLogicalTypeLandMilitary, 1, 3, 5);
       aiPlanAddUnitType(stancePlan, cUnitTypexpMedicineManAztec, 0, 0, 0);
       aiPlanSetActive(stancePlan);
    }  
    ////////////////military stance setting//////////////

    /////////////////////harass plan///////////////////
    enemyPointQuery = createSimpleQuery(cPlayerRelationEnemyNotGaia, cUnitTypeAbstractVillager, cUnitStateAlive);
    kbUnitQueryResetResults(enemyPointQuery);
    int enemyVillagerCount = kbUnitQueryExecute(enemyPointQuery);
    if (enemyVillagerCount > 0) 
    {
       targetID = kbUnitQueryGetResult(enemyPointQuery, aiRandInt(enemyVillagerCount));
       targetPlayerID = kbUnitGetPlayerID(targetID);
       targetLocation = kbUnitGetPosition(targetID);
       targetBaseLocation = kbBaseGetLocation(targetPlayerID, kbBaseGetMainID(targetPlayerID));
       static vector lastHarassLocation = cInvalidVector;
       if ( (distance(targetLocation, targetBaseLocation) > 80.0) && (distance(targetLocation, lastHarassLocation) > 20.0) )
       {
	  if ( (getUnitCountByLocation(cUnitTypeFortFrontier, cPlayerRelationEnemyNotGaia, cUnitStateAlive, targetLocation, 60.0) < 1)&&
	       (getUnitCountByLocation(cUnitTypeMilitaryBuilding, cPlayerRelationEnemyNotGaia, cUnitStateAlive, targetLocation, 40.0) < 1)&&
	       (getUnitCountByLocation(cUnitTypeLogicalTypeLandMilitary, cPlayerRelationEnemyNotGaia, cUnitStateAlive, targetLocation, 30.0) < 1)&&
	       (kbAreaGroupGetIDByPosition(kbBaseGetLocation(cMyID, kbBaseGetMainID(cMyID))) == kbAreaGroupGetIDByPosition(targetLocation)) && 							
	       (militaryEquivalence >= 5))
	  {
	     int harassPlan = aiPlanCreate("harassPlan", cPlanAttack);
	     aiPlanSetVariableInt(harassPlan, cAttackPlanPlayerID, 0, targetPlayerID);
	     aiPlanSetNumberVariableValues(harassPlan, cAttackPlanTargetTypeID, 2, true);
	     aiPlanSetVariableInt(harassPlan, cAttackPlanTargetTypeID, 0, cUnitTypeLogicalTypeLandMilitary);
	     aiPlanSetVariableInt(harassPlan, cAttackPlanTargetTypeID, 1, cUnitTypeAbstractVillager);
	     aiPlanSetVariableVector(harassPlan, cAttackPlanGatherPoint, 0, targetLocation);
	     aiPlanSetVariableFloat(harassPlan, cAttackPlanGatherDistance, 0, 30.0);
	     aiPlanSetVariableInt(harassPlan, cAttackPlanRefreshFrequency, 0, 10);
	     aiPlanSetDesiredPriority(harassPlan, 90);
	     //aiPlanSetInitialPosition(harassPlan, kbBaseGetMilitaryGatherPoint(cMyID, kbBaseGetMainID(cMyID)));
             if (kbGetCiv() == cCivSpanish)
                aiPlanAddUnitType(harassPlan, cUnitTypeExplorerDog, 1, 3, 5);
             if (kbGetCiv() == cCivChinese)
                aiPlanAddUnitType(harassPlan, cUnitTypeypMonkDisciple, 1, 3, 5);
	     if (kbUnitCount(cMyID, cUnitTypeAbstractCavalry, cUnitStateAlive) >= 1)
		aiPlanAddUnitType(harassPlan, cUnitTypeAbstractCavalry, 1, 3, 5);
	     else if (kbUnitCount(cMyID, cUnitTypexpCoyoteMan, cUnitStateAlive) >= 1)
		aiPlanAddUnitType(harassPlan, cUnitTypexpCoyoteMan, 1, 3, 5);
	     else
		aiPlanAddUnitType(harassPlan, cUnitTypeAbstractInfantry, 3, 5, 10);
	     sendStatement(cPlayerRelationAlly, cAICommPromptToAllyIWillAttackEnemySettlers, targetLocation);
	     aiPlanSetActive(harassPlan);
	     lastHarassLocation = targetLocation;
	  }
       }
    } ////////////////////harass plan////////////////////
}